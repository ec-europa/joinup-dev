<?xml version="1.0" encoding="UTF-8" ?>

<project name="Joinup" default="help">

    <includepath classpath="src/Phing" />

    <!-- Import Config management targets. -->
    <import file="${project.basedir}/build.config.xml" optional="true" />

    <!-- Import Phing targets related to the D6 migration. -->
    <import file="${project.basedir}/build.migration.xml" optional="true" />

    <!-- Import Phing targets related to ContinuousPHP. -->
    <import file="${project.basedir}/build.continuousphp.xml" optional="true" />

    <!-- Import Phing targets related to Apache Solr. -->
    <import file="${project.basedir}/build.solr.xml" optional="true" />

    <!-- Import Phing targets related to Matomo. -->
    <import file="${project.basedir}/build.matomo.xml" optional="true" />

    <!-- Import Phing targets related to Redis cache. -->
    <import file="${project.basedir}/build.redis.xml" optional="true" />

    <!-- Import Phing targets related to Virtuoso. -->
    <import file="${project.basedir}/vendor/ec-europa/virtuoso/build.virtuoso.xml" optional="true" />

    <!-- Import Phing targets related to EU Login. -->
    <import file="${project.basedir}/build.eulogin.xml" optional="true" />

    <echo msg="Loading Behat task." />
    <taskdef name="behat" classname="BehatTask" />

    <echo msg="Loading After Import RDF fixtures task." />
    <taskdef name="afterrdffixturesimport" classname="\Joinup\Phing\AfterFixturesImportCleanup" />

    <echo msg="Loading Amazon S3 download task." />
    <taskdef name="s3dl" classname="\Joinup\Phing\AwsS3GetTask" />

    <echo msg="Loading Amazon S3 list task." />
    <taskdef name="s3list" classname="\Joinup\Phing\AwsS3ListTask" />

    <echo msg="Loading Drush task." />
    <taskdef name="drush" classname="\Phing\Drush\Task" />

    <echo msg="Loading PHP Codesniffer Configuration task." />
    <taskdef name="phpcodesnifferconfiguration" classname="\Joinup\Phing\PhpCodeSnifferConfigurationTask" />

    <echo msg="Loading PHPUnit Configuration task." />
    <taskdef name="phpunitconfiguration" classname="\Joinup\Phing\PhpUnitConfigurationTask" />

    <target name="help" description="Phing target list">
        <exec executable="${phing.bin}"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

    <!-- Make the settings folder writeable so that the installer can copy settings.php. -->
    <target name="writable-settings-folder">
        <chmod mode="0755" failonerror="true" verbose="true" quiet="false" file="${website.settings.dir}" />
    </target>

    <!-- Make settings.php writeable so that the installer can write to it. -->
    <target name="writable-settings-php">
        <if>
            <available file="${website.settings.php}" type="file" property="website.settings.php.available" />
            <then>
                <chmod mode="0644" failonerror="false" verbose="true" quiet="false" file="${website.settings.php}" />
            </then>
        </if>
    </target>

    <!-- Make settings.local.php writable. -->
    <target name="writable-settings-local-php">
        <if>
            <available file="${website.settings.local.php}" type="file" property="website.settings.local.php.available" />
            <then>
                <chmod mode="0644" failonerror="false" verbose="true" quiet="false" file="${website.settings.local.php}" />
            </then>
        </if>
    </target>

    <!-- Set up PHP CodeSniffer. -->
    <target name="setup-php-codesniffer" description="Generate the configuration file for PHP CodeSniffer.">
        <echo message="Generating PHP Codesniffer configuration files." />
        <phpcodesnifferconfiguration
                configFile="${phpcs.config}"
                extensions="${phpcs.extensions}"
                files="${phpcs.files}"
                globalConfig="${phpcs.global.config}"
                ignorePatterns="${phpcs.ignore}"
                report="${phpcs.report}"
                showProgress="${phpcs.progress}"
                showSniffCodes="${phpcs.sniffcodes}"
                standard="${phpcs.standard}" />

        <!-- Set up the git pre-push hook. -->
        <phingcall target="disable-pre-push" />
        <if>
            <equals arg1="${phpcs.prepush.enable}" arg2="1" />
            <then>
                <symlink link="${phpcs.prepush.destination}" target="${phpcs.prepush.source}" overwrite="true" />
            </then>
        </if>
    </target>

    <!-- Disable the PHP CodeSniffer pre-push hook. -->
    <target name="disable-pre-push" description="Disable the coding standards check when pushing to a git repository.">
        <delete file="${phpcs.prepush.destination}" failonerror="false" />
    </target>

    <!-- Set up Behat. -->
    <target name="setup-behat" description="Generate the configuration file for Behat.">
        <echo message="Creating behat.yml configuration file" />
        <loadfile property="behat.yml.content" file="${behat.yml.template}" />
        <echo message="${behat.yml.content}" file="${behat.yml.path}" />
    </target>

    <!-- Set up Drush. -->
    <target name="setup-drush" description="Generate the configuration file for Drush.">
        <!-- Allow to override from environment variable, if exist. This is
        useful on environments where we cannot configure local properties. -->
        <if>
            <isset property="env.DRUPAL_BASE_URL"/>
            <then>
                <property name="drupal.base_url" value="${env.DRUPAL_BASE_URL}" override="true"/>
                <echo message="The 'drupal.base_url' Phing property has been overridden by the DRUPAL_BASE_URL environment variable."/>
            </then>
        </if>
        <echo message="Creating drush.yml configuration file" />
        <loadfile property="drush.yml.content" file="${drush.yml.template}" />
        <echo message="${drush.yml.content}" file="${drush.yml.path}" />
    </target>

    <!-- Set up development configuration, including on-screen error logging and debugging options. -->
    <target name="enable-dev-settings">
        <phingcall target="include-local-settings" />

        <if>
            <not>
                <available file="${website.settings.local.php}"/>
            </not>
            <then>
                <!-- Copy settings file containing development values, but preserve any existing local settings. -->
                <copy file="${website.settings.local.php.example}" tofile="${website.settings.local.php}"/>
                <!-- Let the site config decide the verbosity or error messages -->
                <replaceregexp file="${website.settings.local.php}" pattern="(\$config\['system.logging'\]\['error_level'\].*)" replace="# $1"/>
            </then>
        </if>
    </target>

    <!-- Create an empty local settings file, if it doesn't exist yet. -->
    <target name="create-local-settings">
        <if>
            <not>
                <available file="${website.settings.local.php}" type="file" property="website.settings.local.php.available" />
            </not>
            <then>
                <phingcall target="writable-settings-folder" />
                <echo
                        message="&lt;?php${line.separator}"
                        file="${website.settings.local.php}" />
            </then>
        </if>
    </target>

    <!-- Uncomment the inclusion of the local settings file in settings.php. -->
    <target name="include-local-settings">
        <phingcall target="writable-settings-folder" />
        <phingcall target="writable-settings-php" />
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^# (if \(file_exists\(\$app_root \. '\/' \. \$site_path \. '\/settings\.local\.php'\)\) \{\n)# (  include \$app_root \. '\/' \. \$site_path \. '\/settings\.local\.php';\n)# (\})"
                            replace="\1\2\3"
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- Enable development modules. -->
    <target name="enable-dev-modules">
        <drush
                command="pm-enable"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>${drupal.modules.dev}</param>
        </drush>
    </target>

    <!-- Enable a module. -->
    <target name="enable-module">
        <drush
                command="pm-enable"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>${module}</param>
        </drush>
    </target>

    <target name="clean-email-redirect-settings">
      <reflexive>
        <fileset dir="${website.settings.dir}">
          <include pattern="settings.local.php" />
        </fileset>
        <filterchain>
          <replaceregexp>
            <regexp
              pattern="(\n)?\$config\['system.mail'\]\['interface'\]\['default'\] = 'devel_mail_log';(\n)?"
              replace="" />
            <regexp
              pattern="(\n)?\$config\['mailsystem.settings'\]\['defaults'\]\['sender'\] = 'devel_mail_log';(\n)?"
              replace="${line.separator}"
              modifiers="" />
          </replaceregexp>
        </filterchain>
      </reflexive>
    </target>

    <target name="redirect-outgoing-email" depends="clean-email-redirect-settings">
        <if>
            <equals arg1="${drupal.redirect.email}" arg2="yes" />
            <then>
                <phingcall target="enable-module">
                    <property name="module" value="devel" />
                </phingcall>
                <append
                        destFile="${website.settings.local.php}"
                        text="${line.separator}$config['system.mail']['interface']['default'] = 'devel_mail_log';${line.separator}" />
                <append
                        destFile="${website.settings.local.php}"
                        text="$config['mailsystem.settings']['defaults']['sender'] = 'devel_mail_log';${line.separator}" />
            </then>
            <else>
                <echo message="Skipping redirection of outgoing e-mail. Set 'drupal.redirect.email = yes' to enable." />
            </else>
        </if>
    </target>

    <!-- Create services.yml by copying the default file. -->
    <target name="create-services-yml">
        <if>
            <not>
                <available file="${website.services.yml}" type="file" property="website.services.yml.available" />
            </not>
            <then>
                <copy file="${website.services.yml.default}" tofile="${website.services.yml}" />
            </then>
        </if>
    </target>

    <!-- Make services.yml writeable. -->
    <target
            name="writable-services-yml"
            depends="create-services-yml">
        <if>
            <available file="${website.services.yml}" type="file" property="website.services.yml.available" />
            <then>
                <chmod mode="0644" failonerror="false" verbose="true" quiet="false" file="${website.services.yml}" />
            </then>
        </if>
    </target>

    <target
            name="setup-dev"
            description="Set up 'development mode' for an installed website."
            depends="enable-dev-settings, setup-config-exclude, redirect-outgoing-email, enable-dev-modules" />

    <!-- Install the website. -->
    <target name="install" depends="writable-settings-folder, writable-settings-php, disable-config-read-only">
        <drush
                command="site-install"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <option name="db-url" value="${drupal.db.url}" />
            <option name="site-name" value="${website.site.name}" />
            <option name="account-name" value="${drupal.admin.username}" />
            <option name="account-pass" value="${drupal.admin.password}" />
            <option name="account-mail" value="${drupal.admin.email}" />
            <option name="existing-config" />
            <param>${website.profile.name}</param>
            <!-- Disable sending of e-mails during installation. -->
            <param>install_configure_form.enable_update_status_module=NULL</param>
            <param>install_configure_form.enable_update_status_emails='NULL'</param>
            <param>install_settings_form.sparql.host=${sparql.host}</param>
            <param>install_settings_form.sparql.port=${sparql.port}</param>
            <param>install_settings_form.sparql.namespace=${sparql.namespace}</param>
        </drush>

        <!-- Set the transaction type to READ-COMMITTED. -->
        <phingcall target="set-mysql-transaction-type" />

        <!-- Create the private files directory -->
        <phingcall target="create-private-files-directory" />

        <!-- Make sure persistent session cookies are disabled. -->
        <phingcall target="disable-persistent-session-cookies" />
    </target>

    <target name="import-rdf-fixtures">
        <rdf-import-fixtures
                IsqlPath="${isql.bin}"
                DataSourceName="${sparql.dsn}"
                Username="${sparql.user}"
                Password="${sparql.password}"
                Port="${sparql.port}" />

        <afterrdffixturesimport
                IsqlPath="${isql.bin}"
                DataSourceName="${sparql.dsn}"
                Username="${sparql.user}"
                Password="${sparql.password}"
                Port="${sparql.port}" />
    </target>

    <!-- Set up PHPUnit. -->
    <target name="setup-phpunit" description="Generate the configuration file for PHPUnit.">
        <phpunitconfiguration
                configFile="${phpunit.config}"
                distFile="${phpunit.dist}"
                baseUrl="${phpunit.base_url}"
                dbUrl="${phpunit.db_url}"
                sparqlUrl="${phpunit.sparql_url}"
                browsertestOutputDirectory="${phpunit.browsertest_output_dir}"
                browsertestOutputFile="${phpunit.browsertest_output_file}"
                dttBaseUrl="${dtt.base_url}"
                dttApiUrl="${dtt.api_url}"
                dttMinkDriverArgs="${dtt.mink_driver_args}" />

        <!-- Create the directory and file for browsertest output. -->
        <mkdir dir="${phpunit.browsertest_output_dir}" />
        <touch file="${phpunit.browsertest_output_file}" />

    </target>

    <target name="create-phpunit-mysql-database">
        <php expression="explode('://', '${phpunit.db_url}', 2)[0]" returnProperty="phpunit.db.type"/>
        <if>
            <equals arg1="${phpunit.db.type}" arg2="mysql"/>
            <then>
                <drush
                        command="sql:create"
                        assume="yes"
                        root="${website.drupal.dir}"
                        bin="${drush.bin}"
                        verbose="${drush.verbose}">
                    <option name="db-url" value="${phpunit.db_url}"/>
                </drush>
            </then>
        </if>
    </target>

    <!-- Set the transaction type to READ-COMMITTED. -->
    <target name="set-mysql-transaction-type"
            description="Sets the MySQL transaction to READ-COMMITTED"
            depends="writable-settings-folder, writable-settings-php">

        <!-- Avoid duplicates in settings.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$databases\['default'\]\['default'\]\['init_commands'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <append destFile="${website.settings.php}" text="$databases['default']['default']['init_commands'] = ['isolation' => &quot;SET SESSION tx_isolation='READ-COMMITTED'&quot;];${line.separator}" />
    </target>

    <!-- Create the private files directory -->
    <target name="create-private-files-directory"
            description="Create Drupal private files directory."
            depends="enable-dev-settings, writable-settings-folder, writable-settings-local-php">

        <!-- Create the directory if doesn't already exist. -->
        <mkdir dir="${drupal.private_files.dir}"/>

        <!-- Avoid duplicates in settings.local.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$settings\['file_private_path'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <!-- Add the settings.local.php setting. -->
        <append destFile="${website.settings.local.php}" text="$settings['file_private_path'] = '${drupal.private_files.dir}';${line.separator}" />
    </target>

    <!-- Disable persistent session cookies, this is necessary for the "Remember
      me" option at user log in. -->
    <target name="disable-persistent-session-cookies"
            description="Disable persistent session cookies"
            depends="writable-settings-folder, writable-services-yml">

        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="services.yml" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                        pattern="(cookie_lifetime: )\d+(0$)"
                        replace="\1\2"
                        modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <target name="enable-config-read-only"
            depends="writable-settings-folder, writable-settings-php"
            description="Enables config_readonly.">

        <!-- Remove any existing setting. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$settings\['config_readonly'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <!-- Add config_readonly kill-switch. -->
        <append destFile="${website.settings.php}" text="$settings['config_readonly'] = !file_exists(getcwd() . '/../disable-config-readonly');${line.separator}" />

        <!-- Make sure config_readonly is enabled. -->
        <if>
            <istrue value="${config_readonly.enabled}"/>
            <then>
                <delete file="${project.basedir}/disable-config-readonly" quiet="true"/>
            </then>
        </if>
    </target>

    <target name="disable-config-read-only"
            depends="writable-settings-folder, writable-settings-php"
            description="Disables config_readonly.">
        <touch file="${project.basedir}/disable-config-readonly" />
    </target>

    <target name="ensure-search-api-solr-site-hash">
        <drush
                command="php:eval"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>'\Drupal\search_api_solr\Utility\Utility::getSiteHash();'</param>
        </drush>
    </target>

    <!-- Create demo users. -->
    <target name="create-demo-users" description="Create demo users.">
        <foreach list="${drupal.demo.users}" param="drupal.demo.user" target="create-demo-user" delimiter=","/>
        <!-- Create a user with only "authenticated user" role assigned. -->
        <drush
                command="user-create"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <option name="mail" value="user@example.com"/>
            <option name="password" value="user"/>
            <param>user</param>
        </drush>
        <drush
                command="cas-mock-server:user-create"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>user</param>
            <option name="email" value="user@example.com"/>
            <option name="password" value="user"/>
        </drush>
        <drush
                command="cas:set-cas-username"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>user</param>
            <param>user</param>
        </drush>
        <!-- Grant the moderator role also to the administrator. -->
        <drush
                command="user-add-role"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>moderator</param>
            <param>administrator</param>
        </drush>
    </target>

    <!-- Create a demo user. Subtarget of "create-demo-users". -->
    <target name="create-demo-user">
        <drush
                command="user-create"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <option name="mail" value="${drupal.demo.user}@example.com" />
            <option name="password" value="${drupal.demo.user}" />
            <param>${drupal.demo.user}</param>
        </drush>
        <drush
                command="user-add-role"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>${drupal.demo.user}</param>
            <param>${drupal.demo.user}</param>
        </drush>
        <drush
                command="cas-mock-server:user-create"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>${drupal.demo.user}</param>
            <option name="email" value="${drupal.demo.user}@example.com" />
            <option name="password" value="${drupal.demo.user}" />
        </drush>
        <drush
                command="cas:set-cas-username"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}">
            <param>${drupal.demo.user}</param>
            <param>${drupal.demo.user}</param>
        </drush>
    </target>

    <!-- Mock the Newsroom newsletter subscription service. -->
    <target name="setup-mocked-newsroom-newsletter-subscriber"
            description="Sets up a mocked Newsroom newsletter subscription service."
            depends="writable-settings-folder">

        <!-- Avoid duplicates in settings.local.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$config\['oe_newsroom_newsletter\.subscriber'\]\['class'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <append destFile="${website.settings.local.php}" text="$config['oe_newsroom_newsletter.subscriber']['class'] = 'Drupal\oe_newsroom_newsletter\NewsletterSubscriber\MockNewsletterSubscriber';${line.separator}" />
    </target>

    <target name="set-custom-error-handlers"
            depends="writable-settings-php">
        <replaceregexp file="${website.settings.php}" pattern="(.*) // Used by 'error_page' module.${line.separator}" replace="" />
        <append destFile="${website.settings.php}" text="$settings['error_page']['uuid'] = TRUE; // Used by 'error_page' module.${line.separator}$settings['error_page']['template_dir'] = DRUPAL_ROOT . '/../resources/error_page'; // Used by 'error_page' module.${line.separator}set_error_handler(['Drupal\error_page\ErrorPageErrorHandler', 'handleError']); // Used by 'error_page' module.${line.separator}set_exception_handler(['Drupal\error_page\ErrorPageErrorHandler', 'handleException']); // Used by 'error_page' module.${line.separator}" />
    </target>

    <target name="verbose-error-logging"
            depends="writable-settings-folder, writable-settings-local-php, clear-error-logging">
        <replaceregexp
                file="${website.settings.local.php}"
                pattern="\$config\['system\.logging'\]\['error_level'\].*${line.separator}"
                replace="" />
        <append destFile="${website.settings.local.php}" text="$config['system.logging']['error_level'] = 'verbose';${line.separator}" />
    </target>

    <target name="clear-error-logging"
            depends="writable-settings-folder, writable-settings-local-php">
        <replaceregexp
                file="${website.settings.local.php}"
                pattern="\$config\['system\.logging'\]\['error_level'\].*${line.separator}"
                replace="" />
    </target>

    <target name="disable-webtools-geocoding-cache">
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                        pattern="(\n)?\$settings\['cache'\]\['bins'\]\['geocoder'\] = 'cache.backend.file_system';(\n)?"
                        replace="" />
                    <regexp
                        pattern="(\n)?\$settings\['filecache'\]\['directory'\]\['bins'\]\['geocoder'\] = '.*/tests/fixtures/webtools_geocoding_cache';(\n)?"
                        replace=""
                        modifiers="" />
                    <regexp
                        pattern="(\n)?\$settings\['filecache'\]\['strategy'\]\['bins'\]\['geocoder'\] = 'persist';(\n)?"
                        replace="${line.separator}"
                        modifiers="" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <target name="enable-webtools-geocoding-cache">
        <phingcall target="enable-module">
            <property name="module" value="filecache" />
        </phingcall>
        <phingcall target="disable-webtools-geocoding-cache" />
        <append
            destFile="${website.settings.local.php}"
            text="${line.separator}$settings['cache']['bins']['geocoder'] = 'cache.backend.file_system';${line.separator}" />
        <append
            destFile="${website.settings.local.php}"
            text="$settings['filecache']['directory']['bins']['geocoder'] = '${behat.webtools_geocoding.cache.path}';${line.separator}" />
        <append
            destFile="${website.settings.local.php}"
            text="$settings['filecache']['strategy']['bins']['geocoder'] = 'persist';${line.separator}" />
    </target>

    <target
        name="build-dist"
        description="Build a distribution package.">
        <exec command="./vendor/bin/run joinup:compile-scss" checkreturn="true" passthru="true" />
        <phingcall target="setup-drush" />
    </target>

    <target
        name="build-dev"
        description="Build a development environment.">
        <phingcall target="setup-behat" />
        <phingcall target="setup-php-codesniffer" />
        <phingcall target="setup-phpunit" />
        <phingcall target="setup-drush" />
        <exec command="./vendor/bin/run joinup:compile-scss" checkreturn="true" passthru="true" />
    </target>

    <target
        name="install-dev"
        description="Install the website and set up the development environment."
        depends="setup-virtuoso-permissions, purge-virtuoso-backend, clean-redis-settings, clean-email-redirect-settings, disable-webtools-geocoding-cache, setup-config-sync-dir">
        <exec command="./vendor/bin/run solr:empty" checkreturn="true" passthru="true"/>
        <phingcall target="install"/>
        <phingcall target="ensure-search-api-solr-site-hash"/>
        <phingcall target="setup-redis"/>
        <phingcall target="import-rdf-fixtures"/>
        <phingcall target="setup-dev"/>
        <phingcall target="configure-apache-solr-drupal"/>
        <phingcall target="configure-matomo-drupal"/>
        <phingcall target="create-demo-users"/>
        <phingcall target="enable-webtools-geocoding-cache"/>
        <phingcall target="setup-mocked-newsroom-newsletter-subscriber"/>
        <phingcall target="set-custom-error-handlers"/>
        <phingcall target="verbose-error-logging"/>
        <phingcall target="start-cas-mock-server"/>
        <phingcall target="enable-config-read-only"/>
    </target>

</project>
