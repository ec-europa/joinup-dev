<?xml version="1.0" encoding="UTF-8" ?>

<project name="Joinup" default="help">

    <!-- Import Phing targets related to the D6 migration. -->
    <import file="${project.basedir}/build.migration.xml" optional="true" />

    <!-- Import Phing targets related to ContinuousPHP. -->
    <import file="${project.basedir}/build.continuousphp.xml" optional="true" />

    <!-- Import Phing targets related to Apache Solr. -->
    <import file="${project.basedir}/build.solr.xml" optional="true" />

    <!-- Import Phing targets related to Matomo. -->
    <import file="${project.basedir}/build.matomo.xml" optional="true" />

    <!-- Import Phing targets related to Redis cache. -->
    <import file="${project.basedir}/build.redis.xml" optional="true" />

    <!-- Import Phing targets related to Virtuoso. -->
    <import file="${project.basedir}/vendor/ec-europa/virtuoso/build.virtuoso.xml" optional="true" />

    <echo msg="Loading Behat task." />
    <taskdef name="behat" classname="BehatTask" />

    <echo msg="Loading After Import RDF fixtures task." />
    <taskdef name="afterrdffixturesimport" classname="\DrupalProject\Phing\AfterFixturesImportCleanup" />

    <echo msg="Setting-up MySQL auto-increment values for {comment}, {file_managed}, {node} and {users}." />
    <taskdef name="setmysqlautoincrement" classname="\DrupalProject\Phing\SetMysqlAutoincrement" />

    <echo msg="Loading Amazon S3 download task." />
    <taskdef name="s3dl" classname="\DrupalProject\Phing\AwsS3GetTask" />

    <echo msg="Loading Amazon S3 list task." />
    <taskdef name="s3list" classname="\DrupalProject\Phing\AwsS3ListTask" />

    <echo msg="Loading Truncate Cache Tables task." />
    <taskdef name="truncatecachetables" classname="\DrupalProject\Phing\TruncateCacheTablesTask" />

    <echo msg="Loading Empty MySQL Database task." />
    <taskdef name="emptymysqldatabase" classname="\DrupalProject\Phing\MySqlEmptyDatabaseTask" />

    <!-- Install the website. -->
    <target name="install" depends="writable-settings-folder, writable-settings-php, disable-config-read-only">
        <drush
            command="site-install"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="db-url" value="${drupal.db.url}" />
            <option name="site-name" value="${website.site.name}" />
            <option name="account-name" value="${drupal.admin.username}" />
            <option name="account-pass" value="${drupal.admin.password}" />
            <option name="account-mail" value="${drupal.admin.email}" />
            <param>${website.profile.name}</param>
            <!-- Disable sending of e-mails during installation. -->
            <param>install_configure_form.enable_update_status_module=NULL</param>
            <param>install_configure_form.enable_update_status_emails='NULL'</param>
            <param>install_settings_form.sparql.host=${sparql.host}</param>
            <param>install_settings_form.sparql.port=${sparql.port}</param>
            <param>install_settings_form.sparql.namespace=${sparql.namespace}</param>
        </drush>

        <!-- Set the auto-increment default values for some tables. -->
        <setmysqlautoincrement />

        <!-- Set the transaction type to READ-COMMITTED. -->
        <phingcall target="set-mysql-transaction-type" />

        <!-- Create the private files directory -->
        <phingcall target="create-private-files-directory" />

        <!-- Make sure persistent session cookies are disabled. -->
        <phingcall target="disable-persistent-session-cookies" />
    </target>

    <target name="import-rdf-fixtures">
        <rdf-import-fixtures
            IsqlPath="${isql.bin}"
            DataSourceName="${sparql.dsn}"
            Username="${sparql.user}"
            Password="${sparql.password}"
            Port="${sparql.port}" />

        <afterrdffixturesimport
            IsqlPath="${isql.bin}"
            DataSourceName="${sparql.dsn}"
            Username="${sparql.user}"
            Password="${sparql.password}"
            Port="${sparql.port}" />
    </target>

    <!-- Execute Drupal updates. -->
    <target name="execute-updates">
        <!-- Cache might be stale with memory cache backends, such as Redis,
        after a database restore. Running `drush updatedb` may give unexpected
        results, for example when trying to enable modules that were enabled
        prior to database restore. That's because they will be falsely reported
        as "already installed". Clear the config cache bin so that updates will
        run on with non-cached configuration values. -->
        <drush
                command="cache:clear"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <param>bin</param>
            <param>config</param>
        </drush>
        <drush
                command="updatedb"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
        </drush>
        <drush
                command="cs-update"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <option name="discard-overrides" />
        </drush>
    </target>

    <!-- Download database backups from the ASDA server. -->
    <target name="download-databases" depends="download-virtuoso-database, download-sql-database" />

    <!-- Downloads a backup of the Virtuoso database from the ASDA server. -->
    <target name="download-virtuoso-database">
        <mkdir dir="${exports.virtuoso.destination.folder}" />
        <echo msg="Fetching list of files to download." />
        <httpget
                url="${exports.virtuoso.source}"
                authUser="${asda.username}"
                authPassword="${asda.password}"
                authScheme="basic"
                dir="${exports.virtuoso.destination.folder}"
        />
        <untar file="${exports.virtuoso.destination.folder}JOINUP_VIRTUOSO_PRD_LATEST.tar.gz" todir="${exports.virtuoso.destination.folder}" />

        <copy todir="${exports.virtuoso.destination.folder}">
            <fileset dir="${exports.virtuoso.destination.folder}virtuoso_dump/">
                <include name="*.bp"/>
            </fileset>
        </copy>
        <delete>
            <fileset dir="${exports.virtuoso.destination.folder}">
                <include name="*.tar.gz" />
                <include name="virtuoso_dump/" />
            </fileset>
        </delete>
    </target>

    <!-- Downloads a backup of the SQL database from the ASDA server. -->
    <target name="download-sql-database">
        <echo msg="Downloading SQL database dump from ASDA." />
        <httpget
                url="${exports.sql.source}"
                authUser="${asda.username}"
                authPassword="${asda.password}"
                authScheme="basic"
                dir="${tmp.dir}"
        />
        <copy file="${tmp.dir}/JOINUP_PRD_LATEST.sql.gz" tofile="${exports.sql.destination}" overwrite="true"/>
        <delete file="${tmp.dir}/dump.sql" failonerror="false" />
        <exec command="gunzip -f ${exports.sql.destination}" dir="${tmp.dir}" />
    </target>

    <target name="restore-mysql-dump" depends="empty-mysql-database">
        <drush
                command="sql-query"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <option name="file" value="${tmp.dir}/dump.sql" />
        </drush>
        <!-- Make sure to truncate the cache tables immediately after importing.
             The dump might contain stale data since we use Redis on production
             for caching. -->
        <phingcall target="truncate-cache-tables" />
    </target>

    <target name="empty-mysql-database">
        <echo message="Drop all MySQL tables from the database." />
        <emptymysqldatabase
                url="${drupal.db.dsn}"
                userId="${drupal.db.user}"
                password="${drupal.db.password}" />
    </target>

    <target name="truncate-cache-tables">
        <echo message="Truncating cache tables." />
        <truncatecachetables
                url="${drupal.db.dsn}"
                userId="${drupal.db.user}"
                password="${drupal.db.password}" />
    </target>

    <target name="restore-databases" depends="restore-mysql-dump, virtuoso-restore-backup" />

    <target name="rebuild-environment" depends="restore-databases, execute-updates" />

    <!-- Set up PHPUnit. -->
    <target name="setup-phpunit" description="Generate the configuration file for PHPUnit.">
        <if>
            <available file="${phpunit.config}" type="file" property="phpunit.config.available" />
            <then>
                <echo message="Deleting existing PHPUnit configuration file." />
                <delete file="${phpunit.config}" failonerror="false" />
            </then>
        </if>
        <phpunitconfiguration
                configFile="${phpunit.config}"
                distFile="${phpunit.dist}"
                files="${phpunit.files}"
                directories="${phpunit.directories}"
                testsuiteName="${phpunit.testsuite.name}"
                baseUrl="${phpunit.base_url}"
                dbUrl="${phpunit.db_url}"
                sparqlUrl="${phpunit.sparql_url}"
                legacyDbUrl="${drupal.db.type}://${drupal.db.user}:${drupal.db.password}@${drupal.db.host}:${drupal.db.port}/${phpunit.migrate.legacy_db.name}"
                browsertestOutputDirectory="${phpunit.browsertest_output_dir}"
                browsertestOutputFile="${phpunit.browsertest_output_file}" />

        <!-- Create the directory and file for browsertest output. -->
        <mkdir dir="${phpunit.browsertest_output_dir}" />
        <touch file="${phpunit.browsertest_output_file}" />
    </target>

    <!-- Enable modules for user acceptance testing. These are different from the
      ones in enable-dev-modules as it can contain modules not needed for development
      like demo content modules. -->
    <target name="enable-uat-modules">
        <drush
                command="pm-enable"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <param>${drupal.modules.uat}</param>
        </drush>
    </target>

    <target name="clear-cache">
        <drush
                command="cr"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
        </drush>
    </target>

    <!-- Compile SASS to CSS. -->
    <target name="compile-sass"
            description="Compile the SASS to CSS.">
        <!-- Make sure the CSS directory exists. -->
        <mkdir dir="${sass.output.dir}" />
        <sass
            executable="${sass.bin}"
            flags="--sourcemap=${sass.sourcemap}"
            style="${sass.style}"
            input="${sass.input}"
            output="${sass.output.dir}/${sass.output.file}" />
    </target>

    <!-- Set the transaction type to READ-COMMITTED. -->
    <target name="set-mysql-transaction-type"
            description="Sets the MySQL transaction to READ-COMMITTED"
            depends="writable-settings-folder, writable-settings-php">

        <!-- Avoid duplicates in settings.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$databases\['default'\]\['default'\]\['init_commands'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <append destFile="${website.settings.php}" text="$databases['default']['default']['init_commands'] = ['isolation' => &quot;SET SESSION tx_isolation='READ-COMMITTED'&quot;];${line.separator}" />
    </target>

    <!-- Create the private files directory -->
    <target name="create-private-files-directory"
            description="Create Drupal private files directory."
            depends="enable-dev-settings, writable-settings-folder, writable-settings-local-php">

        <!-- Create the directory if doesn't already exist. -->
        <mkdir dir="${drupal.private_files.dir}"/>

        <!-- Avoid duplicates in settings.local.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$settings\['file_private_path'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <!-- Add the settings.local.php setting. -->
        <append destFile="${website.settings.local.php}" text="$settings['file_private_path'] = '${drupal.private_files.dir}';${line.separator}" />
    </target>

    <!-- Disable persistent session cookies, this is necessary for the "Remember
      me" option at user log in. -->
    <target name="disable-persistent-session-cookies"
        description="Disable persistent session cookies"
        depends="writable-settings-folder, writable-services-yml">

        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="services.yml" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                        pattern="(cookie_lifetime: )\d+(0$)"
                        replace="\1\2"
                        modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- Export complete site configuration. -->
    <target name="export-config">
        <!-- Make sure the config directory exists. -->
        <mkdir dir="${drupal.config.dir}" />
        <drush
            command="config-export"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="destination" value="${drupal.config.dir}" />
        </drush>
    </target>

    <target
        name="enable-config-read-only"
        depends="writable-settings-folder, writable-settings-php"
        description="Make config read-only.">
        <phingcall target="enable-module">
            <property name="module" value="config_readonly" />
        </phingcall>
        <append destFile="${website.settings.php}" text="$settings['config_readonly'] = TRUE;${line.separator}" />
    </target>

    <target
        name="disable-config-read-only"
        depends="writable-settings-folder, writable-settings-php"
        description="Make config writable.">
        <if>
            <available file="${website.settings.php}" type="file" property="settings.php.available" />
            <then>
                <reflexive>
                    <fileset dir="${website.settings.dir}">
                        <include pattern="settings.php" />
                    </fileset>
                    <filterchain>
                        <replaceregexp>
                            <regexp
                                pattern="^\$settings\['config_readonly'\].*$\n"
                                replace=""
                                modifiers="m" />
                        </replaceregexp>
                    </filterchain>
                </reflexive>
            </then>
        </if>
    </target>

    <target name="ensure-search-api-solr-site-hash">
        <drush
                command="php:eval"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <param>'\Drupal\search_api_solr\Utility\Utility::getSiteHash();'</param>
        </drush>
    </target>

    <!-- Create demo users. -->
    <target name="create-demo-users" description="Create demo users.">
        <foreach list="${drupal.demo.users}" param="drupal.demo.user" target="create-demo-user" delimiter="," />
        <!-- Create a user with only "authenticated user" role assigned. -->
        <drush
                command="user-create"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <option name="mail" value="user@example.com" />
            <option name="password" value="user" />
            <param>user</param>
        </drush>
        <!-- Grant the moderator role also to the administrator. -->
        <drush
                command="user-add-role"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <param>moderator</param>
            <param>administrator</param>
        </drush>
    </target>

    <!-- Enable and configure the stage_file_proxy module. -->
    <target name="setup-stage-file-proxy" description="Set up the file proxy settings.">
        <drush
                command="pm-enable"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <param>stage_file_proxy</param>
        </drush>
        <phingcall target="configure-stage-file-proxy"/>
    </target>

    <target name="configure-stage-file-proxy">
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <!-- Comment out previous configuration. -->
                <replaceregexp>
                    <regexp
                            pattern="^[^#](.*stage_file_proxy.*\.settings.*)$"
                            replace="#\1"
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>
        <append
                destFile="${website.settings.local.php}"
                text="$config['stage_file_proxy.settings']['origin'] = '${stage_file_proxy.origin}';${line.separator}$config['stage_file_proxy.settings']['hotlink'] = ${stage_file_proxy.hotlink};${line.separator}" />
    </target>

    <!-- Mock the Newsroom newsletter subscription service. -->
    <target name="setup-mocked-newsroom-newsletter-subscriber"
            description="Sets up a mocked Newsroom newsletter subscription service."
            depends="writable-settings-folder">

        <!-- Avoid duplicates in settings.local.php, if the file already exists. -->
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                            pattern="^\$config\['oe_newsroom_newsletter\.subscriber'\]\['class'\].*$\n"
                            replace=""
                            modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>

        <append destFile="${website.settings.local.php}" text="$config['oe_newsroom_newsletter.subscriber']['class'] = 'Drupal\oe_newsroom_newsletter\NewsletterSubscriber\MockNewsletterSubscriber';${line.separator}" />
    </target>

    <target name="disable-webtools-geocoding-cache">
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.local.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                        pattern="(\n)?\$settings\['cache'\]\['bins'\]\['geocoder'\] = 'cache.backend.file_system';(\n)?"
                        replace="" />
                    <regexp
                        pattern="(\n)?\$settings\['filecache'\]\['directory'\]\['bins'\]\['geocoder'\] = '.*/tests/fixtures/webtools_geocoding_cache';(\n)?"
                        replace=""
                        modifiers="" />
                    <regexp
                        pattern="(\n)?\$settings\['filecache'\]\['strategy'\]\['bins'\]\['geocoder'\] = 'persist';(\n)?"
                        replace="${line.separator}"
                        modifiers="" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <target name="enable-webtools-geocoding-cache">
        <phingcall target="enable-module">
            <property name="module" value="filecache" />
        </phingcall>
        <phingcall target="disable-webtools-geocoding-cache" />
        <append
            destFile="${website.settings.local.php}"
            text="${line.separator}$settings['cache']['bins']['geocoder'] = 'cache.backend.file_system';${line.separator}" />
        <append
            destFile="${website.settings.local.php}"
            text="$settings['filecache']['directory']['bins']['geocoder'] = '${behat.webtools_geocoding.cache.path}';${line.separator}" />
        <append
            destFile="${website.settings.local.php}"
            text="$settings['filecache']['strategy']['bins']['geocoder'] = 'persist';${line.separator}" />
    </target>

    <target
        name="build-dist"
        description="Build a distribution package."
        depends="install-composer-dependencies-dist, compile-sass" />

    <target
        name="build-dev"
        description="Build a development environment."
        depends="install-composer-dependencies, setup-behat, setup-php-codesniffer, setup-phpunit, compile-sass" />

    <target
        name="setup-acceptance"
        description="Set up an acceptance environment."
        depends="setup-virtuoso-permissions, configure-apache-solr-drupal, configure-matomo-drupal, configure-stage-file-proxy, setup-migration, import-legacy-db, download-databases, rebuild-environment, reindex-apache-solr, enable-uat-modules, enable-dev-settings" />

    <target
        name="install-dev"
        description="Install the website and set up the development environment."
        depends="setup-virtuoso-permissions, purge-solr-backend, purge-virtuoso-backend, clean-redis-settings, disable-webtools-geocoding-cache, install, ensure-search-api-solr-site-hash, setup-redis, import-rdf-fixtures, setup-dev, configure-apache-solr-drupal, configure-matomo-drupal, create-demo-users, enable-webtools-geocoding-cache, setup-mocked-newsroom-newsletter-subscriber" />

</project>
