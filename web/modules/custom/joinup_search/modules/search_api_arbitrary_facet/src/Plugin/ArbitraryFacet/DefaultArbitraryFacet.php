<?php

declare(strict_types = 1);

namespace Drupal\search_api_arbitrary_facet\Plugin\ArbitraryFacet;

use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\search_api_arbitrary_facet\Plugin\ArbitraryFacetBase;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Provides supports for facets generated by arbitrary queries.
 *
 * @ArbitraryFacet(
 *   id = "default",
 *   label = @Translation("Default arbitrary query"),
 * )
 */
class DefaultArbitraryFacet extends ArbitraryFacetBase implements ContainerFactoryPluginInterface {

  /**
   * The current user.
   *
   * @var \Drupal\Core\Session\AccountProxyInterface
   */
  protected $currentUser;

  /**
   * Constructs a new DefaultArbitraryFacet.
   *
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin_id for the plugin instance.
   * @param mixed $plugin_definition
   *   The plugin implementation definition.
   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
   *   The current user.
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $current_user) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);

    $this->currentUser = $current_user;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('current_user')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFacetDefinition(): array {
    return [
      'mine' => [
        'field_name' => 'entity_author',
        'field_condition' => $this->currentUser->id(),
        'label' => $this->t("My content"),
      ],
      'featured' => [
        'field_name' => 'site_featured',
        'field_condition' => 'true',
        'label' => $this->t("Featured content"),
      ],
      'collections' => [
        'field_name' => 'entity_bundle',
        'field_condition' => 'collection',
        'label' => $this->t("Communities"),
      ],
    ];
  }

}
