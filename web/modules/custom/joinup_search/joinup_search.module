<?php

/**
 * @file
 * Provides functionality for the Joinup search module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Query\ConditionGroupInterface;
use Drupal\search_api\Query\QueryInterface;
use Solarium\Core\Query\QueryInterface as SolariumQueryInterface;
use Solarium\QueryType\Select\Query\Query;

/**
 * Implements hook_entity_field_access().
 *
 * Grant access to fields of type search only to moderators except from
 * custom_page pages.
 */
function joinup_search_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Limit access to search fields only on edit.
  if ($operation !== 'edit' || $field_definition->getType() !== 'search_api_field') {
    return AccessResult::neutral();
  }

  // Leave open access to the custom page search field.
  if ($field_definition->getTargetEntityTypeId() === 'node' && $field_definition->getName() === 'field_cp_content_listing') {
    return AccessResult::neutral();
  }

  // Forbid access if the user does not have the "administer search fields"
  // permission.
  return AccessResult::forbiddenIf(!$account->hasPermission('administer search fields'))
    ->addCacheContexts(['user.permissions']);
}

/**
 * Implements hook_module_implements_alter().
 */
function joinup_search_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'search_api_query_alter') {
    // The search_api_field_search_api_query_alter is always executed last and
    // is responsible for converting the facets into condition groups. We need
    // to add a sort parameter based on the content bundle on the collection
    // content search api field. Thus, the hook invoked by the collection module
    // should be called last.
    // @see search_api_field_search_api_query_alter
    // @see joinup_search_search_api_query_alter
    $group = $implementations['joinup_search'];
    unset($implementations['joinup_search']);
    $implementations['joinup_search'] = $group;
  }
}

/**
 * Implements hook_search_api_query_alter().
 *
 * Sets a default search ordering for the content displayed in the collections'
 * and solutions' overview page as well as the custom pages.
 */
function joinup_search_search_api_query_alter(QueryInterface &$query) {
  if ($query->getSearchId() === 'rdf_entity.field_collection_content') {
    // In case the user has filtered by event, first sort by the event date.
    // @todo: This will be generic when event calendar will be implemented for
    // the rdf_entity.field_is_content and the node.field_cp_content_listing
    // instances of the search api field listing.
    if (_joinup_search_search_api_has_condition($query->getConditionGroup(), 'entity_bundle', 'event')) {
      // If the upcoming events are selected, set the order to 'ASC'.
      // @see \Drupal\joinup\Plugin\ArbitraryFacet\EventsArbitraryFacet::getFacetDefinition
      $value = \Drupal::service('facets.utility.date_handler')->isoDate((new DrupalDateTime('today'))->getTimestamp());
      $order = _joinup_search_search_api_has_condition($query->getConditionGroup(), 'field_event_date', $value, '>=') ? QueryInterface::SORT_ASC : QueryInterface::SORT_DESC;
      $query->sort('field_event_date', $order);
    }
  }

  $search_ids = [
    'rdf_entity.field_collection_content',
    'rdf_entity.field_is_content',
    'node.field_cp_content_listing',
  ];

  if (!in_array($query->getSearchId(), $search_ids)) {
    return;
  }
  $query->sort('entity_created', 'DESC');
}

/**
 * Checks if the query has a filter.
 *
 * @param \Drupal\search_api\Query\ConditionGroupInterface|\Drupal\search_api\Query\ConditionInterface $conditions
 *   A condition group or a condition interface.
 * @param string $field
 *   The field name.
 * @param mixed $value
 *   The requested value. Can be an array but will has to be passed identically.
 * @param string $operator
 *   The requested operator. Defaults to '='.
 *
 * @return bool
 *   True if the condition group has the required condition or false otherwise.
 */
function _joinup_search_search_api_has_condition($conditions, $field, $value, $operator = '=') {
  foreach ($conditions->getConditions() as $c) {
    if ($c instanceof ConditionGroupInterface) {
      if (_joinup_search_search_api_has_condition($c, $field, $value, $operator)) {
        return TRUE;
      }
    }
    elseif ($c->getField() === $field && $c->getValue() === $value && $c->getOperator() === $operator) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_search_api_solr_documents_alter().
 *
 * By default, solr server configuration has a property named sortMissingLast
 * set to true for all fields defined. This means that two different entity
 * types, one with a property set to false and one without the property, will
 * result in having the one without the property placed last.
 *
 * Set the "sticky" and "site_pinned" properties to all documents that are
 * missing them. The properties are prefixed with "bs_" because "b" stands for
 * boolean and "s" for single value, as they are used for sorting.
 */
function joinup_search_search_api_solr_documents_alter(&$documents, IndexInterface $index, array $items) {
  /** @var \Solarium\QueryType\Update\Query\Document\Document[] $documents */
  foreach ($documents as $document) {
    if (empty($document->getFields()['bs_sticky'])) {
      $document->setField('bs_sticky', FALSE);
    }
    if (!isset($document->getFields()['bs_site_pinned'])) {
      $document->setField('bs_site_pinned', FALSE);
    }
  }
}

/**
 * Implements hook_search_api_solr_field_mapping_alter().
 *
 * Single value fields need to be used for sorting.
 */
function joinup_search_search_api_solr_field_mapping_alter(IndexInterface $index, array &$fields) {
  $mappings = [
    'entity_created' => 'ds_entity_created',
    'site_pinned' => 'bs_site_pinned',
  ];

  foreach ($mappings as $alias => $solr_field) {
    if (isset($fields[$alias])) {
      $fields[$alias] = $solr_field;
    }
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function joinup_search_search_api_solr_query_alter(SolariumQueryInterface $solarium_query, QueryInterface $query): void {
  if (!$solarium_query instanceof Query) {
    return;
  }

  // Keep the edismax parser to allow document boosting to work properly.
  // @todo remove when document boosting is reimplemented by search_api_solr
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-4907
  $solarium_query->addParam('defType', 'edismax');

  /** @var \Drupal\search_api_field\Plugin\Field\FieldType\SearchItem $item */
  if (!$item = $query->getOption('search_api_field item')) {
    return;
  }

  $value = $item->value;
  if (empty($value['query_builder']['filters'])) {
    return;
  }

  // Extract all the plugins used.
  $plugin_ids = array_column($value['query_builder']['filters'], 'plugin');
  // If any plugin other than the direct entity reference ones are used,
  // bail out.
  $other_plugins = array_filter($plugin_ids, function ($plugin_id) {
    return strpos($plugin_id, 'bundle_autocomplete:') !== 0;
  });
  if (!empty($other_plugins)) {
    return;
  }

  // Get the real names used to index on Solr.
  /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $solr_backend */
  $solr_backend = $query->getIndex()->getServerInstance()->getBackend();
  $solr_fields = $solr_backend->getSolrFieldNames($query->getIndex());

  // Build a sorting function that attributes a weight following the order of
  // the elements in the UI.
  $plugins = array_reverse($value['query_builder']['filters'], TRUE);
  $sort = '';
  foreach ($plugins as $delta => $plugin_config) {
    $field = $plugin_config['field'];
    if (!isset($solr_fields[$field]) || empty($plugin_config['target_id'])) {
      continue;
    }

    if (empty($sort)) {
      $sort = $delta;
      continue;
    }

    $sort = sprintf(
      'if(termfreq(%s,%s),%s,%s)',
      $solr_fields[$field],
      $solarium_query->getHelper()->escapePhrase($plugin_config['target_id']),
      $delta,
      $sort
    );
  }

  $sorts = $solarium_query->getSorts();
  $solarium_query->setSorts([$sort => 'asc'] + $sorts);
}
