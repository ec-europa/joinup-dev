<?php

/**
 * @file
 * Main functions and hook implementations of the custom page module.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\custom_page\Entity\CustomPage;
use Drupal\custom_page\Entity\CustomPageInterface;
use Drupal\joinup_group\JoinupGroupHelper;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\node\NodeInterface;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelperInterface;
use Drupal\search_api\Plugin\search_api\datasource\ContentEntity;
use Drupal\search_api\Query\QueryInterface;

/**
 * Implements hook_entity_type_alter().
 */
function custom_page_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface[] $entity_types */
  // Add a link template allow adding custom pages.
  $entity_types['rdf_entity']->setLinkTemplate('add-custom-page', '/rdf_entity/{rdf_entity}/{node_type}/add');

  // Replaces the standard OG Menu Instance form with a customized one that is
  // suitable for use in the front end.
  $entity_types['ogmenu_instance']->setFormClass('edit', 'Drupal\custom_page\Form\OgMenuInstanceForm');
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function custom_page_entity_bundle_info_alter(array &$bundles) {
  if (!empty($bundles['node']['custom_page'])) {
    $bundles['node']['custom_page']['class'] = CustomPage::class;
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function custom_page_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'node' && $bundle == 'custom_page') {
    if (!empty($fields['title'])) {
      $fields['title']->addConstraint('UniqueFieldInBundle', ['bundles' => ['custom_page']]);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * - Creates a menu link whenever a new custom page is created.
 * - Reindexes the parent collection/solution so that they are searchable using
 *   the content of the new custom page.
 */
function custom_page_node_insert(EntityInterface $entity) {
  if ($entity->bundle() === 'custom_page') {
    \Drupal::service('custom_page.og_menu_links_manager')->addLink($entity);
  }

  // The content of custom pages is included in the search index of their
  // collections and solutions, so that the parent group can be found when
  // searching for keywords contained in their custom pages. Make sure to
  // reindex the parent group so that the new custom page is included.
  // @see \Drupal\custom_page\Plugin\search_api\processor\IncludeCustomPageContent
  $parent = $entity->og_audience->entity;
  if (!empty($parent)) {
    ContentEntity::indexEntity($entity->og_audience->entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * - Updates links to this custom page if the title has changed or if the page
 *   becomes (un)published.
 * - When a custom page moves to a new group, move the link to the menu of the
 *   new group.
 * - Reindexes the parent collection/solution so that they are searchable using
 *   the content of the new custom page.
 */
function custom_page_node_update(NodeInterface $entity) {
  if ($entity->bundle() !== 'custom_page') {
    return;
  }

  /** @var \Drupal\node\NodeInterface $original */
  $original = $entity->original;

  // Update all links that point to this custom page if the title has changed,
  // or if the entity becomes (un)published.
  if ($entity->isPublished() !== $original->isPublished() || $entity->getTitle() !== $original->getTitle()) {
    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $result = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $entity->id()]);

    if (!empty($result)) {
      foreach ($result as $instance) {
        $menu_link_manager->updateDefinition($instance->getPluginId(), ['title' => $entity->getTitle()], TRUE);
      }
    }
  }

  // Update the OG menu link only if the group has changed.
  if ($entity->og_audience->target_id !== $original->og_audience->target_id) {
    \Drupal::service('custom_page.og_menu_links_manager')
      ->moveLinks($original, $entity->og_audience->target_id);
  }

  // The content of custom pages is included in the search index of their
  // collections and solutions, so that the parent group can be found when
  // searching for keywords contained in their custom pages. Make sure to
  // reindex the parent group so that the changed content is included.
  // @see \Drupal\custom_page\Plugin\search_api\processor\IncludeCustomPageContent
  $parent = $entity->og_audience->entity;
  if (!empty($parent)) {
    ContentEntity::indexEntity($entity->og_audience->entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * - Reindexes the parent collection/solution so that the content of the deleted
 *   custom page no longer shows up in the search results for the parent group.
 */
function custom_page_node_delete(NodeInterface $entity) {
  if ($entity->bundle() !== 'custom_page') {
    return;
  }

  // The content of custom pages is included in the search index of their
  // collections and solutions, so that the parent group can be found when
  // searching for keywords contained in their custom pages. Make sure to
  // reindex the parent group so that the deleted content is no longer included.
  // @see \Drupal\custom_page\Plugin\search_api\processor\IncludeCustomPageContent
  $parent = $entity->og_audience->entity;
  if (!empty($parent)) {
    ContentEntity::indexEntity($entity->og_audience->entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Whenever a custom page that is linked in the navigation menu of a collection
 * or solution becomes enabled or disabled we need to reindex the group, since
 * the content of the custom menu should now be included or excluded.
 */
function custom_page_menu_link_content_update(MenuLinkContentInterface $menu_link) {
  // Do a quick check to see if the menu link entity's ableness has changed.
  if ($menu_link->isEnabled() === $menu_link->original->isEnabled()) {
    return;
  }

  $route_parameters = $menu_link->getUrlObject()->getRouteParameters();
  if (isset($route_parameters['node'])) {
    $custom_page = \Drupal::entityTypeManager()->getStorage('node')->load($route_parameters['node']);
    if ($custom_page instanceof CustomPageInterface) {
      ContentEntity::indexEntity($custom_page->get('og_audience')->entity);
    }
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function custom_page_menu_local_actions_alter(&$local_actions) {
  // Remove the 'Add link' local action from the custom page navigation menu
  // edit form. In default Drupal this is intended for webmasters, but we expose
  // this form to end users which do not interact directly with menu links.
  // Instead of this our users have an 'Add page' local action which leads to a
  // node add form. The menu link itself is created behind the scenes.
  foreach ($local_actions as &$local_action) {
    if ($local_action['route_name'] === 'entity.ogmenu_instance.add_link') {
      if (($key = array_search('entity.ogmenu_instance.edit_form', $local_action['appears_on'])) !== FALSE) {
        unset($local_action['appears_on'][$key]);
      }
      break;
    }
  }
}

/**
 * Implements hook_search_api_query_TAG_alter().
 *
 * Alters the Search API query in custom pages for the content listing field.
 */
function custom_page_search_api_query_search_api_field_field_cp_content_listing_alter(QueryInterface &$query) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $query->getOption('search_api_field entity');
  /** @var \Drupal\Core\Entity\EntityInterface $group */
  $group = $entity->get(OgGroupAudienceHelperInterface::DEFAULT_FIELD)->first()->entity;
  if (!$group) {
    return;
  }

  $field_value = $query->getOption('search_api_field item')->value;
  /** @var \Drupal\search_api\Query\Query $query */
  if ($field_value['global_search']) {
    $query->addCondition('entity_groups', NULL, '<>');
  }
  elseif (!empty($field_value['show_shared'])) {
    $or = $query
      ->createConditionGroup('or')
      ->addCondition('shared_in', [$group->id()], 'IN')
      ->addCondition('entity_groups', [$group->id()], 'IN');
    $query->addConditionGroup($or);
  }
  else {
    // Show only content belonging to the same group.
    $query->addCondition('entity_groups', [$group->id()], 'IN');
  }

  // Remove the page itself from the results.
  $query->addCondition($entity->getEntityType()->getKey('id'), $entity->id(), '<>');
}

/**
 * Implements hook_node_access().
 *
 * Prevent custom page view access to unprivileged users when the parent entity
 * is not published.
 */
function custom_page_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($op !== 'view' || $node->bundle() !== 'custom_page') {
    return AccessResult::neutral();
  }

  $parent = JoinupGroupHelper::getGroup($node);
  // Let parentless nodes (e.g. newsletters) be handled by the core access.
  if (empty($parent)) {
    return AccessResult::neutral();
  }
  if (!$parent->access('view', $account)) {
    // Anonymous users do not have access to content of non published groups.
    return AccessResult::forbiddenIf($account->isAnonymous() || $node->getOwnerId() !== $account->id());
  }
  $membership = Og::getMembership($parent, $account);
  if (empty($membership)) {
    return AccessResult::neutral();
  }
  if (!$node->isPublished() && $membership->hasPermission("view any unpublished content")) {
    return AccessResult::allowed();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_field_access().
 */
function custom_page_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, ?FieldItemListInterface $items = NULL) {
  return AccessResult::allowedIf(
    $operation === 'edit'
    && $field_definition->getName() === 'status'
    && $field_definition->getTargetEntityTypeId() === 'node'
    && $field_definition->getTargetBundle() === 'custom_page');
}
