<?php

/**
 * @file
 * Main functions and hook implementations of the Collection module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\og\Entity\OgMembership;
use Drupal\og\Entity\OgRole;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelperInterface;
use Drupal\og\OgRoleInterface;
use Drupal\og_menu\Entity\OgMenuInstance;
use Drupal\rdf_entity\Entity\RdfEntityType;
use Drupal\search_api\Query\QueryInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function collection_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the 'negation' option for collection block visibility. There are no
  // good use cases to show a block on all pages, except on collection pages.
  $form['visibility']['collection']['negate']['#access'] = FALSE;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function collection_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Make sure the collection label is unique.
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'collection' && !empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueFieldInBundle', ['bundles' => ['collection']]);
  }
}

/**
 * Implements hook_entity_insert().
 */
function collection_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'collection') {
    return;
  }
  collection_entity_update($entity);

  // Create a new navigation menu and associate it with the new collection. This
  // menu can be used to link to custom pages for the collection.
  if (Og::isGroup($entity->getEntityTypeId(), $entity->bundle()) && $entity->bundle() === 'collection') {
    $values = [
      'type' => 'navigation',
      OgGroupAudienceHelperInterface::DEFAULT_FIELD => $entity->id(),
    ];
    $og_menu_instance = OgMenuInstance::create($values);
    $og_menu_instance->save();
  }

  // When a new collection is proposed, give the user the 'group owner' role.
  // This will not occur if the user is the anonymous, i.e. the entity was
  // created by some batch process or some importing.
  if (Og::isGroup($entity->getEntityTypeId(), $entity->bundle()) && !\Drupal::currentUser()->isAnonymous()) {
    // The group owner inherits all roles of a collection member, facilitator
    // and administrator.
    $roles = [
      'rdf_entity-collection-' . OgRoleInterface::AUTHENTICATED,
      'rdf_entity-collection-' . OgRoleInterface::ADMINISTRATOR,
      'rdf_entity-collection-facilitator',
    ];

    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = OgMembership::create();
    $membership
      ->setUser(\Drupal::currentUser())
      ->setGroup($entity)
      ->setRoles(array_values(OgRole::loadMultiple($roles)))
      ->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Interrupts the permissions for updating a collection. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function collection_rdf_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() != 'collection' || $account->isAnonymous() || $account->hasPermission($entity->getEntityType()->getAdminPermission())) {
    return AccessResult::neutral();
  }

  switch ($operation) {
    case 'view':
      $membership = Og::getMembership($entity, $account);
      if (empty($membership)) {
        return AccessResult::neutral();
      }
      if (!$entity->isPublished() && $membership->hasPermission('view unpublished rdf entity')) {
        return AccessResult::allowed();
      }
      if ($entity->isPublished() && $membership->hasPermission('view rdf entity')) {
        return AccessResult::allowed();
      }
      break;

    case 'edit':
      $allowed_transitions = $entity->field_ar_state->first()->getTransitions();
      return AccessResult::forbiddenIf(empty($allowed_transitions));

    default:
      break;

  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Default graph is published. Draft graph is draft.
 */
function collection_rdf_entity_presave(EntityInterface $entity) {
  $enabled_bundles = \Drupal::config('rdf_draft.settings')->get('revision_bundle_rdf_entity');
  if (empty($enabled_bundles) || $entity->bundle() != 'collection' || !in_array($entity->bundle(), $enabled_bundles)) {
    return;
  }

  $state = $entity->field_ar_state->value;
  if (in_array($state, ['draft', 'proposed'])) {
    \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId())->getGraphHandler()->setTargetGraphToEntity($entity, 'draft');
  }
  elseif (in_array($state, [
    'validated',
    'archival_request',
    'deletion_request',
    'archived',
  ])) {
    \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId())->getGraphHandler()->setTargetGraphToEntity($entity, 'default');
  }
  elseif (empty($state)) {
    throw new \Exception("State field not found while trying to get the appropriate graph.");
  }
  else {
    throw new \Exception("State field value is invalid. Current value found: " . $state);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Performs the following actions:
 * - Invalidates group content cache tags for the entity that is being changed.
 * - When the entity is saved into the default graph, the draft must be deleted.
 */
function collection_entity_update(EntityInterface $entity) {
  $enabled_bundles = \Drupal::config('rdf_draft.settings')->get('revision_bundle_rdf_entity');
  if (empty($enabled_bundles) || $entity->bundle() != 'collection' || !in_array($entity->bundle(), $enabled_bundles)) {
    return;
  }

  if ($entity->field_ar_state->value === 'validated') {
    \Drupal::entityTypeManager()->getStorage('rdf_entity')->deleteFromGraph($entity->id(), 'draft');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function collection_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_insert') {
    // Make sure collection_entity_insert() runs after og_entity_insert(). The
    // latter creates an OgMembership entry for the collection owner when a new
    // collection is proposed, and collection_entity_insert() needs to modify
    // this membership to add the required OG roles to it.
    $group = $implementations['collection'];
    unset($implementations['collection']);
    $implementations['collection'] = $group;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function collection_entity_extra_field_info() {
  $fields = [];
  $collection = RdfEntityType::load('collection');
  // Add the join/leave collection form as field.
  // @todo will be removed in ISAICP-2743
  $fields['rdf_entity'][$collection->id()]['display']['join_collection'] = [
    'label' => t('Join collection'),
    'description' => t('Shows the join/leave collection form'),
    'visible' => FALSE,
  ];

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Populates the extra field 'join_collection'.
 */
function collection_rdf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() != 'collection') {
    return;
  }

  if ($display->getComponent('join_collection')) {
    $build['join_collection'] = [
      '#lazy_builder' => [
        'collection.lazy_builders:renderJoinCollectionForm',
        [$entity->id()],
      ],
      '#create_placeholder' => TRUE,
      // This form varies by the role a user has inside the collection. Set the
      // applicable cache context.
      '#cache' => ['contexts' => ['og_role']],
    ];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function collection_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_name = $context['items']->getFieldDefinition()->getName();
  if ($field_name == 'field_ar_closed') {
    $element['#attached']['library'][] = 'collection/collection_form';
  }
}

/**
 * Implements hook_search_api_query_TAG_alter().
 *
 * Alters the Search API queries for the collection content on the collection
 * homepage:
 * - Only show content related to the collection.
 * - Do not show the collection itself in the search results.
 */
function collection_search_api_query_search_api_field_field_collection_content_alter(QueryInterface &$query) {
  /** @var EntityInterface $entity */
  $entity = $query->getOption('search_api_field entity');

  // Show only content that is related to this collection through the aggregated
  // field. This makes sure that other related entities (such as the collection
  // owner) do not show up as collection content tiles.
  $query->addCondition('aggregated_field_1', [$entity->id()], 'IN');

  // Remove the collection itself from the results.
  $query->addCondition($entity->getEntityType()->getKey('id'), $entity->id(), '<>');
}
