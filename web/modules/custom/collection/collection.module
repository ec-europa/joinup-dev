<?php

/**
 * @file
 * Main functions and hook implementations of the Collection module.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\collection\Entity\Collection;
use Drupal\collection\Entity\GlossaryTerm;
use Drupal\collection\Plugin\Field\FieldType\LastUpdatedFieldItemList;
use Drupal\node\NodeInterface;
use Drupal\og\Entity\OgRole;
use Drupal\og\Og;
use Drupal\og\OgMembershipInterface;
use Drupal\og\OgRoleInterface;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\rdf_entity\Entity\RdfEntityType;
use Drupal\rdf_entity\RdfInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\sparql_entity_storage\SparqlGraphInterface;

/**
 * Implements hook_theme().
 */
function collection_theme($existing, $type, $theme, $path) {
  return [
    'collection_member_count' => [
      'variables' => [
        'count' => 0,
        'view_mode' => '',
      ],
    ],

    // A button that (when clicked) opens a dropdown that (when clicked) opens a
    // modal with a confirmation button that (when clicked) allows the user to
    // leave the collection. One does not simply leave a collection.
    'collection_leave_button' => [
      'variables' => [
        'confirm' => '',
      ],
    ],

    // The collection glossary navigation.
    'glossary_navigator' => [
      'variables' => [
        'url' => NULL,
        'letters' => [],
        'current' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Allows the collection member count to be themed differently per view mode.
 */
function collection_theme_suggestions_collection_member_count(array $variables): array {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['view_mode'], '.', '_');
  $suggestions[] = 'collection_member_count__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function collection_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the 'negation' option for collection block visibility. There are no
  // good use cases to show a block on all pages, except on collection pages.
  $form['visibility']['collection']['negate']['#access'] = FALSE;
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function collection_entity_bundle_info_alter(&$bundles) {
  if (!empty($bundles['rdf_entity']['collection'])) {
    $bundles['rdf_entity']['collection']['class'] = Collection::class;
  }
  if (!empty($bundles['node']['glossary'])) {
    $bundles['node']['glossary']['class'] = GlossaryTerm::class;
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function collection_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Make sure the collection label is unique.
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'collection' && !empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueFieldInBundle', ['bundles' => ['collection']]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function collection_rdf_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'collection') {
    return;
  }
  collection_rdf_entity_update($entity);

  // When a new collection is proposed, give the user the 'group owner' role.
  // This will not occur if the user is the anonymous, i.e. the entity was
  // created by some batch process or some importing.
  if (!empty($entity->getOwner()) && !$entity->getOwner()->isAnonymous()) {
    // The group owner inherits all roles of a collection member, facilitator
    // and administrator.
    $roles = [
      'rdf_entity-collection-' . OgRoleInterface::AUTHENTICATED,
      'rdf_entity-collection-' . OgRoleInterface::ADMINISTRATOR,
      'rdf_entity-collection-facilitator',
    ];

    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = Og::createMembership($entity, $entity->getOwner());
    $membership->setRoles(array_values(OgRole::loadMultiple($roles)));
    $membership->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Interrupts the permissions for updating a collection. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function collection_rdf_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() != 'collection' || $account->isAnonymous() || $account->hasPermission($entity->getEntityType()->getAdminPermission())) {
    return AccessResult::neutral();
  }

  switch ($operation) {
    case 'view':
      $membership = Og::getMembership($entity, $account);
      if (empty($membership)) {
        return AccessResult::neutral();
      }
      if (!$entity->isPublished() && $membership->hasPermission('view unpublished rdf entity')) {
        return AccessResult::allowed();
      }
      if ($entity->isPublished() && $membership->hasPermission('view rdf entity')) {
        return AccessResult::allowed();
      }
      break;

    case 'edit':
      /** @var \Drupal\joinup_workflow\WorkflowHelperInterface $workflow_helper */
      $workflow_helper = \Drupal::service('joinup_workflow.workflow_helper');
      $allowed_transitions = $workflow_helper->getAvailableTransitions($entity, $account);
      return empty($allowed_transitions) ? AccessResult::forbidden() : AccessResult::allowed();

    default:
      break;

  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Default graph is published. Draft graph is draft.
 */
function collection_rdf_entity_presave(RdfInterface $entity) {
  if ($entity->bundle() !== 'collection') {
    return;
  }

  // Provide default values for date/time fields if were missed.
  foreach (['created', 'changed'] as $field_name) {
    if ($entity->get($field_name)->isEmpty()) {
      if (!isset($request_time)) {
        $request_time = gmdate('Y-m-d\TH:i:s', \Drupal::time()->getRequestTime());
      }
      $entity->set($field_name, $request_time);
    }
  }

  if (!\Drupal::service('sparql.graph_handler')->bundleHasGraph('rdf_entity', 'collection', 'draft')) {
    return;
  }

  $state = $entity->field_ar_state->value;
  if (in_array($state, ['draft', 'proposed'])) {
    $entity->set('graph', 'draft');
  }
  elseif (in_array($state, [
    'validated',
    'archival_request',
    'archived',
  ])) {
    $entity->set('graph', SparqlGraphInterface::DEFAULT);
  }
  elseif (empty($state)) {
    throw new \Exception("State field not found while trying to get the appropriate graph.");
  }
  else {
    throw new \Exception("State field value is invalid. Current value found: " . $state);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Performs the following actions:
 * - When the entity is saved into the default graph, the draft must be deleted.
 */
function collection_rdf_entity_update(EntityInterface $entity) {
  if ($entity->bundle() !== 'collection' || !\Drupal::service('sparql.graph_handler')->bundleHasGraph('rdf_entity', 'collection', 'draft')) {
    return;
  }

  if ($entity->field_ar_state->value === 'validated') {
    \Drupal::entityTypeManager()->getStorage('rdf_entity')->deleteFromGraph([$entity], 'draft');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function collection_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'rdf_entity_insert') {
    // Make sure collection_entity_insert() runs after og_entity_insert(). The
    // latter creates an OgMembership entry for the collection owner when a new
    // collection is proposed, and collection_entity_insert() needs to modify
    // this membership to add the required OG roles to it.
    $group = $implementations['collection'];
    unset($implementations['collection']);
    $implementations['collection'] = $group;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function collection_entity_extra_field_info() {
  $fields = [];
  $collection = RdfEntityType::load('collection');

  // This hook can fire before the collection bundle config is defined, in that
  // case we have nothing meaningful to add.
  if (empty($collection)) {
    return [];
  }

  // Add the join/leave collection form as field.
  // @todo will be removed in ISAICP-2743
  $display = &$fields['rdf_entity'][$collection->id()]['display'];
  $display['join_collection'] = [
    'label' => t('Join collection'),
    'description' => t('Shows the join/leave collection form'),
    'visible' => FALSE,
  ];

  $display['members'] = [
    'label' => t('Amount of members'),
    'description' => t('Amount of members of the collection'),
    'visible' => FALSE,
  ];

  $display['solutions'] = [
    'label' => t('Amount of solutions'),
    'description' => t('Amount of solutions of the collection'),
    'visible' => FALSE,
  ];

  $display['read_more'] = [
    'label' => t('Read more'),
    'description' => t('Shows a link to the about page of the collection'),
    'visible' => FALSE,
  ];

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Shows extra fields for the collection bundle.
 */
function collection_rdf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  if ($entity->bundle() !== 'collection') {
    return;
  }

  if ($display->getComponent('join_collection')) {
    $build['join_collection'] = [
      '#lazy_builder' => [
        'collection.lazy_builders:renderJoinCollectionForm',
        [$entity->id()],
      ],
      '#create_placeholder' => TRUE,
      // This form varies by the role a user has inside the collection. Set the
      // applicable cache context.
      '#cache' => ['contexts' => ['og_role']],
    ];
  }

  // Member count.
  if ($display->getComponent('members')) {
    $member_count = collection_member_count($entity);
    // Invalidate the member count every time the group membership list changes.
    // @see \Drupal\og\Plugin\Block\MemberCountBlock::getCacheTags()
    $tags = Cache::buildTags(OgMembershipInterface::GROUP_MEMBERSHIP_LIST_CACHE_TAG_PREFIX, $entity->getCacheTagsToInvalidate());
    $build['members'] = [
      '#theme' => 'collection_member_count',
      '#count' => $member_count,
      '#view_mode' => $view_mode,
      '#cache' => ['tags' => $tags],
    ];
  }

  // Solution count.
  // @todo Collections are not depending on solutions so they are not supposed
  //   to handle functionality related to solutions. This should be moved to the
  //   solution module.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-5985
  if ($display->getComponent('solutions')) {
    $solution_count = collection_solution_count($entity);
    $tags = Cache::buildTags('og-group-content', $entity->getCacheTagsToInvalidate());
    $tags = Cache::mergeTags($tags, ['rdf_entity_list']);
    $build['solutions'] = [
      '#markup' => \Drupal::translation()->formatPlural($solution_count, '@solution_count Solution', '@solution_count Solutions', ['@solution_count' => $solution_count]),
      '#cache' => [
        // Invalidate when community content is saved.
        'tags' => $tags,
      ],
    ];
  }

  // Read more link to the about page.
  if ($display->getComponent('read_more')) {
    $build['read_more'] = $entity->toLink(t('Read more'), 'about-page', [
      'attributes' => [
        'class' => ['about-page', 'read-more', 'fieldset__read-more'],
      ],
    ])->toRenderable();
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function collection_rdf_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  if ($entity->bundle() !== 'collection' || $display->getMode() !== 'default') {
    return;
  }

  // Hide the description when the abstract is available.
  if (Element::children($build['field_ar_abstract'])) {
    $build['field_ar_description']['#access'] = FALSE;
  }
}

/**
 * Amount of members of a collection.
 *
 * @param \Drupal\rdf_entity\RdfInterface $entity
 *   The collection.
 *
 * @return int
 *   Amount of members.
 */
function collection_member_count(RdfInterface $entity) {
  // We're doing a direct database query rather than using methods in OG's
  // MembershipManager service since we just need a count, and we need to filter
  // out blocked user accounts.
  $query = \Drupal::database()->select('og_membership', 'om');
  $query->innerJoin('users_field_data', 'ufd', 'om.uid = ufd.uid');
  $query->condition('ufd.status', 1)
    ->condition('entity_type', 'rdf_entity')
    ->condition('entity_id', $entity->id())
    ->condition('state', OgMembershipInterface::STATE_ACTIVE);
  return $query->countQuery()->execute()->fetchField();
}

/**
 * Amount of validated solutions in the collection.
 *
 * @param \Drupal\rdf_entity\RdfInterface $entity
 *   The collection.
 *
 * @return int
 *   Amount of validated solutions.
 */
function collection_solution_count(RdfInterface $entity) {
  $solutions = $entity->get('field_ar_affiliates');
  $solution_ids = [];
  foreach ($solutions as $solution) {
    $solution_ids[] = $solution->getValue()['target_id'];
  }
  if (!$solution_ids) {
    return 0;
  }
  return \Drupal::entityQuery('rdf_entity')
    ->graphs(['default'])
    ->condition('rid', 'solution')
    ->condition('id', $solution_ids, 'IN')
    ->count()
    ->execute();
}

/**
 * Implements hook_search_api_query_TAG_alter().
 *
 * Alters the Search API queries for the collection content on the collection
 * homepage:
 * - Only show content related to the collection.
 * - Do not show the collection itself in the search results.
 * - Exclude custom pages.
 */
function collection_search_api_query_search_api_field_field_collection_content_alter(QueryInterface &$query) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $query->getOption('search_api_field entity');
  $or = $query->createConditionGroup('OR');
  // Show content that is related to this collection through the aggregated
  // field. This makes sure that other related entities (such as the collection
  // owner) do not show up as collection content tiles.
  $or->addCondition('entity_groups', [$entity->id()], 'IN');
  // Or show content that has been shared on this collection.
  $or->addCondition('shared_in', [$entity->id()], 'IN');
  $query->addConditionGroup($or);

  // Remove the collection itself from the results.
  $query->addCondition($entity->getEntityType()->getKey('id'), $entity->id(), '<>');

  // Exclude custom pages from the collection overview.
  $query->addCondition('entity_bundle', 'custom_page', '<>');
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function collection_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  if ($entity_type->id() === 'rdf_entity' && $bundle === 'collection') {
    return [
      'last_update' => BaseFieldDefinition::create('timestamp')
        ->setLabel(t('Last updated'))
        ->setDescription(t('The last updated time considering also compounding entities.'))
        ->setComputed(TRUE)
        ->setClass(LastUpdatedFieldItemList::class)
        ->setDisplayConfigurable('view', TRUE)
        ->setCardinality(1),
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function collection_node_delete(NodeInterface $node) {
  if (!$node->hasField('og_audience') || !$node->isPublished()) {
    return;
  }

  /** @var \Drupal\rdf_entity\RdfInterface $group */
  if (!$node->get('og_audience')->isEmpty() && ($group = Rdf::load($node->get('og_audience')->target_id)) && $group->bundle() === 'collection') {
    // Touch the parent collection in order to update its changed timestamp.
    $group->skip_notification = TRUE;
    $group->setChangedTime(\Drupal::time()->getRequestTime())->save();
  }
}
