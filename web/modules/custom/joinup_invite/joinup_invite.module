<?php

/**
 * @file
 * Hook implementations for the Joinup Invite module.
 */

declare(strict_types = 1);

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\joinup_invite\Entity\InvitationInterface;
use Drupal\og\Entity\OgRole;
use Drupal\og\OgMembershipInterface;

/**
 * Implements hook_user_cancel().
 *
 * A user account cancellation removes all its invitations.
 */
function joinup_invite_user_cancel($edit, $account, $method) {
  $storage = \Drupal::entityTypeManager()->getStorage('invitation');
  /** @var \Drupal\user\UserInterface $account */
  if ($ids = $storage->getQuery()->condition('uid', $account->id())->execute()) {
    $storage->delete($storage->loadMultiple($ids));
  }
}

/**
 * Implements hook_entity_delete().
 *
 * A content entity deletion should cleanup the related invitations.
 */
function joinup_invite_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    $storage = \Drupal::entityTypeManager()->getStorage('invitation');
    $ids = $storage->getQuery()
      ->condition('entity_type', $entity->getEntityTypeId())
      ->condition('entity_id', $entity->id())
      ->execute();
    if ($ids) {
      $storage->delete($storage->loadMultiple($ids));
    }
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Set the og_role cache contexts to the local tasks block.
 */
function joinup_invite_block_view_alter(array &$build, BlockPluginInterface $block) {
  if (isset($build['#id']) && ($build['#id'] === 'primaryadminactions')) {
    // The primaryadminactions contains the 'Add facilitator' link which is
    // accessible only to facilitators. The members page though is accessible
    // by members as well. If a normal member visits the page first, the block
    // is build without the og_role context and the form does not vary per group
    // role.
    // Make sure that the primaryadminactions block varies per og role.
    $cache_contexts = $build['#cache']['contexts'] ?? [];
    $build['#cache']['contexts'] = Cache::mergeContexts($cache_contexts, ['og_role']);
  }
}

/**
 * Applies a role from an invitation if a user was invited but joined manually.
 */
function joinup_invite_og_membership_presave(OgMembershipInterface $og_membership) {
  $user_id = $og_membership->getOwnerId();
  $entity = $og_membership->getGroup();
  $invitations = \Drupal::entityTypeManager()->getStorage('invitation')->loadByProperties([
    'entity_type' => $entity->getEntityTypeId(),
    'entity_id' => $entity->id(),
    'recipient_id' => $user_id,
    'status' => InvitationInterface::STATUS_PENDING,
  ]);

  if (empty($invitations)) {
    return;
  }

  // There cannot be more than one pending invitation for a user in a group.
  /** @var \Drupal\joinup_invite\Entity\InvitationInterface $invitation */
  $invitation = reset($invitations);
  $role_id = $invitation->getExtraData()['role_id'] ?? NULL;
  if ($role_id && ($role = OgRole::load($role_id))) {
    $og_membership->addRole($role);
    $og_membership->setState(OgMembershipInterface::STATE_ACTIVE);
  }
  $invitation->setStatus(InvitationInterface::STATUS_ACCEPTED);
  $invitation->save();
}
