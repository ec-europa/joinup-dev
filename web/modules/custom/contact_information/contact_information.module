<?php

/**
 * @file
 * Provides functionality for the contact information module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function contact_information_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'contact_information' && !empty($fields['field_ci_email'])) {
    $fields['field_ci_email']->addConstraint('JoinupEmail');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function contact_information_rdf_entity_presave(EntityInterface $entity) {
  // Handle only contact information entities.
  if ($entity->bundle() != 'contact_information') {
    return;
  }

  contact_information_entity_auto_label($entity);

  // The initial state of a contact information entity is validated. The contact
  // is created as part of proposing a collection, and in the collection propose
  // form the workflow state is hidden from the user, so it would remain in the
  // "__new__" state after submission.
  // We can safely set the initial state to "validated" because a newly created
  // contact information entities don't need to be validated by a third party.
  if ($entity->field_ci_state->value === '__new__') {
    $entity->set('field_ci_state', 'validated');
  }
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 *
 * Alters the name of the header of the entity column in the inline entity form
 * table in the create form. Header label was 'title' before.
 */
function contact_information_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Replace the label in the contact information table.
  if (
    $context['entity_type'] == 'rdf_entity' &&
    $context['allowed_bundles'] === ['contact_information'] &&
    isset($fields['label'])
  ) {
    $fields['label']['label'] = t('Name');
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Adds an entity builder callback to fill the label field with the values of
 * the name field. This is needed because inline entity form doesn't save
 * the entity until the parent entity is saved. Due to this, the label column
 * in the widget table would be empty.
 */
function contact_information_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // Add an entity builder callback to fill the label field with the values of
  // the name field. This is needed because inline entity form doesn't save
  // the entity until the parent entity is saved. Due to this, the label column
  // in the widget table would be empty.
  $entity_form['#entity_builders'][] = 'contact_information_inline_entity_form_entity_builder';
}

/**
 * Entity builder callback for the inline entity creation form.
 *
 * @param string $entity_type
 *   The type of the entity being created.
 * @param EntityInterface $entity
 *   The entity being built.
 */
function contact_information_inline_entity_form_entity_builder($entity_type, EntityInterface $entity) {
  // Handle only contact information entities.
  if ($entity->bundle() != 'contact_information') {
    return;
  }
  contact_information_entity_auto_label($entity);
}

/**
 * Generates the entity label from the name field for contact entities.
 *
 * This entity has support for multiple names according to ADMS scheme
 * and entity label does not support this. For this reason,
 * the label actually concatenates all values from field_ci_name field.
 *
 * @param EntityInterface $entity
 *   The entity to process.
 */
function contact_information_entity_auto_label(EntityInterface $entity) {
  // Generate the label using the values of the name field.
  $names = array_column($entity->get('field_ci_name')->getValue(), 'value');
  $entity->set('label', implode(', ', $names));
}
