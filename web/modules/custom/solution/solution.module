<?php

/**
 * @file
 * Contains hooks regarding the solution rdf entity bundle.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityMalformedException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormBuilderInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\og\Entity\OgRole;
use Drupal\og\Og;
use Drupal\og\OgRoleInterface;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\rdf_entity\Entity\RdfEntityType;
use Drupal\rdf_entity\RdfInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\solution\Entity\Solution;
use Drupal\solution\Entity\SolutionInterface;
use Drupal\solution\SolutionAffiliationFieldItemList;
use Drupal\solution\SolutionReleasesAndDistributionsFieldItemList;
use Drupal\sparql_entity_storage\SparqlGraphInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_entity_access().
 */
function solution_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() != 'rdf_entity' || $entity->bundle() != 'solution' || $account->isAnonymous() || $operation != 'view') {
    return AccessResult::neutral();
  }

  $membership = Og::getMembership($entity, $account);
  if (empty($membership)) {
    return AccessResult::neutral();
  }
  if (!$entity->isPublished() && $membership->hasPermission('view unpublished rdf entity')) {
    return AccessResult::allowed();
  }
  if ($entity->isPublished() && $membership->hasPermission('view rdf entity')) {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function solution_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  /** @var \Drupal\Core\Field\FieldConfigInterface[] $fields */
  if ($entity_type->id() !== 'rdf_entity' || $bundle !== 'solution') {
    return;
  }

  // Computed field, that represents the collections a solution is part of.
  $fields['collection'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Collections'))
    ->setName('collection')
    ->setDescription(t('The collections this solution belongs to.'))
    ->setTargetEntityTypeId('rdf_entity')
    ->setTargetBundle('solution')
    ->setSetting('target_type', 'rdf_entity')
    ->setComputed(TRUE)
    ->setClass(SolutionAffiliationFieldItemList::class);
  // References the solution releases and standalone distributions.
  $fields['releases_and_distributions'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Releases and standalone distributions'))
    ->setName('releases_and_distributions')
    ->setDescription(t('The Releases and standalone distributions of this solution.'))
    ->setTargetEntityTypeId('rdf_entity')
    ->setTargetBundle('solution')
    ->setSetting('target_type', 'rdf_entity')
    ->setComputed(TRUE)
    ->setReadOnly(TRUE)
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setClass(SolutionReleasesAndDistributionsFieldItemList::class);

  // Make sure a solution's title is unique among the collections it belongs to.
  if (!empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueSolutionTitle', []);
  }

  // A distribution can be referenced only by a single parent.
  if (!empty($fields['field_is_distribution'])) {
    $fields['field_is_distribution']->addConstraint('DistributionSingleParent');
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function solution_entity_bundle_info_alter(&$bundles) {
  if (!empty($bundles['rdf_entity']['solution'])) {
    $bundles['rdf_entity']['solution']['class'] = Solution::class;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * This function grants the 'owner' and 'facilitator' roles to the user that
 * creates the solution.
 *
 * @see https://www.w3.org/TR/vocab-adms/#the-adms-domain-model
 */
function solution_rdf_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'solution') {
    return;
  }

  // When a new solution is created, give the current user the 'group owner'
  // role, if it is not the anonymous user.
  if (!empty($entity->getOwner()) && !$entity->getOwner()->isAnonymous()) {
    // The group owner inherits all roles of a solution facilitator and
    // administrator.
    $roles = [
      'rdf_entity-solution-' . OgRoleInterface::ADMINISTRATOR,
      'rdf_entity-solution-facilitator',
    ];

    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = Og::createMembership($entity, $entity->getOwner());
    $membership->setRoles(array_values(OgRole::loadMultiple($roles)));
    $membership->save();
  }
  solution_invalidate_collection($entity);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * When editing a solution, show a message to moderators informing them if a
 * solution with the same name already exists in a different collection. They
 * can then evaluate if the conflict is acceptable or not before approving a
 * proposed solution.
 */
function solution_form_rdf_entity_solution_edit_form_alter(array &$form, FormStateInterface $form_state) {
  // Bail out if the user is not a moderator.
  if (!in_array('moderator', \Drupal::currentUser()->getRoles())) {
    return;
  }

  // Bail out if this is an AJAX request to avoid showing duplicate messages,
  // for example in inline forms.
  if (\Drupal::request()->query->has(FormBuilderInterface::AJAX_FORM_REQUEST)) {
    return;
  }

  if (!\Drupal::service('solution.title_duplicate_helper')->titleIsUnique($form_state->getFormObject()->getEntity())) {
    \Drupal::messenger()->addMessage(t('A solution with the same name exists in a different collection.'), 'warning');
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Interrupts the permissions for updating a solution. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function solution_rdf_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($account->hasPermission($entity->getEntityType()->getAdminPermission())) {
    return AccessResult::neutral();
  }
  if ($entity->bundle() != 'solution') {
    return AccessResult::neutral();
  }

  if ($operation == 'edit') {
    /** @var \Drupal\joinup_workflow\WorkflowHelperInterface $workflow_helper */
    $workflow_helper = \Drupal::service('joinup_workflow.workflow_helper');
    $allowed_transitions = $workflow_helper->getAvailableTransitions($entity, $account);
    if (empty($allowed_transitions)) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_extra_field_info().
 */
function solution_entity_extra_field_info(): array {
  $fields = [];

  $solution = RdfEntityType::load('solution');
  if ($solution) {
    $display = &$fields['rdf_entity'][$solution->id()]['display'];
    // Append some additional fields to the solution entity display containing
    // related information.
    // @see solution_rdf_entity_view()
    $display['releases_overview'] = [
      'label' => t('Releases overview'),
      'description' => t('A link to the releases overview page.'),
      'visible' => FALSE,
    ];
    $display['related_solutions'] = [
      'label' => t('Related solutions: explicit + EIRA'),
      'description' => t('Solutions either explicitly or referenced through EIRA.'),
      'visible' => FALSE,
    ];
    $display['download_total'] = [
      'label' => t('Total distribution downloads'),
      'description' => t('The total downloads of all distributions in this collection.'),
      'visible' => FALSE,
    ];
    $display['collections'] = [
      'label' => t('Collections'),
      'description' => t('The collections this solution is affiliated to.'),
      'visible' => FALSE,
    ];
    $display['read_more'] = [
      'label' => t('Read more'),
      'description' => t('Shows a link to the about page of the solution.'),
      'visible' => FALSE,
    ];
    $display['share_link'] = [
      'label' => t('Share'),
      'description' => t('A link to share the content'),
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function solution_rdf_entity_view(array &$build, RdfInterface $solution, EntityViewDisplayInterface $display, string $view_mode): void {
  if ($solution->bundle() != 'solution') {
    return;
  }

  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  if ($display->getComponent('releases_overview')) {
    $show_button =
      // Don't show it on the release overview page.
      \Drupal::routeMatch()->getRouteName() !== 'asset_release.solution_asset_release.overview'
      // Don't show if the solution has no releases or standalone distributions.
      && !$solution->get('releases_and_distributions')->isEmpty();

    if ($show_button) {
      $build['releases_overview'] = [
        '#type' => 'link',
        '#title' => t('Download releases'),
        '#url' => Url::fromRoute('asset_release.solution_asset_release.overview', [
          'rdf_entity' => $solution->id(),
        ]),
        '#attributes' => [
          'role' => 'button',
          'class' => [
            // @todo Move the Material Design classes in the theme layer.
            // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-5731
            'featured__form-button',
            'button',
            'button--blue-light',
            'mdl-button',
            'mdl-js-button',
            'mdl-button--raised',
            'mdl-js-ripple-effect',
            'mdl-button--accent',
          ],
        ],
        '#cache' => [
          // The 'group_header_block' block cache will have different versions
          // for the 'asset_release.solution_asset_release.overview' route
          // compared to the canonical solution route.
          'contexts' => ['route.name.is_download_releases_route'],
        ],
      ];
    }
  }

  // Attach the related solutions component.
  if ($display->getComponent('related_solutions')) {
    $ids = solution_get_related_solutions_ids($solution);
    $build['related_solutions'] = solution_build_related_solutions_list($ids);
  }

  // Attach the download total of all distributions in this solution.
  // @todo Add the `og-group-content` cache tag because the downloads are
  //   contained in the distribution entities which is group content.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-5200
  if ($display->getComponent('download_total')) {
    $total = 0;
    if (!$solution->isNew()) {
      /** @var \Drupal\asset_distribution\AssetDistributionRelations $relationship_counselor */
      $relationship_counselor = \Drupal::service('asset_distribution.relations');
      foreach ($relationship_counselor->getSolutionDistributions($solution) as $distribution) {
        $total += $distribution->download_count->entity->count->value;
      }
    }

    // The '#stats_topic' property is used as the label for the statistic, and
    // to set a template suggestion for the container.
    // @see joinup_theme_theme_suggestions_alter()
    // @see joinup_theme_preprocess_container__stats_topic()
    $build['downloads'] = [
      '#type' => 'container',
      'count' => [
        '#type' => 'container',
        '#stats_topic' => t('Downloads'),
        [
          '#markup' => $total,
        ],
        // Hide the download stats when there are no downloads.
        '#access' => $total > 0,
      ],
      '#cache' => [
        // Allow clearing the render cache of this element. By using a dedicated
        // cache tag, we avoid invalidating the solution tag as that would
        // result in clearing of too many cache entries. We're applying the
        // cache tag to an outer wrapper so that, when the inner element is not
        // rendered ($total === 0), the cache tag also bubbles up to the page.
        'tags' => ['solution_download_count:' . md5($solution->id())],
      ],
    ];
  }

  // Show the collection the solution belongs to. A solution can be affiliated
  // to multiple collections, but for now we show only the first one.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-3635
  if ($display->getComponent('collections') && !$solution->get('collection')->isEmpty()) {
    /** @var \Drupal\rdf_entity\Entity\Rdf $collection */
    $collection = $solution->get('collection')->first()->entity;
    $build['collections'] = [
      '#theme_wrappers' => ['container__stats_no_label'],
      'prefix' => ['#markup' => '<span class="stats__icon icon icon--collections"></span>'],
      'link' => $collection->toLink($collection->label())->toRenderable(),
    ];
  }

  // Read more link to the about page.
  if ($display->getComponent('read_more')) {
    try {
      $link = $solution->toLink(t('Read more'), 'about-page', [
        'attributes' => [
          'class' => ['about-page', 'read-more', 'fieldset__read-more'],
        ],
      ]);
      $build['read_more'] = $link->toRenderable();
    }
    catch (EntityMalformedException $e) {
      // Don't include a read more link that leads to a malformed entity.
    }
  }

  // Share link configuration.
  if ($display->getComponent('share_link')) {
    $build['share_link'] = joinup_group_generate_share_link($solution, 'solution.share_form');
    $build['#cache'] = [
      'contexts' => [
        'og_role',
      ],
    ];
  }
}

/**
 * Builds a list of entity ids of related solutions.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The solution.
 *
 * @return array|int
 *   List of entity ids of related solutions.
 */
function solution_get_related_solutions_ids(EntityInterface $entity) {
  $ids = [];
  static $recurse = FALSE;
  if ($recurse) {
    // Don't collapse the universe.
    return $ids;
  }
  $recurse = TRUE;

  $eira_ids = [];
  if ($entity->get('field_is_show_eira_related')->value === '1') {
    // Get all solutions that reference the same EIRA building block.
    $eira = [];
    foreach ($entity->get('field_is_solution_type')->getValue() as $field) {
      $eira[] = $field['target_id'];
    }
    if ($eira) {
      $query = \Drupal::entityQuery('rdf_entity')
        ->condition('rid', 'solution')
        ->condition('field_is_solution_type', $eira, 'IN')
        ->range(0, 4);
      $eira_ids = $query->execute();
    }
  }

  // Get all solutions that are reference directly.
  $related_ids = [];
  foreach ($entity->get('field_is_related_solutions')->getValue() as $field) {
    $related_ids[$field['target_id']] = $field['target_id'];
  }

  // Combine the two lists.
  $ids = $eira_ids + $related_ids;

  // Exclude ourselves.
  unset($ids[$entity->id()]);

  return $ids;
}

/**
 * Builds the render array of related solutions.
 *
 * @param int[] $ids
 *   The list of solution ids.
 *
 * @return array
 *   The render array of related solutions.
 */
function solution_build_related_solutions_list(array $ids) {
  $build = [];
  $entities = Rdf::loadMultiple($ids);
  $delta = 0;
  $elements = [];
  /** @var \Drupal\Core\Entity\EntityInterface $referenced_solution */
  foreach ($entities as $id => $referenced_solution) {
    // Make sure no draft content ends up in shared cache.
    $anonymous_user = User::getAnonymousUser();
    if (!$referenced_solution->access('view', $anonymous_user)) {
      continue;
    }
    $view_builder = Drupal::entityTypeManager()->getViewBuilder($referenced_solution->getEntityTypeId());
    $element = $view_builder->view($referenced_solution, 'view_mode_tile', $referenced_solution->language()->getId());
    $elements[$delta] = [
      '#type' => 'container',
      '#extra_suggestion' => 'container__grid_item',
      $id => $element,
    ];
    $delta++;
  }
  if ($elements) {
    $build = [
      '#type' => 'container',
      '#extra_suggestion' => 'container__separated',
      '#title' => t('Related solutions'),
    ];
    $build[0] = [
      '#type' => 'container',
      '#extra_suggestion' => 'container__grid',
    ];
    $build[0] += $elements;
  }
  return $build;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Default graph is published. Draft graph is draft.
 */
function solution_rdf_entity_presave(RdfInterface $entity) {
  if ($entity->bundle() !== 'solution' || !\Drupal::service('sparql.graph_handler')->bundleHasGraph('rdf_entity', 'solution', 'draft')) {
    return;
  }

  // Set the graph only for new solutions or those loaded from the main graphs.
  if (!$entity->isNew() && !in_array($entity->sparqlEntityOriginalGraph, ['default', 'draft'])) {
    return;
  }

  $state = $entity->field_is_state->value;
  if (in_array($state, ['draft', 'proposed', 'needs_update', 'blacklisted'])) {
    $entity->set('graph', 'draft');
  }
  elseif (in_array($state, ['validated', 'deletion_request'])) {
    $entity->set('graph', SparqlGraphInterface::DEFAULT);
  }
  elseif (empty($state)) {
    throw new \Exception("State field not found while trying to get the appropriate graph.");
  }
  else {
    throw new \Exception("State field value is invalid. Current value found: " . $state);
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function solution_rdf_entity_predelete(EntityInterface $entity) {
  if ($entity->bundle() === 'solution') {
    solution_invalidate_collection($entity);
  }
}

/**
 * Invalidate the cache of collections the solution belongs to.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The solution.
 */
function solution_invalidate_collection(EntityInterface $entity) {
  if ($entity->isNew()) {
    return;
  }
  // Solutions aren't group content of collections. However, they appear
  // alongside group content in collection overviews.
  // For this reason, we clear the collection group cache tags whenever a
  // solution is saved.
  if (\Drupal::moduleHandler()->moduleExists('collection')) {
    $ids = \Drupal::entityQuery('rdf_entity')
      ->condition('rid', 'collection')
      ->condition('field_ar_affiliates', $entity->id())
      ->execute();
    if ($ids) {
      $tags = [];
      /* @var \Drupal\rdf_entity\RdfInterface $collection */
      foreach (Rdf::loadMultiple($ids) as $collection) {
        $tags = Cache::mergeTags($tags, $collection->getCacheTagsToInvalidate());
      }
      Cache::invalidateTags(Cache::buildTags('og-group-content', $tags));
    }
  }
}

/**
 * Retrieves collections affiliated with the given solution from the database.
 *
 * Only use this function if you need to retrieve a fresh set of collections
 * from the database. For all other cases, use the computed 'collection' field:
 *
 * $collections = $solution->collection->getValue();
 *
 * @param \Drupal\rdf_entity\RdfInterface $solution
 *   The solution for which to retrieve the affiliated collections.
 *
 * @return array
 *   The collection IDs.
 *
 * @see solution_rdf_entity_load()
 */
function solution_get_collection_ids(RdfInterface $solution) {
  if (\Drupal::moduleHandler()->moduleExists('collection')) {
    $result = \Drupal::entityQuery('rdf_entity')
      ->condition('rid', 'collection')
      ->condition('field_ar_affiliates', $solution->id())
      ->execute();
  }

  return !empty($result) ? array_keys($result) : [];
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * When the entity is saved into the default graph, the draft must be deleted.
 * Also, when the entity is blacklisted, the published version is removed
 * (the entity becomes unpublished).
 */
function solution_rdf_entity_update(EntityInterface $entity) {
  if ($entity->bundle() !== 'solution' || !\Drupal::service('sparql.graph_handler')->bundleHasGraph('rdf_entity', 'solution', 'draft')) {
    return;
  }

  // @todo: Maybe we can avoid the attempt to delete from graph if there is no
  // transition made. This should move to an event subscriber.
  $state = $entity->field_is_state->value;
  if (in_array($state, ['validated', 'deletion_request'])) {
    \Drupal::entityTypeManager()->getStorage('rdf_entity')->deleteFromGraph([$entity], 'draft');
  }
  if ($state == 'blacklisted') {
    \Drupal::entityTypeManager()->getStorage('rdf_entity')->deleteFromGraph([$entity], 'default');
  }
  solution_invalidate_collection($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * When a published solution is deleted, the parent collections should have
 * their changed timestamp updated.
 */
function solution_rdf_entity_delete(RdfInterface $solution) {
  if (!$solution instanceof SolutionInterface || $solution->getWorkflowState() !== 'validated') {
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('rdf_entity');
  $ids = $storage->getQuery()
    ->condition('rid', 'collection')
    ->condition('field_ar_affiliates', $solution->id())
    ->execute();
  if ($ids) {
    // Touch the parent collections in order to update their changed timestamp.
    $request_time = \Drupal::time()->getRequestTime();
    /** @var \Drupal\rdf_entity\RdfInterface $collection */
    foreach ($storage->loadMultiple($ids) as $collection) {
      $collection->skip_notification = TRUE;
      $collection->setChangedTime($request_time)->save();
    }
  }
}

/**
 * Gets the latest release of a solution.
 *
 * @param \Drupal\rdf_entity\RdfInterface $solution
 *   The 'solution' RDF entity.
 *
 * @return \Drupal\rdf_entity\RdfInterface|null
 *   The latest release entity or NULL if there are no releases.
 */
function solution_get_latest_release(RdfInterface $solution) {
  if ($solution->bundle() !== 'solution') {
    throw new \InvalidArgumentException('Passed argument is not a solution RDF entity.');
  }

  $cache = &drupal_static(__FUNCTION__, []);
  if (!isset($cache[$solution->id()])) {
    $ids = \Drupal::entityQuery('rdf_entity')
      ->condition('rid', 'asset_release')
      ->condition('field_isr_is_version_of', $solution->id())
      ->sort('created', 'DESC')
      ->execute();

    $cache[$solution->id()] = NULL;
    if (!empty($ids)) {
      // @todo: Sorting is not yet working in SPARQL, we're fetching all results
      // and doing the sorting in PHP right now. Once sorting is working we
      // should limit the result set to 1 item.
      // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-2788
      $releases = Rdf::loadMultiple($ids);
      usort($releases, function ($release1, $release2) {
        $ct1 = $release1->getCreatedTime();
        $ct2 = $release2->getCreatedTime();
        if (empty($ct1) || empty($ct2) || $ct1 == $ct2) {
          return 0;
        }
        return ($ct1 < $ct2) ? 1 : -1;
      });

      $cache[$solution->id()] = reset($releases);
    }
  }

  return $cache[$solution->id()];
}

/**
 * Implements hook_search_api_query_TAG_alter().
 *
 * Alters the Search API queries for the solution content:
 * - only show content that belongs to the solution;
 * - do not show the solution itself in the search results.
 */
function solution_search_api_query_search_api_field_field_is_content_alter(QueryInterface &$query) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $query->getOption('search_api_field entity');

  // Show only content that belongs to this solution through the aggregated
  // field. This makes sure that other related entities (such as the solution
  // owner) do not show up as solution content tiles.
  $query->addCondition('entity_groups', [$entity->id()], 'IN');

  // Remove the solution itself from the results.
  $query->addCondition($entity->getEntityType()->getKey('id'), $entity->id(), '<>');

  // Exclude custom pages from the solution overview.
  $query->addCondition('entity_bundle', 'custom_page', '<>');

  // If we don't have any releases associated to this solution, it also means
  // that any distribution available is directly associated. We don't need any
  // further filtering on the results.
  if (!$entity->get('field_is_has_version')->count()) {
    return;
  }

  // Get the ids of the distributions directly associated to the solution.
  $distributions = array_map(function ($entity) {
    return $entity->id();
  }, $entity->get('field_is_distribution')->referencedEntities());

  if (!empty($distributions)) {
    // We need to filter out all the distributions except the ones that are
    // directly associated to the solution.
    $or = $query->createConditionGroup('OR');
    // The next line might seem crazy but I am not drunk. It's needed to bypass
    // Solr problems with negated queries. To fix this, we need to use the
    // '(*:* NOT entity_bundle:"asset_distribution")' format. Unfortunately
    // SearchApiSolrBackend::createFilterQuery() uses that syntax only when
    // multiple values are provided. While ugly, nothing is really wrong about
    // passing twice the same bundle.
    // @see \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend::createFilterQuery()
    // @see http://stackoverflow.com/a/635109
    $or->addCondition('entity_bundle', ['asset_distribution', 'asset_distribution'], 'NOT IN');
    $or->addCondition($entity->getEntityType()->getKey('id'), $distributions, 'IN');
    $query->addConditionGroup($or);
  }
  else {
    // Exclude all the distributions.
    $query->addCondition('entity_bundle', 'asset_distribution', '<>');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function solution_preprocess_rdf_entity(&$variables) {
  $rdf_entity = $variables['rdf_entity'];

  // Apply the visual cue only on the tile view mode.
  if ($variables['view_mode'] !== 'view_mode_tile') {
    return;
  }

  // If the solution is shared somewhere, attach the related library.
  if ($rdf_entity->hasField('field_is_shared_in') && !$rdf_entity->get('field_is_shared_in')->isEmpty()) {
    $variables['#attached']['library'][] = 'joinup_theme/shared_entity';
  }
}
