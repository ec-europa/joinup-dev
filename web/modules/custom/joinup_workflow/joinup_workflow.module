<?php

/**
 * @file
 * Hook implementations for the Joinup workflow module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\collection\Entity\CollectionInterface;
use Drupal\solution\Entity\SolutionInterface;

/**
 * Implements hook_entity_base_field_info().
 *
 * - Provides a base field that displays the current workflow state on nodes and
 *   RDF entities. This field is intended to be used on edit forms which use the
 *   set of buttons to perform the workflow state transitions. When these
 *   buttons are used the current workflow state is not indicated, so this field
 *   can be used to expose this information.
 */
function joinup_workflow_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'rdf_entity' || $entity_type->id() === 'node') {
    $fields['current_workflow_state'] = BaseFieldDefinition::create('current_workflow_state')
      ->setLabel(new TranslatableMarkup('Current workflow state'))
      ->setDisplayOptions('form', ['type' => 'hidden'])
      ->setDisplayConfigurable('form', TRUE)
      ->setComputed(TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_create().
 */
function joinup_workflow_entity_create(EntityInterface $entity) {
  // Since the state_machine module does not support same from-to state
  // transitions, the transition events also don't fire. Normally, the
  // transition event would be the one to decide whether the entity would be
  // published or not, this is not happening for new entities.
  // In Joinup, we do not create any entity with an initial state but for
  // testing, it is necessary to setup the initial status automatically
  // depending on the initial state that is passed into the entity.
  // @see: \Drupal\state_machine\Plugin\Field\FieldType\StateItem::preSave
  if ($entity instanceof EntityPublishedInterface) {
    /** @var \Drupal\joinup_workflow\WorkflowHelperInterface $workflow_helper */
    $workflow_helper = \Drupal::service('joinup_workflow.workflow_helper');
    if ($workflow_helper->hasEntityStateField($entity->getEntityTypeId(), $entity->bundle())) {
      $state_field = $workflow_helper->getEntityStateField($entity);
      $workflow = $state_field->getWorkflow();
      $state_id = $state_field->getValue()['value'];
      if ($workflow && $workflow_helper->isWorkflowStatePublished($state_id, $workflow)) {
        $entity->setPublished();
      }
      else {
        $entity->setUnpublished();
      }
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * Adds an extra field on entities subject to workflow that allows users to
 * log a reason why a workflow action was taken.
 */
function joinup_workflow_entity_extra_field_info(): array {
  $motivation_bundles = [
    'node' => ['discussion', 'document', 'event', 'news'],
    'rdf_entity' => ['collection', 'solution', 'asset_release'],
  ];
  $fields = [];
  foreach ($motivation_bundles as $entity_type_id => $bundles) {
    foreach ($bundles as $bundle) {
      $fields[$entity_type_id][$bundle]['form']['transition_motivation'] = [
        'label' => t('Motivation'),
        'description' => t('The motivation for the action.'),
        'weight' => 10,
        'display' => TRUE,
      ];
    }
  }

  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function joinup_workflow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!in_array($form_id, joinup_workflow_get_motivation_form_ids())) {
    return;
  }

  $form['transition_motivation'] = [
    '#type' => 'textarea',
    '#title' => t('Motivation'),
    '#description' => t('Description of the reason of this operation.'),
  ];
  $form['#validate'][] = 'joinup_workflow_motivation_form_validate';
}

/**
 * Returns an array of form IDs that should have a motivation field.
 *
 * @return array
 *   An array of form IDs.
 */
function joinup_workflow_get_motivation_form_ids() {
  return [
    'rdf_entity_collection_edit_form',
    'rdf_entity_solution_edit_form',
    'rdf_entity_asset_release_edit_form',
    'node_discussion_edit_form',
    'node_document_edit_form',
    'node_event_edit_form',
    'node_news_edit_form',
  ];
}

/**
 * Validation function for the forms with a motivation field.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function joinup_workflow_motivation_form_validate(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $triggering_element = $form_state->getTriggeringElement();
  // If '#state_id' is empty, it means that no transition has been triggered.
  // @see \Drupal\joinup_workflow\Plugin\Field\FieldWidget\StateMachineButtons::processActions()
  // "Add new" in the contact information field.
  if (empty($triggering_element['#state_id'])) {
    return;
  }
  $to_state = $triggering_element['#state_id'];

  /** @var \Drupal\joinup_workflow\WorkflowHelperInterface $workflow_helper */
  $workflow_helper = \Drupal::service('joinup_workflow.workflow_helper');
  $state_field = $workflow_helper->getEntityStateFieldDefinition($entity->getEntityTypeId(), $entity->bundle())->getName();
  /** @var \Drupal\state_machine\Plugin\Workflow\Workflow $workflow */
  $workflow = $workflow_helper->getWorkflow($entity, $state_field);
  $from_state = $entity->get($state_field)->first()->value;

  $transition = $workflow->findTransition($from_state, $to_state);
  if (empty($transition)) {
    return;
  }

  $required = joinup_workflow_is_motivation_required($entity->getEntityTypeId(), $workflow->getId(), $transition->getId());
  // @todo Remove this when the 'reject_deletion' and 'reject_archival' for
  //   rdf_entities are separate transitions.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-3644
  if ($entity instanceof CollectionInterface && $transition->getId() === 'validate' && $from_state !== 'archival_request') {
    $required = FALSE;
  }
  // @todo Remove this when the 'reject_deletion' and 'proposed_from_validated'
  //   for rdf_entities are separate transitions.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-3840
  if ($entity instanceof SolutionInterface) {
    $user_roles = \Drupal::currentUser()->getRoles();
    $propose_changes = $transition->getId() === 'propose' && $from_state === 'validated' && in_array('moderator', $user_roles);
    if ($propose_changes) {
      $required = TRUE;
    }
  }

  if ($required && empty($form_state->getValue('transition_motivation'))) {
    $form_state->setErrorByName('transition_motivation', t('This action requires you to fill in the motivation field.'));
  }
  $entity->motivation = $form_state->getValue('transition_motivation');
}

/**
 * Returns whether the transition requires a motivation.
 *
 * @param string $entity_type_id
 *   The entity type ID.
 * @param string $workflow_id
 *   The workflow ID.
 * @param string $transition_id
 *   The transition ID.
 *
 * @return bool
 *   Whether the transition requires a motivation.
 */
function joinup_workflow_is_motivation_required($entity_type_id, $workflow_id, $transition_id) {
  $required_transitions = [
    'node' => [
      'node:pre_moderated' => [
        'report',
        'request_changes',
        'report',
        'reject_deletion',
        'request_deletion',
      ],
      'node:post_moderated' => [
        'report',
        'request_changes',
      ],
      'node:discussion:post_moderated' => [
        'report',
        'request_changes',
      ],
    ],
    'rdf_entity' => [
      'collection_workflow' => [
        'validate',
        'archive',
      ],
      'solution_workflow' => [
        'needs_update',
      ],
      'asset_release_workflow' => [
        'request_changes',
      ],
    ],
  ];

  return !empty($required_transitions[$entity_type_id][$workflow_id]) && in_array($transition_id, $required_transitions[$entity_type_id][$workflow_id]);
}
