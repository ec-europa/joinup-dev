<?php

/**
 * @file
 * Contains the main functionality of Joinup Federation module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\joinup_federation\FederationDistributionParentFieldItemList;
use Drupal\joinup_federation\Plugin\DataType\RdfEntityReference;
use Drupal\joinup_federation\Plugin\Validation\Constraint\FederationDistributionSingleParentConstraint;
use Drupal\joinup_federation\Plugin\Validation\Constraint\JoinupEntityChangedConstraint;
use Drupal\joinup_federation\Plugin\Validation\Constraint\JoinupReferenceAccessConstraint;
use Drupal\joinup_federation\Plugin\Validation\Constraint\JoinupValidReferenceConstraint;
use Drupal\joinup_federation\RdfEntityReferenceFieldItemList;

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function joinup_federation_rdf_entity_mapping_load(array $mappings) {
  /** @var \Drupal\rdf_entity\RdfEntityMappingInterface $mapping */
  foreach ($mappings as $mapping) {
    // Add the staging graph to the mapping entity.
    $mapping->addGraphs(['staging' => 'http://joinup-federation/sink']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function joinup_federation_form_rdf_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->isNew()) {
    return;
  }

  /** @var \Drupal\rdf_entity_provenance\ProvenanceHelperInterface $provenance_helper */
  $provenance_helper = \Drupal::service('rdf_entity_provenance.provenance_helper');
  $activity = $provenance_helper->loadProvenanceActivity($entity->id());
  if (empty($activity)) {
    return;
  }

  $added_description = '<p>This field is has a federated value and thus, cannot be changed here.</p>';
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');
  /** @var \Drupal\rdf_schema_field_validation\SchemaFieldValidatorInterface $schema_validator */
  $schema_validator = \Drupal::service('rdf_schema_field_validation.schema_field_validator');
  foreach ($field_manager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle()) as $field_definition) {
    $field_name = $field_definition->getName();
    if (isset($form[$field_name]['widget']) && $schema_validator->isDefinedInSchema($entity->getEntityTypeId(), $entity->bundle(), $field_name)) {
      $form[$field_name]['widget']['#disabled'] = TRUE;
      $form[$field_name]['widget']['#description'] = ($form[$field_name]['widget']['#description'] ?? '') . $added_description;
    }
  }
}

/**
 * Implements hook_validation_constraint_alter().
 */
function joinup_federation_validation_constraint_alter(array &$definitions) {
  $definitions['ValidReference']['class'] = JoinupValidReferenceConstraint::class;
  $definitions['ReferenceAccess']['class'] = JoinupReferenceAccessConstraint::class;
  $definitions['EntityChanged']['class'] = JoinupEntityChangedConstraint::class;
  $definitions['DistributionSingleParent']['class'] = FederationDistributionSingleParentConstraint::class;
}

/**
 * Implements hook_field_info_alter().
 */
function joinup_federation_field_info_alter(&$info) {
  $info['entity_reference']['list_class'] = RdfEntityReferenceFieldItemList::class;
}

/**
 * Implements hook_data_type_info_alter().
 */
function joinup_federation_data_type_info_alter(&$data_types) {
  $data_types['entity_reference']['class'] = RdfEntityReference::class;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function joinup_federation_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entity_type, string $bundle): void {
  if ($entity_type->id() === 'rdf_entity' && $bundle === 'asset_distribution' && isset($fields['parent'])) {
    $fields['parent']->setClass(FederationDistributionParentFieldItemList::class);
  }
}
