<?php

/**
 * @file
 * Main functions and hook implementations of the RDF Entity module.
 */

declare(strict_types = 1);

use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\rdf_entity\RdfInterface;
use Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface;

/**
 * Implements hook_theme().
 */
function rdf_entity_theme() {
  return [
    'rdf_entity' => [
      'render element' => 'elements',
    ],
    'rdf_add_list' => [
      'variables' => ['content' => NULL],
    ],
  ];
}

/**
 * Prepares variables for rdf entity templates.
 *
 * Default template: rdf-entity.html.twig.
 *
 * Themes should use their own copy of rdf-entity.html.twig.
 * The default is located inside "templates/rdf-entity.html.twig".
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - rdf_entity: The rdf_entity object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_rdf_entity(array &$variables) {
  $renderer = \Drupal::getContainer()->get('renderer');
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  $variables['rdf_entity'] = $variables['elements']['#rdf_entity'];
  /** @var \Drupal\rdf_entity\RdfInterface $rdf_entity */
  $rdf_entity = $variables['rdf_entity'];
  $variables['date'] = $renderer->render($variables['elements']['created']);
  unset($variables['elements']['created']);
  $variables['author_name'] = $renderer->render($variables['elements']['uid']);
  unset($variables['elements']['uid']);

  $variables['url'] = $rdf_entity->toUrl('canonical', [
    'language' => $rdf_entity->language(),
  ]);
  $variables['label'] = !empty($variables['elements']['label']) ? $variables['elements']['label'] : ['#markup' => $rdf_entity->label()];
  unset($variables['elements']['label']);
  // The view mode is 'full' and we are on the 'rdf_entity.view' route.
  $variables['page'] = ($variables['view_mode'] == 'full' && (rdf_entity_is_page($rdf_entity)));

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Add article ARIA role.
  $variables['attributes']['role'] = 'article';
}

/**
 * Prepares variables for list of available RDF type templates.
 *
 * Default template: rdf-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of RDF entity bundles.
 */
function template_preprocess_rdf_add_list(array &$variables) {
  $variables['types'] = [];
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => [
          '#type' => 'link',
          '#title' => $type->label(),
          '#url' => new Url('rdf_entity.rdf_add', ['rdf_type' => $type->id()]),
        ],
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}

/**
 * Is the current page the full page view of the passed-in RDF entity?
 *
 * @param \Drupal\rdf_entity\RdfInterface $rdf_entity
 *   An RDF entity.
 *
 * @return int|false
 *   The ID of the RDF entity if this is a full page view, otherwise FALSE.
 */
function rdf_entity_is_page(RdfInterface $rdf_entity) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.rdf_entity.canonical') {
    $page_rdf_entity = $route_match->getParameter('rdf_entity');
  }
  return (!empty($page_rdf_entity) ? $page_rdf_entity->id() == $rdf_entity->id() : FALSE);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function rdf_entity_theme_suggestions_rdf_entity(array $variables) {
  $suggestions = [];
  $rdf_entity = $variables['elements']['#rdf_entity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'rdf_entity__' . $sanitized_view_mode;
  $suggestions[] = 'rdf_entity__' . $rdf_entity->bundle();
  $suggestions[] = 'rdf_entity__' . $rdf_entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'rdf_entity__' . $rdf_entity->id();
  $suggestions[] = 'rdf_entity__' . $rdf_entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_pathauto_alias_types_alter().
 */
function rdf_entity_pathauto_alias_types_alter(array &$definitions) {
  // Remove the automatically generated Pathauto alias type, we offer our own
  // alias type.
  // @see \Drupal\pathauto\Plugin\Deriver\EntityAliasTypeDeriver::getDerivativeDefinitions()
  // @see \Drupal\rdf_entity\Plugin\pathauto\AliasType\RdfEntityAliasType
  unset($definitions['canonical_entities:rdf_entity']);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * If UUID is queried, just swap it with the ID. They are the same but UUID is
 * not stored, while on ID we can rely.
 *
 * @todo For now, this handles also taxonomy_term. To be copied in rdf_taxonomy
 * when that module will not depend on rdf_entity.
 */
function rdf_entity_query_sparql_alter(SparqlQueryInterface $query) {
  $id_key = $query->getEntityType()->getKey('id');
  $uuid_key = $query->getEntityType()->getKey('uuid');
  $id_field = $uuid_field = NULL;
  $conditions =& $query->conditions();

  foreach ($conditions as $delta => &$condition) {
    if ($condition['field'] === $id_key) {
      $id_field = $delta;
    }
    if ($condition['field'] === $uuid_key) {
      $uuid_field = $delta;
    }
  }
  if ($id_field === NULL && $uuid_field !== NULL) {
    $condition = ['field' => $id_key] + $conditions[$uuid_field];
    $conditions[] = $condition;
  }
  if ($uuid_field !== NULL) {
    unset($conditions[$uuid_field]);
  }

  $conditions = array_values($conditions);
}
