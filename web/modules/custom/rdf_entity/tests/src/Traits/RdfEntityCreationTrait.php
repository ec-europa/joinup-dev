<?php

namespace Drupal\Tests\rdf_entity\Traits;

use Drupal\joinup\Traits\RandomGeneratorTrait;
use Drupal\rdf_entity\Entity\Rdf;

/**
 * Provides methods to create rdf entities based on default settings.
 *
 * This trait is meant to be used only by test classes.
 */
trait RdfEntityCreationTrait {

  use RandomGeneratorTrait;

  /**
   * Get an rdf entity from the database based on its title.
   *
   * @param string|\Drupal\Component\Render\MarkupInterface $title
   *   A title, usually generated by $this->randomMachineName().
   * @param bool $reset
   *   (optional) Whether to reset the entity cache.
   *
   * @return \Drupal\rdf_entity\RdfInterface
   *   An rdf entity matching $title.
   */
  public function getRdfEntityByTitle($title, $reset = FALSE) {
    if ($reset) {
      \Drupal::entityTypeManager()->getStorage('rdf_entity')->resetCache();
    }
    // Cast MarkupInterface objects to string.
    $title = (string) $title;
    $rdf_entities = \Drupal::entityTypeManager()
      ->getStorage('rdf_entity')
      ->loadByProperties(['label' => $title]);
    // Load the first rdf entity returned from the database.
    $returned_entity = reset($rdf_entities);
    return $returned_entity;
  }

  /**
   * Creates an rdf entity based on default settings.
   *
   * @param array $settings
   *   (optional) An associative array of settings for the entity, as used in
   *   entity_create(). Override the defaults by specifying the key and value
   *   in the array, for example:.
   *
   * @code
   *     $this->createRdfEntity(array(
   *       'label' => t('Hello, world!'),
   *       'rid' => 'dummy',
   *     ));
   * @endcode
   *   The following defaults are provided:
   *   - label: Random string.
   *   - rid: 'dummy'.
   *   - id: 'http://example.com/<random_string>'
   *
   * @return \Drupal\rdf_entity\RdfInterface
   *   The created entity.
   */
  protected function createRdfEntity(array $settings = []) {
    // Populate defaults array.
    $settings += [
      'label'     => $this->randomMachineName(8),
      'rid'      => 'dummy',
    ];
    $rdf_entity = Rdf::create($settings);
    $rdf_entity->save();

    return $rdf_entity;
  }

}
