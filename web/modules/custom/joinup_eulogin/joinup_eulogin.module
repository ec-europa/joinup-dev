<?php

/**
 * @file
 * Main functions and hook implementations of the Joinup EU Login module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\SubformState;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\joinup_eulogin\JoinupEuLoginAuthnameItemList;

/**
 * Implements hook_entity_base_field_info().
 *
 * Adds a computed field to easily retrieve the external authname of a user.
 */
function joinup_eulogin_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['eulogin_authname'] = BaseFieldDefinition::create('string')
      ->setLabel(t('EU Login name'))
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('display', FALSE)
      ->setComputed(TRUE)
      ->setCardinality(1)
      ->setClass(JoinupEuLoginAuthnameItemList::class);
  }

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function joinup_eulogin_form_cas_account_link_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (\Drupal::moduleHandler()->moduleExists('email_registration')) {
    // Apply the email_registration form alter on sub-form.
    email_registration_form_user_login_form_alter($form['login'], $form_state);

    // As the login form is a sub-form, we cannot use the validator callback
    // provided by the 'email_registration' module. Replace the module validator
    // with our own.
    $index = array_search('email_registration_user_login_validate', $form['login']['name']['#element_validate']);
    if ($index !== FALSE) {
      unset($form['login']['name']['#element_validate']);
    }
    $form['login']['name']['#element_validate'][] = 'joinup_eulogin_email_registration_validation';

    // Provide a link to the Drupal password reset form so that users that have
    // not yet moved to EU Login can still reset their password if they forgot
    // it.
    $arguments = [
      ':passreset-url' => Url::fromRoute('user.pass')->toString(),
    ];
    $form['login']['pass']['#description'] = t('Enter the password that accompanies your email address. Lost your Joinup password? You can still <a href=":passreset-url">reset your password</a>.', $arguments);
  }
}

/**
 * Wraps the email_registration_user_login_validate() validator.
 *
 * As the login form is a sub-form, we cannot just use the validator callback
 * provided by the 'email_registration' module as that expects that the user
 * values are root-level values. But in this case we're one level below, so we
 * need to pass a (sub)form state object on that has the user values on the root
 * level to the 'email_registration' module validator.
 *
 * @param array $element
 *   The Form API form element render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The Form API form state object.
 * @param array $form
 *   The Form API form render array.
 *
 * @see email_registration_user_login_validate()
 */
function joinup_eulogin_email_registration_validation(array $element, FormStateInterface $form_state, array $form): void {
  $subform_state = SubformState::createForSubform($form['login'], $form, $form_state);
  email_registration_user_login_validate($element, $subform_state);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * For accounts linked to EU Login:
 * - Hide the username field.
 * - Set a custom description for the E-mail field.
 * - Disable fields that are managed by EU Login.
 */
function joinup_eulogin_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if ($form_id !== 'user_form') {
    // The registration form.
    return;
  }

  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getFormObject()->getEntity();

  // This account is not linked to an EU Login account.
  if ($account->get('eulogin_authname')->isEmpty()) {
    // Show the user name if the user does not have access to the original
    // account name field.
    $form['user_name'] = [
      '#type' => 'inline_template',
      '#template' => '<p><strong>{{ "Username"|t }}:</strong> <em>{{ name }}</em></p>',
      '#context' => ['name' => $account->getAccountName()],
      '#access' => !$form['account']['name']['#access'],
      '#weight' => -100,
    ];

    $form['field_user_first_name']['widget'][0]['value']['#description'] = '';
    $form['field_user_family_name']['widget'][0]['value']['#description'] = '';
    return;
  }

  $form['header'] = [
    '#weight' => -100,
    '#type' => 'html_tag',
    '#tag' => 'h3',
    '#value' => t('Account information'),
  ];
  $form['header_description'] = [
    '#weight' => -99,
    '#type' => 'html_tag',
    '#tag' => 'p',
    '#value' => t('Your name and E-mail data are inherited from EU Login. To update this information, you can visit your EU Login account page <a href="https://webgate.ec.europa.eu/cas/eim/external/restricted/edit.cgi" rel="nofollow" target="_blank">here</a>. Synchronisation will take a few minutes and it will be visible the next time you login on Joinup.'),
  ];

  $form['account']['mail']['#description'] = t('Your e-mail address is not made public. We will only send you necessary system notifications and you can opt in later if you wish to receive additional notifications about content you are subscribed to.');
  // This hook implementation runs after cas_form_user_form_alter() because the
  // two modules have the same weight but the module list is sorted by weight
  // and then alphabetically, making the CAS module to be placed before 'Joinup
  // EU Login'. For this reason, it's safe to use the form alter to overwrite
  // the behavior of CAS module hook implementation.
  // @see module_config_sort()
  // @see cas_form_user_form_alter()
  if (isset($form['account']['mail']) && \Drupal::config('cas.settings')->get('user_accounts.restrict_email_management')) {
    $form['account']['mail']['#disabled'] = TRUE;
  }
  if (isset($form['account']['pass']) && \Drupal::config('cas.settings')->get('user_accounts.restrict_password_management')) {
    $form['account']['pass']['#access'] = FALSE;
  }

  $mapping = \Drupal::configFactory()
    ->get('cas_attributes.settings')
    ->get('field.mappings');

  if ($mapping) {
    /** @var \Drupal\user\UserDataInterface $user_data */
    $user_data = \Drupal::service('user.data');

    // The CAS Attributes tokens are always in lowercase. Lowercase also the
    // attributes received from CAS so that we can properly compare them later.
    // @see cas_attributes_tokens()
    $attributes = array_change_key_case(
      // Cast to an array to overcome the NULL value when user data is missed.
      (array) $user_data->get('joinup_eulogin', $account->id(), 'attributes'),
      CASE_LOWER
    );

    foreach ($mapping as $field_name => $token) {
      // The token is in the format `[cas:attribute:attribute_name]`. Extract
      // the attribute name from it.
      $attribute_name = substr(substr($token, 15), 0, -1);
      if (!empty($attributes[$attribute_name])) {
        $form[$field_name]['#disabled'] = TRUE;
        // Prevent submission of an empty, required and disabled field. That
        // would cause the validation to fail.
        $form[$field_name]['widget'][0]['value']['#required'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables the Drupal user login form and shows a warning message that users
 * should log in with EU Login instead.
 */
function joinup_eulogin_form_user_login_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Disable the form completely.
  foreach (Element::children($form) as $key) {
    unset($form[$key]);
  }

  $arguments = [
    ':eulogin-url' => Url::fromRoute('cas.login')->toString(),
    ':passreset-url' => Url::fromRoute('user.pass')->toString(),
  ];

  $form['warning'] = [
    '#theme' => 'status_messages',
    '#message_list' => [
      'warning' => [
        [
          [
            '#markup' => t('Starting from 02/03/2020, signing in to Joinup is handled by <a href=":eulogin-url">EU Login</a>, the European Commission Authentication Service.', $arguments),
            '#prefix' => '<p>',
            '#suffix' => '</p>',
          ],
          [
            '#markup' => t('After you sign in using EU Login, you will be able to synchronise your existing Joinup account.'),
            '#prefix' => '<p>',
            '#suffix' => '</p>',
          ],
          [
            '#markup' => t('Lost your Joinup password? You can still <a href=":passreset-url">reset your password.', $arguments),
            '#prefix' => '<p>',
            '#suffix' => '</p>',
          ],
        ],
      ],
    ],
    '#status_headings' => [
      'warning' => t('Warning message'),
    ],
  ];
}

/**
 * Implements hook_local_tasks_alter().
 */
function joinup_eulogin_local_tasks_alter(&$local_tasks): void {
  // Remove the local task linking to the Drupal registration form. Users are no
  // longer allowed to register in Drupal and should use EU Login instead.
  unset($local_tasks['user.register']);
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function joinup_eulogin_menu_local_actions_alter(&$local_actions): void {
  // Remove the local action to bulk add CAS users from the admin/people form.
  // This action is added by the CAS module to all roles with the `administer
  // users` permission but this functionality is not included in the functional
  // specifications, and is confusing for the moderator team.
  unset($local_actions['cas.bulk_add_cas_users']);
}

/**
 * Implements hook_module_implements_alter().
 */
function joinup_eulogin_module_implements_alter(&$implementations, $hook): void {
  // Remove the hook implementation that adds a link to the bulk form for adding
  // CAS users. This form is made available by the CAS module to all roles with
  // the `administer users` permission but this functionality is not included in
  // the functional specifications, and is confusing for the moderator team.
  if ($hook === 'menu_links_discovered_alter') {
    // @see cas_menu_links_discovered_alter()
    unset($implementations['cas']);
  }
}
