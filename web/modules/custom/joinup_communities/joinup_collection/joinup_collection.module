<?php

/**
 * @file
 * Main file of Joinup module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\og\Entity\OgMembership;
use Drupal\og\Og;
use Drupal\og\OgMembershipInterface;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

define('JOINUP_COLLECTION_ID', Settings::get('joinup_collection.collection_id', 'http://data.europa.eu/w21/df34e3a2-207b-4910-a804-344931654e20'));

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Add the 'Joinup' collection membership to every new user.
 */
function joinup_collection_user_insert(UserInterface $account) {
  if ($joinup_collection = Rdf::load(JOINUP_COLLECTION_ID)) {
    // Add the membership only it doesn't exist yet.
    if (!$membership = Og::getMembership($joinup_collection, $account, [])) {
      OgMembership::create()
        ->setGroup($joinup_collection)
        ->setOwner($account)
        ->setState(OgMembershipInterface::STATE_ACTIVE)
        ->save();
    }
    // If the membership exists but is not active, activate it.
    elseif ($membership->getState() !== OgMembershipInterface::STATE_ACTIVE) {
      $membership->setState(OgMembershipInterface::STATE_ACTIVE)->save();
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Remove the action 'joinup_collection_og_membership_delete_action'.
 */
function joinup_collection_form_views_form_og_members_overview_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->getBuildInfo()['args'][0];
  // The first view argument is the entity type.
  if (isset($view->args[0]) && $view->args[0] === 'rdf_entity') {
    // The second view argument is the group entity ID.
    if (!empty($view->args[1]) && $view->args[1] === JOINUP_COLLECTION_ID) {
      unset($form['header']['og_membership_bulk_form']['action']['#options']['joinup_collection_og_membership_delete_action']);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * In the member administration bulk operation view we are formatting the
 * username column as full names, but Views still sorts by username. Make sure
 * we sort by first name + last name instead of by username.
 */
function joinup_collection_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Skip if this is not the member administration view.
  if ($view->id() !== 'og_members_overview' || !$query instanceof Sql) {
    return;
  }
  // Skip if we're not ordering by username.
  if (empty($query->orderby[0]['field'])) {
    return;
  }
  $field = $query->orderby[0]['field'];
  if ($field !== 'users_field_data_og_membership.name') {
    return;
  }

  $display = $view->getDisplay();

  // Keep track of the direction of the sort.
  $order = $query->orderby[0]['direction'] ?: 'ASC';

  // Get rid of the original sort handlers and order by clauses that may be
  // present in the view.
  $query->orderby = [];
  foreach ($display->getHandlers('sort') as $sort_handler) {
    $sort_handler->destroy();
  }

  // Inject freshly initialized sort handlers for the first name and last name
  // into the display.
  $display->handlers['sort'] = array_map(function ($info) use ($view, $display) {
    $handler = Views::handlerManager('sort')->getHandler($info, NULL);
    $handler->init($view, $display, $info);
    return $handler;
  }, joinup_collection_get_og_members_overview_sort_handlers_info($order));

  // Make sure the sort handlers are "built". This is making sure that the
  // various references to objects and arrays are present at the places that
  // Views expects them to be.
  $view->_build('sort');
}

/**
 * Returns info for Views sort handlers in the member administration form.
 *
 * We are overriding the username column in the member administration view so
 * that the full name (first name + last name) is shown. This means that we need
 * to override the sorting as well, since the usernames are not necessarily in
 * the same alphabetical order as the full names. This function returns the info
 * that can be used to create the Views sort handlers for the user's first and
 * last name.
 *
 * @param string $order
 *   The order in which to sort, either 'ASC' or 'DESC'.
 *
 * @return array
 *   An associative array of Views sort handler configuration options, keyed by
 *   field name.
 *
 * @see joinup_collection_views_query_alter()
 */
function joinup_collection_get_og_members_overview_sort_handlers_info(string $order): array {
  return [
    'field_user_first_name_value' => [
      'id' => 'field_user_first_name_value',
      'table' => 'user__field_user_first_name',
      'field' => 'field_user_first_name_value',
      'relationship' => 'uid',
      'group_type' => 'group',
      'admin_label' => '',
      'order' => $order,
      'exposed' => FALSE,
      'expose' => ['label' => ''],
      'plugin_id' => 'standard',
    ],
    'field_user_family_name_value' => [
      'id' => 'field_user_family_name_value',
      'table' => 'user__field_user_family_name',
      'field' => 'field_user_family_name_value',
      'relationship' => 'uid',
      'group_type' => 'group',
      'admin_label' => '',
      'order' => $order,
      'exposed' => FALSE,
      'expose' => ['label' => ''],
      'plugin_id' => 'standard',
    ],
  ];
}
