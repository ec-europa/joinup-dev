<?php

/**
 * @file
 * Main functions and hook implementations of the community content module.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\joinup_community_content\CommunityContentHelper;
use Drupal\joinup_community_content\CommunityContentWorkflowAccessControlHandler;
use Drupal\joinup_community_content\Entity\CommunityContentInterface;
use Drupal\joinup_community_content\JoinupCommunityContentCommentAccessControlHandler;
use Drupal\joinup_group\Exception\MissingGroupException;
use Drupal\joinup_group\JoinupGroupHelper;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function joinup_community_content_entity_extra_field_info() {
  $fields = [];

  foreach (CommunityContentHelper::BUNDLES as $bundle) {
    $fields['node'][$bundle]['display']['share_link'] = [
      'label' => t('Share'),
      'description' => t('A link to share the content'),
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function joinup_community_content_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!$display->getComponent('share_link')) {
    return;
  }

  $build['share_link'] = joinup_group_generate_share_link($entity, 'joinup_community_content.share_content_form');
  $build['#cache'] = [
    'contexts' => [
      'og_role',
    ],
  ];
}

/**
 * Implements hook_node_access().
 */
function joinup_community_content_node_access(NodeInterface $entity, string $operation, AccountInterface $account): AccessResult {
  if (!$entity instanceof CommunityContentInterface) {
    return AccessResult::neutral();
  }
  return \Drupal::service('joinup_community_content.community_content_workflow_access')->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function joinup_community_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Skip if we are not on a community content form.
  $community_content_form_ids = [];
  foreach (CommunityContentHelper::BUNDLES as $bundle) {
    $community_content_form_ids[] = "node_{$bundle}_form";
    $community_content_form_ids[] = "node_{$bundle}_edit_form";
  }
  if (!in_array($form_id, $community_content_form_ids)) {
    return;
  }

  // Attach a form process handler that will change the label of the description
  // field for uploaded files on the community content forms. This would
  // otherwise conflict with the already existing "Description" field on Events.
  // The field label is changed on all community content types for consistency.
  if (!empty($form['field_attachment']['widget'])) {
    foreach (Element::children($form['field_attachment']['widget']) as $key) {
      $form['field_attachment']['widget'][$key]['#process'][] = 'joinup_community_content_attachment_file_process';
    }
  }
}

/**
 * Form #process handler for the file fields of community content forms.
 *
 * @see \joinup_community_content_form_node_form_alter()
 */
function joinup_community_content_attachment_file_process($element, FormStateInterface $form_state, $form) {
  if (!empty($element['description']['#title'])) {
    $element['description']['#title'] = t('File description');
  }
  return $element;
}

/**
 * Returns the appropriate workflow to use for the community content.
 *
 * The callback ensures that even if the parent is updated and the moderation
 * status changes, it will still use the proper workflow.
 * The fact that both pre and post moderated workflow use the same states
 * ensures that there are not going to be any issues as we only change
 * transitions.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The community content entity.
 *
 * @return string|null
 *   The id of the workflow to use, or NULL if the workflow cannot be
 *   determined.
 *
 * @throws \InvalidArgumentException
 *    Thrown when the function is called for bundles that do not refer to
 *    community content.
 */
function joinup_community_content_workflow_selector(EntityInterface $entity): ?string {
  $bundles = ['document', 'event', 'news'];
  if (!$entity instanceof CommunityContentInterface || !in_array($entity->bundle(), $bundles)) {
    // @todo Document why this doesn't apply to discussions.
    throw new \InvalidArgumentException('This function can only be called for community content apart from discussion.');
  }

  try {
    $parent_entity = $entity->getGroup();
  }
  catch (MissingGroupException $e) {
    // If the entity doesn't have a parent group we cannot determine the
    // workflow. This can happen e.g. when deleting orphaned group content.
    return NULL;
  }

  $moderation = JoinupGroupHelper::getModeration($parent_entity);
  if ($moderation === CommunityContentWorkflowAccessControlHandler::POST_MODERATION) {
    return 'node:post_moderated';
  }

  // Roles with the `publish content in moderated groups` permission are able to
  // directly publish in the group regardless of the moderation state, as a
  // trusted user.
  // We check the available permissions directly instead of using OgAccess
  // because we don't want users with admin permissions to always go through the
  // post moderated workflow.
  $current_user = \Drupal::currentUser();
  if ($current_user->hasPermission('publish content in moderated groups')) {
    return 'node:post_moderated';
  }

  $membership = $parent_entity->getMembership((int) $current_user->id());
  if ($membership && $membership->hasPermission('publish content in moderated groups')) {
    return 'node:post_moderated';
  }

  return 'node:pre_moderated';
}

/**
 * Implements hook_theme().
 */
function joinup_community_content_theme($existing, $type, $theme, $path) {
  return [
    'link_icon' => [
      'variables' => [
        'attributes' => [],
        'icon' => NULL,
        'title' => NULL,
        'url' => NULL,
      ],
    ],
  ];
}

/**
 * Preprocess function for the "advanced_search_pseudo_facet" theme hook.
 *
 * This is a link to the search page that is shown on the collection and
 * solution homepages. It takes the current facet settings from the query
 * arguments and forwards them to the search page so that similar search results
 * are being shown there.
 *
 * @param array $variables
 *   An associative array containing:
 *   - entity: The collection or solution that is being forwarded to the search
 *     page.
 */
function template_preprocess_advanced_search_pseudo_facet(array &$variables) {
  // Retrieve the facet arguments from the request query.
  $request = \Drupal::request();
  $facet_arguments = $request->query->get('f', []);

  // Reset the facet arguments to an empty array if the URL has been tampered
  // with.
  if (!is_array($facet_arguments)) {
    $facet_arguments = [];
  }

  // Add a filter for the current collection or solution.
  $facet_arguments[] = 'group:' . $variables['entity']->id();
  $options = ['query' => ['f' => joinup_community_content_translate_facet_arguments($facet_arguments)]];
  $variables['link'] = [
    '#type' => 'link',
    '#title' => t('Advanced search'),
    '#url' => Url::fromRoute('view.search.page_1', [], $options),
    '#attributes' => ['rel' => 'nofollow'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_community_content_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  // Add a theme suggestion to the container of the inline facets region of
  // collections and solutions so that a fake "Advanced search" facet can be
  // appended to the inline facets.
  if ($variables['theme_hook_original'] === 'container__facet_region__inline_facets') {
    if (in_array(
      $variables['element']['#entity']->bundle(),
      ['collection', 'solution']
    )) {
      $suggestions[] = $variables['theme_hook_original'] . '__with_advanced_search';
    }
  }
}

/**
 * Translates facet IDs in a facet arguments array for use on the search page.
 *
 * The collection and solution homepages are a different 'facet source' than the
 * actual search page, meaning that they are using facets with different IDs. If
 * we want to forward a filtered search from a collection or solution homepage
 * then the facet IDs need to be translated to match the ones from the search
 * page.
 *
 * @param array $arguments
 *   The query arguments in which to translate the facet IDs.
 *
 * @return array
 *   The translated array.
 */
function joinup_community_content_translate_facet_arguments(array $arguments) {
  $mapping = [
    'collection_policy_domain' => 'policy_domain',
    'collection_type' => 'type',
    'solution_content_bundle' => 'type',
    'solution_policy_domain' => 'policy_domain',
    'solution_spatial_coverage' => 'spatial_coverage',
  ];

  foreach ($arguments as &$argument) {
    [$facet_id, $value] = explode(':', $argument, 2);
    if (array_key_exists($facet_id, $mapping)) {
      $argument = implode(':', [$mapping[$facet_id], $value]);
    }
  }

  return $arguments;
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_community_content_entity_type_alter(array &$entity_types): void {
  // Swap out access handler for comments.
  if (isset($entity_types['comment'])) {
    $entity_types['comment']->setAccessClass(JoinupCommunityContentCommentAccessControlHandler::class);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function joinup_community_content_form_comment_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Updates the submit button text of the comment form to be more clear.
  $form['actions']['submit']['#value'] = t('Post comment');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function joinup_community_content_preprocess_links__comment(array &$variables): void {
  // For anonymous users, don't show the comment forbidden link on each comment.
  // We display one for all comments at the bottom of the list.
  if (\Drupal::currentUser()->isAnonymous()) {
    unset($variables['links']['comment-forbidden']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * In pre-moderated groups all content changes from non-trusted users should be
 * approved by a moderator before they are published. Trusted users (authors and
 * moderators) can bypass this.
 *
 * This alters the node revision revert form to ensure that a moderator has to
 * approve the reverting of a revision proposed by a non-trusted user.
 *
 * Trusted users (and any user in a non-moderator group) can revert without
 * approval.
 */
function joinup_community_content_form_node_revision_revert_confirm_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getBuildInfo()['args'][0];
  if (!$entity instanceof CommunityContentInterface) {
    return;
  }

  // Skip if the group is not moderated.
  if (!$entity->getGroup()->isModerated()) {
    return;
  }

  // Check if the user (e.g. a moderator) has global permission to directly
  // publish content in moderated groups. If this is the case we don't need to
  // alter the form.
  $current_user = \Drupal::getContainer()->get('current_user');
  if ($current_user->hasPermission('publish content in moderated groups')) {
    return;
  }

  // Check if the user (e.g. an author) has permission to directly publish
  // content in this particular group.
  // @todo Use GroupInterface::getGroupAccess() once ISAICP-5951 is in.
  /** @var \Drupal\og\OgAccessInterface $og_access */
  $og_access = \Drupal::service('og.access');
  if ($og_access->userAccess($entity->getGroup(), 'publish content in moderated groups', $current_user)->isAllowed()) {
    return;
  }

  // The user is not allowed to directly publish in the group. Alter the form.
  array_unshift($form['#submit'], 'joinup_community_content_form_node_revision_revert_confirm_submit');
}

/**
 * Sets the revision in proposed state in case of a pre-moderated group.
 *
 * This ensures that when an untrusted user reverts a revision this will only be
 * public after approval by a moderator.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state instance.
 *
 * @see \joinup_community_content_form_node_revision_revert_confirm_alter()
 */
function joinup_community_content_form_node_revision_revert_confirm_submit(array $form, FormStateInterface $form_state) {
  $entity = $form_state->getBuildInfo()['args'][0];
  $entity->set('field_state', 'proposed');
}
