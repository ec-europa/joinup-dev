<?php

/**
 * @file
 * Main functions and hook implementations of the community content module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\joinup_community_content\CommunityContentHelper;

/**
 * Implements hook_entity_extra_field_info().
 */
function joinup_community_content_entity_extra_field_info() {
  $fields = [];

  foreach (CommunityContentHelper::getBundles() as $bundle) {
    $fields['node'][$bundle]['display']['share_link'] = [
      'label' => t('Share'),
      'description' => t('A link to share the content'),
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function joinup_community_content_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!$display->getComponent('share_link')) {
    return;
  }

  $url = Url::fromRoute('joinup_community_content.share_content_form', [
    'node' => $entity->id(),
  ]);
  $build['share_link'] = [
    '#theme' => 'link_icon',
    '#title' => t('Share'),
    '#icon' => 'share',
    '#url' => $url,
    '#attributes' => [
      'class' => ['use-ajax', 'action-link'],
      'data-dialog-type' => 'modal',
      'data-dialog-options' => Json::encode([
        'width' => 'auto',
        'height' => 'auto',
      ]),
    ],
    '#access' => $url->access(),
  ];
  $build['#cache'] = [
    'contexts' => [
      'og_role',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function joinup_community_content_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Skip if we are not on a community content form.
  $community_content_form_ids = [];
  foreach (CommunityContentHelper::getBundles() as $bundle) {
    $community_content_form_ids[] = "node_{$bundle}_form";
    $community_content_form_ids[] = "node_{$bundle}_edit_form";
  }
  if (!in_array($form_id, $community_content_form_ids)) {
    return;
  }

  // Attach a form process handler that will change the label of the description
  // field for uploaded files on the community content forms. This would
  // otherwise conflict with the already existing "Description" field on Events.
  // The field label is changed on all community content types for consistency.
  if (!empty($form['field_attachment']['widget'])) {
    foreach (Element::children($form['field_attachment']['widget']) as $key) {
      $form['field_attachment']['widget'][$key]['#process'][] = 'joinup_community_content_attachment_file_process';
    }
  }
}

/**
 * Form #process handler for the file fields of community content forms.
 *
 * @see \joinup_community_content_form_node_form_alter()
 */
function joinup_community_content_attachment_file_process($element, FormStateInterface $form_state, $form) {
  if (!empty($element['description']['#title'])) {
    $element['description']['#title'] = t('File description');
  }
  return $element;
}

/**
 * Returns the appropriate workflow to use for the community content.
 *
 * The callback ensures that even if the parent is updated and the moderation
 * status changes, it will still use the proper workflow.
 * The fact that both pre and post moderated workflow use the same states
 * ensures that there are not going to be any issues as we only change
 * transitions.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The community content entity.
 *
 * @return string
 *   The id of the workflow to use.
 *
 * @throws Exception
 *    Thrown when the function is called for bundles that do not refer to
 *    community content.
 */
function joinup_community_content_workflow_selector(EntityInterface $entity) {
  $bundles = ['document', 'event', 'news'];
  if ($entity->getEntityTypeId() !== 'node' || !in_array($entity->bundle(), $bundles)) {
    throw new Exception('This function can only be called for community content apart from discussion.');
  }

  /** @var \Drupal\joinup_core\JoinupRelationManager $relation_manager */
  $relation_manager = \Drupal::service('joinup_core.relations_manager');
  $moderation = $relation_manager->getParentModeration($entity);
  return $moderation == 1 ? 'node:pre_moderated' : 'node:post_moderated';
}

/**
 * Implements hook_preprocess_node().
 *
 * For shared nodes, adds an attribute with the id of the parent entity where
 * they have been shared from.
 */
function joinup_community_content_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  // Apply the visual cue only on the tile view mode.
  if ($variables['view_mode'] !== 'view_mode_tile') {
    return;
  }

  // If the node is shared somewhere, attach the related library.
  if ($node->hasField('field_shared_in') && !$node->get('field_shared_in')->isEmpty()) {
    $variables['#attached']['library'][] = 'joinup_community_content/shared_content';
  }

  if ($node->isSticky()) {
    $variables['attributes']['class'][] = 'is-sticky';
    $variables['#attached']['library'][] = 'joinup_community_content/pinned_content';
  }
}

/**
 * Implements hook_theme().
 */
function joinup_community_content_theme($existing, $type, $theme, $path) {
  return [
    'advanced_search_pseudo_facet' => [
      'variables' => ['entity' => NULL],
    ],
    'link_icon' => [
      'variables' => ['icon' => NULL, 'title' => NULL, 'url' => NULL],
    ],
    'social_share' => [
      'variables' => ['entity' => NULL],
    ],
  ];
}

/**
 * Preprocess function for the "social_share" theme hook.
 *
 * @param array $variables
 *   An associative array containing:
 *   - entity: the entity being shared.
 */
function template_preprocess_social_share(array &$variables) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $variables['entity'];
  // Generate an absolute, un-aliased URL.
  $variables['url'] = $entity->toUrl('canonical', [
    'language' => $entity->language(),
  ])->setAbsolute()->setOption('alias', TRUE);

  $variables['encoded_url'] = urlencode($variables['url']->toString());
  $variables['encoded_title'] = urlencode($entity->label());
}

/**
 * Preprocess function for the "advanced_search_pseudo_facet" theme hook.
 *
 * This is a link to the search page that is shown on the collection and
 * solution homepages. It takes the current facet settings from the query
 * arguments and forwards them to the search page so that similar search results
 * are being shown there.
 *
 * @param array $variables
 *   An associative array containing:
 *   - entity: The collection or solution that is being forwarded to the search
 *     page.
 */
function template_preprocess_advanced_search_pseudo_facet(array &$variables) {
  // Retrieve the facet arguments from the request query.
  $request = \Drupal::request();
  $facet_arguments = $request->query->get('f', []);

  // Reset the facet arguments to an empty array if the URL has been tampered
  // with.
  if (!is_array($facet_arguments)) {
    $facet_arguments = [];
  }

  // Add a filter for the current collection or solution.
  $facet_arguments[] = 'group:' . $variables['entity']->id();
  $options = ['query' => ['f' => joinup_community_content_translate_facet_arguments($facet_arguments)]];
  $variables['link'] = [
    '#type' => 'link',
    '#title' => t('Advanced search'),
    '#url' => Url::fromRoute('view.search.page_1', [], $options),
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_community_content_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  // Add a theme suggestion to the container of the inline facets region of
  // collections and solutions so that a fake "Advanced search" facet can be
  // appended to the inline facets.
  if ($variables['theme_hook_original'] === 'container__facet_region__inline_facets') {
    if (in_array($variables['element']['#entity']->bundle(), ['collection', 'solution'])) {
      $suggestions[] = $variables['theme_hook_original'] . '__with_advanced_search';
    }
  }
}

/**
 * Translates facet IDs in a facet arguments array for use on the search page.
 *
 * The collection and solution homepages are a different 'facet source' than the
 * actual search page, meaning that they are using facets with different IDs. If
 * we want to forward a filtered search from a collection or solution homepage
 * then the facet IDs need to be translated to match the ones from the search
 * page.
 *
 * @param array $arguments
 *   The query arguments in which to translate the facet IDs.
 *
 * @return array
 *   The translated array.
 */
function joinup_community_content_translate_facet_arguments(array $arguments) {
  $mapping = [
    'collection_policy_domain' => 'policy_domain',
    'collection_type' => 'type',
    'solution_content_bundle' => 'type',
    'solution_policy_domain' => 'policy_domain',
    'solution_spatial_coverage' => 'spatial_coverage',
  ];

  foreach ($arguments as $key => &$argument) {
    list($facet_id, $value) = explode(':', $argument, 2);
    if (array_key_exists($facet_id, $mapping)) {
      $argument = implode(':', [$mapping[$facet_id], $value]);
    }
  }

  return $arguments;
}
