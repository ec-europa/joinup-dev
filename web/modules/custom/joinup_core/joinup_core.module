<?php

/**
 * @file
 * Hook implementations for the Joinup core module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\joinup_core\Element\Datetime;
use Drupal\joinup_core\JoinupSiteAlertListBuilder;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function joinup_core_theme($existing, $type, $theme, $path) {
  return [
    '404_not_found' => [
      'variables' => [
        'search' => [],
        'front' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alters the Site Alert entity form to hide the scheduling of the alerts. Due
 * to a bug in the core page cache module the scheduling can only work using an
 * additional AJAX call which is undesirable in our case. By disabling the
 * scheduling the alerts are managed manually and the page cache works normally.
 */
function joinup_core_form_site_alert_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['scheduling']['#access'] = FALSE;
}

/**
 * Implements hook_entity_base_field_info().
 *
 * - Provides a 'report' field on community content pages that can be used to
 *   report inappropriate content.
 */
function joinup_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add a 'report' field to community content entities. Currently all node
  // types are community content.
  if ($entity_type->id() === 'node') {
    $fields['report'] = BaseFieldDefinition::create('report_link')
      ->setName('report')
      ->setLabel(t('Report'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\joinup_core\ReportLinkFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => 50,
        'settings' => [
          'trim_length' => 80,
          'url_only' => FALSE,
          'url_plain' => FALSE,
          'rel' => '',
          'target' => '',
        ],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_core_entity_type_alter(array &$entity_types) {
  // Check that the Site Alert entity type is defined, so we can avoid depending
  // on the Site Alert module.
  if (isset($entity_types['site_alert'])) {
    // Override the list builder with a version which omits the unused 'Start
    // time' and 'End time' columns.
    $entity_types['site_alert']->setListBuilderClass(JoinupSiteAlertListBuilder::class);
  }
}

/**
 * Implements hook_node_links_alter().
 */
function joinup_core_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  if (isset($links['comment__field_comments']['#links']['comment-add'])) {
    unset($links['comment__field_comments']['#links']['comment-add']);
  }
  if (isset($links['comment__field_replies']['#links']['comment-add'])) {
    unset($links['comment__field_replies']['#links']['comment-add']);
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * - Make sure the standard formatter for links can be used for the link that is
 *   used to report inappropriate content.
 */
function joinup_core_field_formatter_info_alter(array &$info) {
  $info['link']['field_types'][] = 'report_link';
}

/**
 * Implements hook_element_info_alter().
 *
 * Override the validate handler for the datetime widget in order to show a
 * custom validation message when part of the widget is not filled in.
 */
function joinup_core_element_info_alter(array &$info) {
  if (isset($info['datetime'])) {
    $info['datetime']['#element_validate'] = [
      [
        Datetime::class,
        'validateDatetime',
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * File entities might have file system redirects coming from previous platform
 * versions, following this pattern (relative to files directory):
 * @code
 * legacy/path/to/image.png -> actual/path/to/image.png
 * @endcode
 * Such redirects are not cleared automatically by the Redirect module, when the
 * source file entity is deleted, thus we're fulfilling this task here.
 */
function joinup_core_file_delete(EntityInterface $entity) {
  /** @var \Drupal\file\FileInterface $entity */
  $uri = $entity->getFileUri();
  $scheme = StreamWrapperManager::getScheme($uri);
  if ($scheme !== 'public') {
    return;
  }

  $path = 'base:/' . \Drupal::service('stream_wrapper.public')->getDirectoryPath() . '/' . StreamWrapperManager::getTarget($uri);

  // Delete all redirects targeting this path.
  redirect_delete_by_path($path);
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Strip off the h1, h5, h6 tag format options from the 'Format' dropdown.
 * This does not remove the ability of the user to enter or render these tags.
 *
 * @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-3682
 */
function joinup_core_editor_js_settings_alter(array &$settings) {
  if (isset($settings['editor']['formats']['content_editor']) && $settings['editor']['formats']['content_editor']['format'] === 'content_editor') {
    $options = explode(';', $settings['editor']['formats']['content_editor']['editorSettings']['format_tags']);
    $options = array_diff($options, ['h1', 'h5', 'h6']);
    $settings['editor']['formats']['content_editor']['editorSettings']['format_tags'] = implode(';', $options);
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function joinup_core_ckeditor_css_alter(array &$css) {
  $css[] = drupal_get_path('module', 'joinup_core') . '/css/wysiwyg.css';
}

/**
 * Implements hook_config_readonly_whitelist_patterns().
 */
function joinup_core_config_readonly_whitelist_patterns() {
  return [
    // The 'support' menu is editable by moderators. This includes the menu
    // links static overrides config.
    'system.menu.front-page',
    'system.menu.support',
    'core.menu.static_menu_link_overrides',
  ];
}

/**
 * Implements hook_module_implements_alter().
 */
function joinup_core_module_implements_alter(array &$implementations, $hook) {
  switch ($hook) {
    case 'block_view_system_menu_block_alter':
      // Do not show the contextual links to edit menus. This functionality is
      // used very rarely but the contextual links menu causes visual clutter.
      unset($implementations['menu_ui']);
      break;
  }
}
