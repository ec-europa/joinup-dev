<?php

/**
 * @file
 * Main functions and hook implementations of the Joinup core module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\joinup_core\Element\Datetime;
use Drupal\joinup_core\Entity\Controller\JoinupRdfListBuilder;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelperInterface;
use Drupal\og_menu\Entity\OgMenuInstance;

/**
 * Implements hook_theme().
 */
function joinup_core_theme($existing, $type, $theme, $path) {
  return [
    'joinup_tiles' => [
      'path' => drupal_get_path('module', 'joinup_core') . '/templates',
    ],
    'facet_widget_links_inline' => [
      'variables' => [
        'active' => [],
        'items' => [],
        'attributes' => [],
        'prefix_text' => '',
        'suffix_text' => '',
      ],
    ],
    'statistics_block' => [
      'variables' => [
        'collection_count' => 0,
        'solution_count' => 0,
        'content_count' => 0,
      ],
    ],
    '404_not_found' => [
      'variables' => [
        'search' => [],
        'front' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for views joinup_tiles template.
 *
 * Template: joinup-tiles.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 */
function template_preprocess_joinup_tiles(array &$variables) {
  template_preprocess_views_view_unformatted($variables);
}

/**
 * Prepares variables for the facet widget "links inline" template.
 *
 * Default template: facet-widget-links-inline.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - active: an array of active facet items.
 *   - items: an array of inactive facet items.
 *   - attributes: HTML attributes for the main facet wrapper.
 */
function template_preprocess_facet_widget_links_inline(array &$variables) {
  $variables['button_attributes'] = new Attribute([
    'id' => Html::getUniqueId('filter-button'),
    'class' => ['filter__icon', 'icon', 'icon--arrow-down'],
  ]);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * The state_machine forces the current value to be available in the options.
 * However, there are cases where the user cannot keep the node in the same
 * state when editing it.
 * Since we are already checking for the allowed states and we are blocking the
 * access if there are no available transitions, it is safe to simply remove
 * the default value if it is not included in the allowed transitions.
 *
 * @see \Drupal\state_machine\Plugin\Field\FieldType\StateItem::getAllowedStates
 * @see https://www.drupal.org/node/2746091
 */
function joinup_core_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $fieldType = $context['items']->getFieldDefinition()->getType();
  if ($fieldType != 'state' || empty($form_state->getBuildInfo()['callback_object'])) {
    return;
  }

  $form = $context['form'];
  // Inline entity forms have the related entity directly in the form, as the
  // form state is the one of the main form.
  if (isset($form['#type']) && $form['#type'] === 'inline_entity_form') {
    $entity = $form['#entity'];
  }
  else {
    $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
  }

  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }

  // Get the field name.
  $field_name = $context['items']->getFieldDefinition()->getName();
  $default_value = reset($element['#default_value']);
  $allowed_transitions = $entity->get($field_name)->first()->getTransitions();
  $allowed_states = array_map(function ($transition) {
    return $transition->getToState()->getId();
  }, $allowed_transitions);

  if (!in_array($default_value, $allowed_states)) {
    unset($element['#options'][$default_value], $element['#default_value']);
    // Re-set a default because otherwise the 'empty' value will be available.
    $default_value = array_keys($allowed_transitions);
    $element['#default_value'] = reset($default_value);
  }
}

/**
 * Implements hook_entity_graph_access().
 *
 * The same procedure as the global access check is followed here. The purpose
 * is to override the results of the global access check if the user has the
 * appropriate OG permissions.
 *
 * @todo: hook api definition is needed.
 */
function joinup_core_entity_graph_access(EntityInterface $entity, $operation, AccountInterface $account, $graph_name) {
  if (!$entity || (!in_array($entity->bundle(), ['collection', 'solution'])) || $operation != 'view' || $graph_name == 'default') {
    return AccessResult::neutral();
  }

  $membership = Og::getMembership($entity, $account);
  if (empty($membership)) {
    return AccessResult::neutral();
  }

  // Following the same logic as the global access check.
  $map = ['view' => 'view all graphs'];
  $entity_type_id = $entity->getEntityTypeId();
  $type_map = ['view' => "view $entity_type_id $graph_name graph"];

  // If the operation is not supported, do not allow access.
  if (!isset($map[$operation]) || !isset($type_map[$operation])) {
    return FALSE;
  }

  $has_permission = $membership->hasPermission($map[$operation]) || $membership->hasPermission($type_map[$operation]);
  return $has_permission ? AccessResult::allowed() : AccessResult::neutral();
}

/**
 * Implements hook_node_access().
 */
function joinup_core_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // @todo: when all bundles are in, remove the first check.
  if (!in_array($entity->bundle(), ['document', 'discussion', 'news', 'event'])) {
    return AccessResult::neutral();
  }
  return \Drupal::service('joinup_core.node_workflow_access')->entityAccess($entity, $operation, $account);
}

/**
 * Implements hook_entity_base_field_info().
 *
 * - Provides a base field that displays the current workflow state on nodes and
 *   RDF entities. This field is intended to be used on edit forms which use the
 *   set of buttons to perform the workflow state transitions. When these
 *   buttons are used the current workflow state is not indicated, so this field
 *   can be used to expose this information.
 * - Provides a 'report' field on community content pages that can be used to
 *   report inappropriate content.
 * - Provides a 'path' field only for the 'rdf_entity' entities.
 */
function joinup_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'rdf_entity' || $entity_type->id() === 'node') {
    $fields['current_workflow_state'] = BaseFieldDefinition::create('current_workflow_state')
      ->setLabel(new TranslatableMarkup('Current workflow state'))
      ->setDisplayOptions('form', ['type' => 'hidden'])
      ->setDisplayConfigurable('form', TRUE)
      ->setComputed(TRUE);
  }

  // Add a 'report' field to community content entities. Currently all node
  // types are community content.
  if ($entity_type->id() === 'node') {
    $fields['report'] = BaseFieldDefinition::create('report_link')
      ->setName('report')
      ->setLabel(t('Report'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\joinup_core\ReportLinkFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => 50,
        'settings' => [
          'trim_length' => 80,
          'url_only' => FALSE,
          'url_plain' => FALSE,
          'rel' => '',
          'target' => '',
        ],
      ]);
  }

  // Allow alias features for RDF entities.
  if (($entity_type->id() === 'rdf_entity') && \Drupal::moduleHandler()->moduleExists('path')) {
    $fields['path'] = BaseFieldDefinition::create('path')
      ->setLabel(t('URL alias'))
      ->setTranslatable(TRUE)
      ->setComputed(TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_core_entity_type_alter(array &$entity_types) {
  // Provides a workaround for asset_release and solution RDF entity bundles.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-3126
  // @todo Remove when ISAICP-3126 gets in.
  $entity_types['rdf_entity']->setListBuilderClass(JoinupRdfListBuilder::class);

  // Add the about page and member overview as link templates, so the OG context
  // will be automatically solved.
  $link_templates = [
    'about-page' => '/rdf_entity/{rdf_entity}/about',
    'member-overview' => '/rdf_entity/{rdf_entity}/members',
  ];
  foreach ($link_templates as $key => $path) {
    $entity_types['rdf_entity']->setLinkTemplate($key, $path);
  }
}

/**
 * Implements hook_ENTITY_TYPE_storage_load().
 *
 * Fill $term->extension and $term->mime_type fields from 'file_type' vocabulary
 * by a direct query as, due to their RDF representation, this cannot be done by
 * a simple RDF field mapping. Because we do this at storage level, the values
 * get cached in the 'cache_entity' bin, avoiding performance issues.
 */
function joinup_core_taxonomy_term_storage_load(array $terms) {
  /** @var \Drupal\rdf_entity\Database\Driver\sparql\Connection $sparql */
  $sparql = \Drupal::service('sparql_endpoint');

  $query = <<<QUERY
SELECT ?extension ?mime_type
WHERE {
  <%s> <http://publications.europa.eu/ontology/authority/op-mapped-code> ?op_extension .
  ?op_extension <http://purl.org/dc/elements/1.1/source> "file-extension" .
  ?op_extension <http://publications.europa.eu/ontology/authority/legacy-code> ?extension .
  <%s> <http://publications.europa.eu/ontology/authority/op-mapped-code> ?op_mime_type .
  ?op_mime_type <http://purl.org/dc/elements/1.1/source> "manifestation-type-cellar" .
  ?op_mime_type <http://publications.europa.eu/ontology/authority/legacy-code> ?mime_type .
}
QUERY;

  /** @var \Drupal\taxonomy\TermInterface[] $terms */
  foreach ($terms as $term) {
    if ($term->bundle() === 'file_type') {
      $term_id = $term->id();
      $results = $sparql->query(sprintf($query, $term_id, $term_id));
      if ($results->count()) {
        $result = &$results[0];
        // A file type might have more than one extension separated by space.
        $extensions = array_filter(explode(' ', trim($result->extension->getValue())));
        foreach ($extensions as $extension) {
          $term->get('extension')->appendItem(['value' => $extension]);
        }
        $term->set('mime_type', trim($result->mime_type->getValue()));
      }
    }
  }
}

/**
 * Implements hook_node_links_alter().
 */
function joinup_core_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  if (isset($links['comment__field_comments']['#links']['comment-add'])) {
    unset($links['comment__field_comments']['#links']['comment-add']);
  }
  if (isset($links['comment__field_replies']['#links']['comment-add'])) {
    unset($links['comment__field_replies']['#links']['comment-add']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Shows an information message to users who have access to the draft version
 * of the rdf entity if the user is viewing the published version.
 */
function joinup_core_rdf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Show only in full mode views.
  if ($view_mode !== 'full') {
    return;
  }
  $graph = $entity->get('graph')->first()->value;
  if ($graph !== 'default' || !$entity->hasGraph('draft')) {
    return;
  }

  // The draft link is already set in the list of the link templates of the rdf
  // entity as 'rdf-draft-{$graph_name}'.
  $url = $entity->toUrl('rdf-draft-draft');
  if (!$url->access()) {
    return;
  }

  $link = Link::fromTextAndUrl(t('here'), $url)->toString();
  drupal_set_message(t('You are viewing the published version. To view the latest draft version, click @here.', [
    '@here' => $link,
  ]), 'warning');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * In Joinup, solutions and releases share the same bundle uri. The distinction
 * between these two is that the releases always have the field
 * 'field_isr_is_version_of' filled, while solutions do not have this field.
 * This alter performs the following:
 * 1. If there is a filter on both the release and solution bundles, do nothing.
 * 2. If there is a filter on the solution, set the field
 * 'field_isr_is_version_of' as a field required to be absent.
 * 3. If there is a filter on the asset release, set the field
 * 'field_isr_is_version_of' as a required field.
 * 4. If there is a negative case on the bundles, perform cases 2 and 3 on
 * reverse.
 * 5. If none of these exist, as a filter, ignore it.
 */
function joinup_core_query_rdf_entity_alter(AlterableInterface $query) {
  $conditions = $query->conditions();
  // If only one of the following are true, then add a condition on their
  // corresponding field. If both are set, then do not bother.
  $solution = FALSE;
  $release = FALSE;

  $entity_type = $query->getMetaData('entity_type');
  $bundle_key = $entity_type->getKey('bundle');
  foreach ($conditions as $condition) {
    if ($condition['field'] === $bundle_key) {
      $bundles = array_intersect(['solution', 'asset_release'], $condition['value']);
      if (empty($bundles) || count($bundles) !== 1) {
        continue;
      }
      $bundle = reset($bundles);
      if ($bundle === 'solution') {
        $solution = TRUE;
      }
      elseif ($bundle === 'asset_release') {
        $release = TRUE;
      }
    }
  }

  if ($solution && !$release) {
    $query->notExists('field_isr_is_version_of');
  }
  elseif (!$solution && $release) {
    $query->exists('field_isr_is_version_of');
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * - Make sure the standard formatter for links can be used for the link that is
 *   used to report inappropriate content.
 */
function joinup_core_field_formatter_info_alter(array &$info) {
  $info['link']['field_types'][] = 'report_link';
}

/**
 * Implements hook_entity_create().
 */
function joinup_core_entity_create(EntityInterface $entity) {
  // Set the publication state when creating an entity that uses workflow.
  if ($entity instanceof EntityPublishedInterface) {
    /** @var \Drupal\joinup_core\WorkflowHelperInterface $workflow_helper */
    $workflow_helper = \Drupal::service('joinup_core.workflow.helper');
    if ($workflow_helper->hasEntityStateField($entity->getEntityTypeId(), $entity->bundle())) {
      $state_field = $workflow_helper->getEntityStateField($entity);
      $workflow = $state_field->getWorkflow();
      $state_id = $state_field->getValue()['value'];
      if ($workflow_helper->isWorkflowStatePublished($state_id, $workflow)) {
        $entity->setPublished();
      }
      else {
        $entity->setUnpublished();
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Override the validate handler for the datetime widget.
 */
function joinup_core_element_info_alter(array &$info) {
  if (isset($info['datetime'])) {
    $info['datetime']['#element_validate'] = [
      [
        Datetime::class,
        'validateDatetime',
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for RDF entities.
 */
function joinup_core_rdf_entity_insert(EntityInterface $entity) {
  // When a collection or solution is created, create a new navigation menu and
  // associate it with the new collection or solution. This menu can be used to
  // link to custom pages, member overviews, an about page etc.
  if (Og::isGroup($entity->getEntityTypeId(), $entity->bundle()) && in_array($entity->bundle(), ['collection', 'solution'])) {
    $values = [
      'type' => 'navigation',
      OgGroupAudienceHelperInterface::DEFAULT_FIELD => $entity->id(),
    ];
    $og_menu_instance = OgMenuInstance::create($values);
    $og_menu_instance->save();

    // Automatically add a link to the overview and about pages of the
    // collection entity.
    $menu_name = 'ogmenu-' . $og_menu_instance->id();
    $link = MenuLinkContent::create([
      'title' => t('Overview'),
      'menu_name' => $menu_name,
      'link' => ['uri' => 'internal:' . $entity->toUrl()->toString()],
      'weight' => -10,
    ]);
    $link->save();

    $link = MenuLinkContent::create([
      'title' => t('Members'),
      'menu_name' => $menu_name,
      'link' => ['uri' => 'internal:' . $entity->toUrl('member-overview')->toString()],
      'weight' => -9,
    ]);
    $link->save();

    $link = MenuLinkContent::create([
      'title' => t('About'),
      'menu_name' => $menu_name,
      'link' => ['uri' => 'internal:' . $entity->toUrl('about-page')->toString()],
      'weight' => -8,
    ]);
    $link->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Provide default images for collections and solutions in case they are empty.
 */
function joinup_core_rdf_entity_presave(EntityInterface $entity) {
  if (!in_array($entity->bundle(), ['solution', 'collection'])) {
    return;
  }

  $field_data = [
    'logo' => ['field_ar_logo', 'field_is_logo'],
    'banner' => ['field_ar_banner', 'field_is_banner'],
  ];

  $fixtures_path = drupal_get_path('module', 'joinup_core') . '/fixtures/images/';
  foreach ($field_data as $field_type => $fields) {
    foreach ($fields as $field) {
      if ($entity->hasField($field) && empty($entity->get($field)->getValue())) {
        // Get files without the . and .. directories.
        $files = array_slice(scandir($fixtures_path . $field_type), 2);
        $random = array_rand($files);
        $file_path = \Drupal::service('file_system')->realpath($fixtures_path . $field_type . '/' . $files[$random]);
        $file_path = file_unmanaged_copy($file_path, 'public://');
        $file = File::create(['uri' => $file_path]);
        $file->save();
        $entity->set($field, $file->id());
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function joinup_core_token_info() {
  return [
    'types' => [
      'joinup-current-page' => [
        'name' => t('Joinup current page'),
        'description' => t('Custom tokens that can be derived from the context of the current page.'),
      ],
    ],
    'tokens' => [
      'joinup-current-page' => [
        'group-context' => [
          'name' => t('Group context'),
          'description' => t('The collection or solution a page belongs to.'),
        ],
        'page-type' => [
          'name' => t('Page type'),
          'description' => t('Human readable page type. Intended for analytics.'),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function joinup_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  switch ($type) {
    case 'joinup-current-page':
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'group-context':
            /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
            if ($group = \Drupal::service('og.context')->getGroup()) {
              $replacements[$original] = $group->label();
            }
            break;

          case 'page-type':
            $replacements[$original] = \Drupal::service('joinup_core.page_type_determiner')->getType();
            break;
        }
      }
      break;
  }

  return $replacements;
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * File entities might have file system redirects coming from previous platform
 * versions, following this pattern (relative to files directory):
 * @code
 * legacy/path/to/image.png -> actual/path/to/image.png
 * @endcode
 * Such redirects are not cleared automatically by the Redirect module, when the
 * source file entity is deleted, thus we're fulfilling this task here.
 */
function joinup_core_file_delete(EntityInterface $entity) {
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');

  /** @var \Drupal\file\FileInterface $entity */
  $uri = $entity->getFileUri();
  $scheme = $file_system->uriScheme($uri);
  if ($scheme !== 'public') {
    return;
  }

  $path = 'base:/' . \Drupal::service('stream_wrapper.public')->getDirectoryPath() . '/' . file_uri_target($uri);

  // Delete all redirects targeting this path.
  redirect_delete_by_path($path);
}
