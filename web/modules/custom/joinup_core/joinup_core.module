<?php

/**
 * @file
 * Main functions and hook implementations of the Joinup core module.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\Core\Template\Attribute;
use Drupal\joinup_core\Element\Datetime;
use Drupal\joinup_core\JoinupSiteAlertListBuilder;
use Drupal\node\NodeInterface;
use Drupal\search_api\IndexInterface;
use Drupal\search_api\Utility\Utility;

/**
 * Implements hook_theme().
 */
function joinup_core_theme($existing, $type, $theme, $path) {
  return [
    'joinup_tiles' => [
      'path' => drupal_get_path('module', 'joinup_core') . '/templates',
    ],
    'facet_widget_links_inline' => [
      'variables' => [
        'active' => [],
        'items' => [],
        'attributes' => [],
        'prefix_text' => '',
        'suffix_text' => '',
      ],
    ],
    '404_not_found' => [
      'variables' => [
        'search' => [],
        'front' => [],
      ],
    ],
    'chip' => [
      'render element' => 'element',
    ],
    'input__chip_button' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Prepares variables for views joinup_tiles template.
 *
 * Template: joinup-tiles.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 */
function template_preprocess_joinup_tiles(array &$variables) {
  template_preprocess_views_view_unformatted($variables);
}

/**
 * Prepares variables for the facet widget "links inline" template.
 *
 * Default template: facet-widget-links-inline.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - active: an array of active facet items.
 *   - items: an array of inactive facet items.
 *   - attributes: HTML attributes for the main facet wrapper.
 */
function template_preprocess_facet_widget_links_inline(array &$variables) {
  $variables['button_attributes'] = new Attribute([
    'id' => Html::getUniqueId('filter-button'),
    'class' => ['filter__icon', 'icon', 'icon--arrow-down'],
  ]);
}

/**
 * Prepares variables for the "chip" template.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #text.
 */
function template_preprocess_chip(array &$variables) {
  $element = $variables['element'];
  $variables['text'] = $element['#text'];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * @todo Remove this hack as part of ISAICP-3021.
 * @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-3021
 *
 * Hide the table drag handlers on multivalue fields for RDF entities. These are
 * useless since weights are currently not stored and the ordering of the values
 * is not retained after submitting the form.
 */
function joinup_core_form_rdf_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\rdf_entity\Form\RdfForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\rdf_entity\RdfInterface $rdf */
  $rdf = $form_object->getEntity();

  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($rdf->getEntityTypeId(), $rdf->bundle());
  // Keep only fields that are on the form.
  $field_definitions = array_intersect_key($field_definitions, $form);
  foreach ($field_definitions as $field_name => $field_definition) {
    if ($field_definition->getFieldStorageDefinition()->isMultiple()) {
      // We are questioning only multi-value fields.
      $form[$field_name]['#attributes']['class'][] = 'joinup-nodrag';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alters the Site Alert entity form to hide the scheduling of the alerts. Due
 * to a bug in the core page cache module the scheduling can only work using an
 * additional AJAX call which is undesirable in our case. By disabling the
 * scheduling the alerts are managed manually and the page cache works normally.
 */
function joinup_core_form_site_alert_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['scheduling']['#access'] = FALSE;
}

/**
 * Implements hook_entity_base_field_info().
 *
 * - Provides a 'report' field on community content pages that can be used to
 *   report inappropriate content.
 * - Provides a 'path' field only for the 'rdf_entity' entities.
 */
function joinup_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add a 'report' field to community content entities. Currently all node
  // types are community content.
  if ($entity_type->id() === 'node') {
    $fields['report'] = BaseFieldDefinition::create('report_link')
      ->setName('report')
      ->setLabel(t('Report'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\joinup_core\ReportLinkFieldItemList')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => 50,
        'settings' => [
          'trim_length' => 80,
          'url_only' => FALSE,
          'url_plain' => FALSE,
          'rel' => '',
          'target' => '',
        ],
      ]);
  }

  // Allow alias features for RDF entities.
  if (($entity_type->id() === 'rdf_entity') && \Drupal::moduleHandler()->moduleExists('path')) {
    $fields['path'] = BaseFieldDefinition::create('path')
      ->setLabel(t('URL alias'))
      ->setTranslatable(TRUE)
      ->setComputed(TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_core_entity_type_alter(array &$entity_types) {
  // Check that the Site Alert entity type is defined, so we can avoid depending
  // on the Site Alert module.
  if (isset($entity_types['site_alert'])) {
    // Override the list builder with a version which omits the unused 'Start
    // time' and 'End time' columns.
    $entity_types['site_alert']->setListBuilderClass(JoinupSiteAlertListBuilder::class);
  }

  if (!isset($entity_types['rdf_entity'])) {
    return;
  }

  // Add the about page and member overview as link templates, so the OG context
  // will be automatically solved.
  $link_templates = [
    'about-page' => '/rdf_entity/{rdf_entity}/about',
    'member-overview' => '/rdf_entity/{rdf_entity}/members',
    'add-facilitator' => '/rdf_entity/{rdf_entity}/members/invite',
  ];
  foreach ($link_templates as $key => $path) {
    $entity_types['rdf_entity']->setLinkTemplate($key, $path);
  }
}

/**
 * Implements hook_ENTITY_TYPE_storage_load().
 *
 * Fill $term->extension and $term->mime_type fields from 'file_type' vocabulary
 * by a direct query as, due to their RDF representation, this cannot be done by
 * a simple RDF field mapping. Because we do this at storage level, the values
 * get cached in the 'cache_entity' bin, avoiding performance issues.
 */
function joinup_core_taxonomy_term_storage_load(array $terms) {
  $sparql = \Drupal::service('sparql_endpoint');
  /** @var \Drupal\sparql_entity_storage\Database\Driver\sparql\ConnectionInterface $sparql */

  $query = <<<QUERY
SELECT ?extension ?mime_type
WHERE {
  <%s> <http://publications.europa.eu/ontology/authority/op-mapped-code> ?op_extension .
  ?op_extension <http://purl.org/dc/elements/1.1/source> "file-extension" .
  ?op_extension <http://publications.europa.eu/ontology/authority/legacy-code> ?extension .
  <%s> <http://publications.europa.eu/ontology/authority/op-mapped-code> ?op_mime_type .
  ?op_mime_type <http://purl.org/dc/elements/1.1/source> "manifestation-type-cellar" .
  ?op_mime_type <http://publications.europa.eu/ontology/authority/legacy-code> ?mime_type .
}
QUERY;

  /** @var \Drupal\taxonomy\TermInterface[] $terms */
  foreach ($terms as $term) {
    if ($term->bundle() === 'file_type') {
      $term_id = $term->id();
      $results = $sparql->query(sprintf($query, $term_id, $term_id));
      if ($results->count()) {
        $result = &$results[0];
        // A file type might have more than one extension separated by space.
        $extensions = array_filter(explode(' ', trim($result->extension->getValue())));
        foreach ($extensions as $extension) {
          $term->get('extension')->appendItem(['value' => $extension]);
        }
        $term->set('mime_type', trim($result->mime_type->getValue()));
      }
    }
  }
}

/**
 * Implements hook_node_links_alter().
 */
function joinup_core_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  if (isset($links['comment__field_comments']['#links']['comment-add'])) {
    unset($links['comment__field_comments']['#links']['comment-add']);
  }
  if (isset($links['comment__field_replies']['#links']['comment-add'])) {
    unset($links['comment__field_replies']['#links']['comment-add']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Shows an information message to users who have access to the draft version
 * of the rdf entity if the user is viewing the published version.
 */
function joinup_core_rdf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Show only in full mode views.
  if ($view_mode !== 'full') {
    return;
  }
  $graph = $entity->get('graph')->target_id;
  if ($graph !== 'default' || !$entity->hasGraph('draft')) {
    return;
  }

  // The draft link is already set in the list of the link templates of the rdf
  // entity as 'rdf-draft-{$graph_name}'.
  $url = $entity->toUrl('rdf-draft-draft');
  if (!$url->access()) {
    return;
  }

  $link = Link::fromTextAndUrl(t('here'), $url)->toString();
  \Drupal::messenger()->addMessage(t('You are viewing the published version. To view the latest draft version, click @here.', [
    '@here' => $link,
  ]), 'warning');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * In Joinup, solutions and releases share the same bundle uri. The distinction
 * between these two is that the releases always have the field
 * 'field_isr_is_version_of' filled, while solutions do not have this field.
 * This alter performs the following:
 * 1. If there is a filter on both the release and solution bundles, do nothing.
 * 2. If there is a filter on the solution, set the field
 * 'field_isr_is_version_of' as a field required to be absent.
 * 3. If there is a filter on the asset release, set the field
 * 'field_isr_is_version_of' as a required field.
 * 4. If there is a negative case on the bundles, perform cases 2 and 3 on
 * reverse.
 * 5. If none of these exist, as a filter, ignore it.
 */
function joinup_core_query_sparql_alter(AlterableInterface $query) {
  $conditions = $query->conditions();
  // If only one of the following are true, then add a condition on their
  // corresponding field. If both are set, then do not bother.
  $solution = FALSE;
  $release = FALSE;

  $entity_type = $query->getMetaData('entity_type');
  $bundle_key = $entity_type->getKey('bundle');
  foreach ($conditions as $condition) {
    if ($condition['field'] === $bundle_key) {
      $bundles = array_intersect(['solution', 'asset_release'], $condition['value']);
      if (empty($bundles) || count($bundles) !== 1) {
        continue;
      }
      $bundle = reset($bundles);
      if ($bundle === 'solution') {
        $solution = TRUE;
      }
      elseif ($bundle === 'asset_release') {
        $release = TRUE;
      }
    }
  }

  if ($solution && !$release) {
    $query->notExists('field_isr_is_version_of');
  }
  elseif (!$solution && $release) {
    $query->exists('field_isr_is_version_of');
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * - Make sure the standard formatter for links can be used for the link that is
 *   used to report inappropriate content.
 */
function joinup_core_field_formatter_info_alter(array &$info) {
  $info['link']['field_types'][] = 'report_link';
}

/**
 * Implements hook_element_info_alter().
 *
 * Override the validate handler for the datetime widget.
 */
function joinup_core_element_info_alter(array &$info) {
  if (isset($info['datetime'])) {
    $info['datetime']['#element_validate'] = [
      [
        Datetime::class,
        'validateDatetime',
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * File entities might have file system redirects coming from previous platform
 * versions, following this pattern (relative to files directory):
 * @code
 * legacy/path/to/image.png -> actual/path/to/image.png
 * @endcode
 * Such redirects are not cleared automatically by the Redirect module, when the
 * source file entity is deleted, thus we're fulfilling this task here.
 */
function joinup_core_file_delete(EntityInterface $entity) {
  /** @var \Drupal\file\FileInterface $entity */
  $uri = $entity->getFileUri();
  $scheme = StreamWrapperManager::getScheme($uri);
  if ($scheme !== 'public') {
    return;
  }

  $path = 'base:/' . \Drupal::service('stream_wrapper.public')->getDirectoryPath() . '/' . StreamWrapperManager::getTarget($uri);

  // Delete all redirects targeting this path.
  redirect_delete_by_path($path);
}

/**
 * Only index English content.
 *
 * Implements hook_search_api_index_items_alter().
 */
function joinup_core_search_api_index_items_alter(IndexInterface $index, array &$items) {
  foreach ($items as $item_id => $item) {
    list(, $raw_id) = Utility::splitCombinedId($item_id);
    list(, $langcode) = Utility::splitPropertyPath($raw_id);
    // Unset non-english content from the index.
    if ($langcode != 'en') {
      unset($items[$item_id]);
    }
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Strip off the h1, h5, h6 tag format options from the 'Format' dropdown.
 * This does not remove the ability of the user to enter or render these tags.
 *
 * @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-3682
 */
function joinup_core_editor_js_settings_alter(array &$settings) {
  if (isset($settings['editor']['formats']['content_editor']) && $settings['editor']['formats']['content_editor']['format'] === 'content_editor') {
    $options = explode(';', $settings['editor']['formats']['content_editor']['editorSettings']['format_tags']);
    $options = array_diff($options, ['h1', 'h5', 'h6']);
    $settings['editor']['formats']['content_editor']['editorSettings']['format_tags'] = implode(';', $options);
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function joinup_core_ckeditor_css_alter(array &$css) {
  $css[] = drupal_get_path('module', 'joinup_core') . '/css/wysiwyg.css';
}

/**
 * Implements hook_link_alter().
 */
function joinup_core_link_alter(&$variables) {
  // Such links are used to trigger the tour.
  if (isset($variables['options']['attributes']['data-drupal-tour-link'])) {
    $route_path = ltrim(\Drupal::routeMatch()->getRouteObject()->getPath(), '/');
    if (strpos($route_path, 'admin/structure/menu/') === FALSE) {
      // Add the tour trigger but not on menu administrative pages.
      $variables['options']['attributes']['class'][] = 'js-tour-start-button';
    }
  }
}

/**
 * Implements hook_config_readonly_whitelist_patterns().
 */
function joinup_core_config_readonly_whitelist_patterns() {
  return [
    // The 'support' menu is editable by moderators. This includes the menu
    // links static overrides config.
    'system.menu.front-page',
    'system.menu.support',
    'core.menu.static_menu_link_overrides',
  ];
}

/**
 * Implements hook_module_implements_alter().
 */
function joinup_core_module_implements_alter(array &$implementations, $hook) {
  switch ($hook) {
    case 'block_view_system_menu_block_alter':
      // Do not show the contextual links to edit menus. This functionality is
      // used very rarely but the contextual links menu causes visual clutter.
      unset($implementations['menu_ui']);
      break;
  }
}
