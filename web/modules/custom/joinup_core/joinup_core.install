<?php

/**
 * @file
 * Install, update, and uninstall functions for the Joinup core module.
 */

declare(strict_types = 1);

use Drupal\Core\Site\Settings;
use Drupal\user\Entity\User;

/**
 * Implements hook_requirements().
 *
 * Adds some additional security related warnings to the status report:
 * - UID1 should be blocked.
 * - Config Read Only should be enabled.
 */
function joinup_core_requirements($phase): array {
  $requirements = [];

  if ($phase === 'runtime') {
    // Check if UID 1 is blocked. Not allowing to log in as the root user
    // greatly decreases the chances of a privilege escalation bug to do real
    // damage on production.
    /** @var \Drupal\user\UserInterface $uid1 */
    $uid1 = User::load(1);
    if ($uid1->isActive()) {
      $requirements['joinup_core_root_user_blocked'] = [
        'title' => t('Root user access'),
        'description' => t('Allowing to log in as the root user on production is a security risk.'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Root user is not blocked'),
      ];
    }

    // Check that the Config Read Only module is enabled and activated. This
    // module ensures that the site configuration is immutable. This greatly
    // enhances the security of the production environment, and ensures that no
    // changes are made on production which can be overwritten on a subsequent
    // update.
    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
    $module_handler = \Drupal::service('module_handler');
    if (!$module_handler->moduleExists('config_readonly') || !Settings::get('config_readonly')) {
      $requirements['joinup_core_config_readonly'] = [
        'title' => t('Config Read Only'),
        'description' => t('On production environments the site configuration should be read-only.'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Config is writable'),
      ];

      // Check that database logging is disabled on production. Writing log
      // entries to the database on every request puts unnecessary load on the
      // database server.
      if ($module_handler->moduleExists('dblog')) {
        $requirements['joinup_core_dblog'] = [
          'title' => t('Database logging'),
          'description' => t('On production environments logs should be written to a file, not to the database.'),
          'severity' => REQUIREMENT_ERROR,
          'value' => t('Database logging is enabled'),
        ];
      }
    }

    // Ensure that a cache state inconsistency will not cause also
    // inconsistencies with the published revisions of the entities.
    //
    // @see: \joinup_core_post_update_set_news_default_version
    // @see: \Drupal\joinup_core\RequirementsHelper::getNodesWithProblematicRevisions
    // @see: ISAICP-5191
    $requirements['joinup_core_forward_revisions'] = [
      'title' => t('Forward published revisions'),
      'description' => t('In all content, the last published revision should be the latest of the published revisions.'),
    ];

    /** @var \Drupal\joinup_core\RequirementsHelper $requirements_helper */
    $requirements_helper = \Drupal::service('joinup_core.requirements_helper');
    $results = $requirements_helper->getNodesWithProblematicRevisions();
    if (!empty($results)) {
      $nids = array_keys($results);
      $error = t('Issues with the latest revision have been found in the following nid(s): :nids', [
        ':nids' => implode(', ', $nids),
      ]);
      $requirements['joinup_core_forward_revisions'] += [
        'severity' => REQUIREMENT_ERROR,
        'value' => $error,
      ];
    }
  }

  return $requirements;
}

/**
 * Remove message history for obsolete notification types.
 */
function joinup_core_update_0106400(): void {
  $removed_templates = [
    'sol_request_deletion',
    'sol_deletion_approved',
    'sol_deletion_reject',
    'sol_deletion_no_approval',
  ];

  $connection = \Drupal::database();
  foreach (['message', 'message_field_data'] as $table) {
    $connection
      ->delete($table)
      ->condition('template', $removed_templates, 'IN')
      ->execute();
  }
}
