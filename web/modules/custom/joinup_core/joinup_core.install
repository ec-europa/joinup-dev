<?php

/**
 * @file
 * Install, uninstall, schema and requirements hook for Joinup.
 */

declare(strict_types = 1);

use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Site\Settings;
use Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlArg;
use Drupal\sparql_entity_storage\Entity\SparqlMapping;
use Drupal\user\Entity\User;

/**
 * Implements hook_requirements().
 *
 * Adds some additional security related warnings to the status report:
 * - UID1 should be blocked.
 * - Config Read Only should be enabled.
 */
function joinup_core_requirements($phase) {
  $requirements = [];

  if ($phase === 'runtime') {
    // Check if UID 1 is blocked. Not allowing to log in as the root user
    // greatly decreases the chances of a privilege escalation bug to do real
    // damage on production.
    /** @var \Drupal\user\UserInterface $uid1 */
    $uid1 = User::load(1);
    if (!$uid1->isBlocked()) {
      $requirements['joinup_core_root_user_blocked'] = [
        'title' => t('Root user access'),
        'description' => t('Allowing to log in as the root user on production is a security risk.'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Root user is not blocked'),
      ];
    }

    // Check that the Config Read Only module is enabled and activated. This
    // module ensures that the site configuration is immutable. This greatly
    // enhances the security of the production environment, and ensures that no
    // changes are made on production which can be overwritten on a subsequent
    // update.
    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
    $module_handler = \Drupal::service('module_handler');
    if (!$module_handler->moduleExists('config_readonly') || !Settings::get('config_readonly')) {
      $requirements['joinup_core_config_readonly'] = [
        'title' => t('Config Read Only'),
        'description' => t('On production environments the site configuration should be read-only.'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Config is writable'),
      ];

      // Check that database logging is disabled on production. Writing log
      // entries to the database on every request puts unnecessary load on the
      // database server.
      if ($module_handler->moduleExists('dblog')) {
        $requirements['joinup_core_dblog'] = [
          'title' => t('Database logging'),
          'description' => t('On production environments logs should be written to a file, not to the database.'),
          'severity' => REQUIREMENT_ERROR,
          'value' => t('Database logging is enabled'),
        ];
      }
    }

    // Ensure that a cache state inconsistency will not cause also
    // inconsistencies with the published revisions of the entities.
    //
    // @see: \joinup_core_post_update_set_news_default_version
    // @see: \Drupal\joinup_core\RequirementsHelper::getNodesWithProblematicRevisions
    // @see: ISAICP-5191
    $requirements['joinup_core_forward_revisions'] = [
      'title' => t('Forward published revisions'),
      'description' => t('In all content, the last published revision should be the latest of the published revisions.'),
    ];

    /** @var \Drupal\joinup_core\RequirementsHelper $requirements_helper */
    $requirements_helper = \Drupal::service('joinup_core.requirements_helper');
    $results = $requirements_helper->getNodesWithProblematicRevisions();
    if (!empty($results)) {
      $nids = array_keys($results);
      $error = t('Issues with the latest revision have been found in the following nid(s): :nids', [
        ':nids' => implode(', ', $nids),
      ]);
      $requirements['joinup_core_forward_revisions'] += [
        'severity' => REQUIREMENT_ERROR,
        'value' => $error,
      ];
    }

    // Ensure that no solutions are orphaned.
    $results = $requirements_helper->getOrphanedSolutions();
    if (!empty($results)) {
      $value = t('The following solutions were found without an affiliation: :errors', [
        ':errors' => implode("\n", array_values($results)),
      ]);
      $severity = REQUIREMENT_ERROR;
    }
    else {
      $value = t('All solutions have an affiliated collection.');
      $severity = REQUIREMENT_OK;
    }
    $requirements['joinup_core_no_orphaned_solutions'] = [
      'title' => t('Orphaned solutions'),
      'description' => t('All solutions should have an affiliated collection.'),
      'severity' => $severity,
      'value' => $value,
    ];
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function joinup_core_install() {
  // Disable the warning about rebuilding node access. This is needlessly set
  // in the install hook of the View Unpublished module.
  // @todo Remove this once the bug is fixed.
  // @see https://www.drupal.org/node/2837685
  node_access_needs_rebuild(FALSE);
}

/**
 * Enable the Config Sync module.
 */
function joinup_core_update_8100(&$sandbox) {
  \Drupal::service('module_installer')->install(['config_sync']);
}

/**
 * Delete the queue of the cached_computed_field module.
 */
function joinup_core_update_8101() {
  $queue = \Drupal::queue('cached_computed_field_expired_fields', FALSE);
  $queue->deleteQueue();
}

/**
 * Update the predicates for fields 'solution_type' and 'test_resource_type'.
 */
function joinup_core_update_8102() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://purl.org/dc/terms/type> ?object } }
INSERT { GRAPH ?g { ?subject <http://joinup.eu/test_resource_type> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://purl.org/dc/terms/type> ?object } .
  VALUES ?g {
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/solution/published>
    <http://joinup.eu/asset_release/draft>
    <http://joinup.eu/asset_release/published>
  }
}
QUERY;
  $connection->query($query);
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://purl.org/dc/terms/DCMIType> ?object } }
INSERT { GRAPH ?g { ?subject <http://purl.org/dc/terms/type> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://purl.org/dc/terms/DCMIType> ?object } .
  VALUES ?g {
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/solution/published>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Fix the spatial coverage predicate for collections and solutions.
 */
function joinup_core_update_8103() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#spatial> ?object } }
INSERT { GRAPH ?g { ?subject <http://purl.org/dc/terms/spatial> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#spatial> ?object } .
  VALUES ?g {
    <http://joinup.eu/collection/published>
    <http://joinup.eu/collection/draft>
    <http://joinup.eu/solution/published>
    <http://joinup.eu/solution/draft>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Fix the documentation predicate.
 */
function joinup_core_update_8104() {
  /** @var \Drupal\Core\Database\Connection $query */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://xmlns.com/foaf/spec/#term_page> ?object } }
INSERT { GRAPH ?g { ?subject <http://xmlns.com/foaf/0.1/page> ?object } }
WHERE {
  GRAPH ?g { ?subject <http://xmlns.com/foaf/spec/#term_page> ?object } .
  VALUES ?g {
    <http://joinup.eu/solution/published>
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/asset_release/published>
    <http://joinup.eu/asset_release/draft>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Fix the release notes predicate.
 */
function joinup_core_update_8105() {
  /** @var \Drupal\Core\Database\Connection $query */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <https://www.w3.org/TR/vocab-adms/#adms-versionnotes> ?object } }
INSERT { GRAPH ?g { ?subject <http://www.w3.org/ns/adms#versionNotes> ?object } }
WHERE {
  GRAPH ?g { ?subject <https://www.w3.org/TR/vocab-adms/#adms-versionnotes> ?object } .
  VALUES ?g {
    <http://joinup.eu/asset_release/published>
    <http://joinup.eu/asset_release/draft>
  }
}
QUERY;
  $connection->query($query);
}

/**
 * Update the type of collections, solutions, releases and distributions.
 */
function joinup_core_update_8106() {
  $entity_type_id = 'rdf_entity';
  $connection = Database::getConnection('default', 'sparql_default');
  $bundles = [
    'collection' => [
      'old_uri' => 'http://www.w3.org/ns/adms#AssetRepository',
      'new_uri' => 'http://www.w3.org/ns/dcat#Catalog',
    ],
    'solution' => [
      'old_uri' => 'http://www.w3.org/ns/adms#Asset',
      'new_uri' => 'http://www.w3.org/ns/dcat#Dataset',
    ],
    'asset_release' => [
      'old_uri' => 'http://www.w3.org/ns/adms#Asset',
      'new_uri' => 'http://www.w3.org/ns/dcat#Dataset',
    ],
    'asset_distribution' => [
      'old_uri' => 'http://www.w3.org/ns/adms#AssetDistribution',
      'new_uri' => 'http://www.w3.org/ns/dcat#Distribution',
    ],
  ];

  $bundle_predicate = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
  foreach ($bundles as $bundle => $properties) {
    $sparql_mapping = SparqlMapping::loadByName($entity_type_id, $bundle);

    // Update the mappings.
    $sparql_mapping->setRdfType($properties['new_uri'])->save();

    // Update the existing entities.
    $graphs = $sparql_mapping->getGraphs();
    foreach ($graphs as $graph_uri) {
      // In SPARQL, there is no UPDATE query. For updates, one has to first
      // delete and then re insert.
      $query_string = <<<QUERY
WITH <{$graph_uri}>
DELETE { ?entity <{$bundle_predicate}> <{$properties['old_uri']}> }
INSERT { ?entity <{$bundle_predicate}> <{$properties['new_uri']}> }
WHERE { ?entity <{$bundle_predicate}> <{$properties['old_uri']}> }
QUERY;
      $connection->query($query_string);
    }
  }
}

/**
 * Add the dct:Location class to the country terms [ISAICP-4566].
 */
function joinup_core_update_8107() {
  $connection = Database::getConnection('default', 'sparql_default');
  $query = <<<QUERY
WITH <http://countries-skos>
INSERT { ?entity <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://purl.org/dc/terms/Location> }
WHERE { ?entity a <http://www.w3.org/2004/02/skos/core#Concept> }
QUERY;
  $connection->query($query);
}

/**
 * Convert landing page values into a resource [ISAICP-4568].
 */
function joinup_core_update_8108() {
  /** @var \Drupal\Core\Database\Connection $query */
  $connection = \Drupal::service('sparql_endpoint');
  $query = <<<QUERY
DELETE { GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#landingPage> ?object } }
INSERT { GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#landingPage> ?iri } }
WHERE {
  GRAPH ?g { ?subject <http://www.w3.org/ns/dcat#landingPage> ?object } .
  FILTER(!isUri(?object)) .
  VALUES ?g {
    <http://joinup.eu/solution/published>
    <http://joinup.eu/solution/draft>
    <http://joinup.eu/asset_release/published>
    <http://joinup.eu/asset_release/draft>
  }
  BIND(IRI(?object) as ?iri) .
}
QUERY;
  $connection->query($query);
}

/**
 * Install the 'solr_field_type' entity type definition.
 */
function joinup_core_update_8109() {
  $entity_type = \Drupal::entityTypeManager()->getDefinition('solr_field_type');
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
}

/**
 * Install the 'Published on' field storage definition.
 */
function joinup_core_update_8110() {
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition(
    'published_at',
    'node',
    'publication_date',
    BaseFieldDefinition::create('published_at')
      ->setLabel(t('Published on'))
      ->setDescription(t('Keep the publication timestamp for each node.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', ['type' => 'hidden'])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'publication_date_timestamp',
        'weight' => 10,
      ])
      ->setDisplayConfigurable('form', TRUE)
  );
}

/**
 * Fix 'default' graph UUID.
 */
function joinup_core_update_8111(): void {
  // If a config have a different UUID in active store compared to staging, the
  // config is deleted and recreated. But the 'default' graph cannot be deleted,
  // so we avoid deletion by manually setting its UUID.
  // @see \Drupal\Core\Config\StorageComparer::addChangelistUpdate()
  // @see \Drupal\sparql_entity_storage\Entity\SparqlGraph::delete()
  \Drupal::configFactory()->getEditable('sparql_entity_storage.graph.default')
    ->set('uuid', 'adb4491f-7cbc-46d9-975d-41bf83b14637')
    ->save();
}

/**
 * Stats #1: Collect download counts.
 */
function joinup_core_update_8112(array &$sandbox): ?string {
  $db = \Drupal::database();
  /** @var \Drupal\sparql_entity_storage\Database\Driver\sparql\ConnectionInterface $sparql */
  $sparql = \Drupal::service('sparql.endpoint');

  if (!isset($sandbox['current'])) {
    // Create a temporary table to store the collected count values in order to
    // be retrieved after 'meta_entity' module is installed. Storing all the
    // values in a state variable could exhaust the memory.
    $schema = $db->schema();
    if ($schema->tableExists('joinup_core_stats_update_temp')) {
      $schema->dropTable('joinup_core_stats_update_temp');
    }
    $schema->createTable('joinup_core_stats_update_temp', [
      'fields' => [
        'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
        'entity_type_id' => ['type' => 'varchar_ascii', 'length' => 20],
        'entity_id' => ['type' => 'varchar_ascii', 'length' => 2048],
        'counter' => ['type' => 'int', 'unsigned' => TRUE],
      ],
      'primary key' => ['id'],
    ]);

    $sandbox['current'] = '';
    $sandbox['progress'] = 0;
    $sandbox['ids'] = array_values(\Drupal::entityQuery('rdf_entity')
      ->condition('rid', 'asset_distribution')
      ->execute());
  }

  $ids = array_splice($sandbox['ids'], 0, 500);
  $sandbox['#finished'] = (int) empty($ids);

  if (!$sandbox['#finished']) {
    $uris = SparqlArg::serializeUris($ids, ' ');
    // We're using a direct SPARQL query for performance considerations.
    $results = $sparql->query("SELECT ?entity_id ?counter
FROM <http://joinup.eu/asset_distribution/published>
WHERE {
  ?entity_id <http://schema.org/userInteractionCount> ?counter .
  VALUES ?entity_id { {$uris} }
}");
    $items = [];
    foreach ($results as $result) {
      $items[(string) $result->entity_id] = (int) (string) $result->counter;
    }

    $insert = $db->insert('joinup_core_stats_update_temp')
      ->fields(['entity_type_id', 'entity_id', 'counter']);
    foreach ($ids as $id) {
      $counter = $items[$id] ?? 0;
      $insert->values([
        'entity_type_id' => 'rdf_entity',
        'entity_id' => $id,
        'counter' => $counter,
      ]);
      $sandbox['current'] = $id;
      $sandbox['progress']++;
    }
    $insert->execute();

    return "Collected {$sandbox['progress']} distribution download counts.";
  }

  return "Finished collecting {$sandbox['progress']} distribution download counts.";
}

/**
 * Stats #2: Collect visit counts.
 */
function joinup_core_update_8113(array &$sandbox): ?string {
  $db = \Drupal::database();

  if (!isset($sandbox['current'])) {
    $sandbox['current'] = 0;
    $sandbox['progress'] = 0;
    $sandbox['nids'] = array_values(\Drupal::entityQuery('node')
      ->condition('type', ['discussion', 'document', 'event', 'news'], 'IN')
      ->execute());
  }

  $nids = array_splice($sandbox['nids'], 0, 500);
  $sandbox['#finished'] = (int) empty($nids);

  if (!$sandbox['#finished']) {
    // We're using a direct SQL query for performance considerations.
    $items = $db->select('node__field_visit_count')
      ->fields('node__field_visit_count', ['entity_id', 'field_visit_count_value'])
      ->condition('entity_id', $nids, 'IN')
      ->execute()
      ->fetchAllKeyed();

    $insert = $db->insert('joinup_core_stats_update_temp')
      ->fields(['entity_type_id', 'entity_id', 'counter']);
    foreach ($nids as $nid) {
      $counter = $items[$nid] ?? 0;
      $insert->values([
        'entity_type_id' => 'node',
        'entity_id' => $nid,
        'counter' => (int) $counter,
      ]);
      $sandbox['current'] = $nid;
      $sandbox['progress']++;
    }
    $insert->execute();

    return "Collected {$sandbox['progress']} node visit counts.";
  }

  return "Finished collecting {$sandbox['progress']} node visit counts.";
}

/**
 * Fix entities with a single published revision.
 */
function joinup_core_update_8114(&$sandbox) {
  module_load_include('install', 'publication_date');
  _publication_date_populate_database_field();
}

/**
 * Convert message entities of the obsolete type.
 */
function joinup_core_update_8115(&$sandbox) {
  $database = \Drupal::database();
  $mids_approved = $database->query("SELECT mid FROM message_field_data as m where m.template = 'og_membership_decision' AND m.arguments LIKE '%s:8:\"approved\"%'")->fetchCol();
  $mids_rejected = $database->query("SELECT mid FROM message_field_data as m where m.template = 'og_membership_decision' AND m.arguments NOT LIKE '%s:8:\"approved\"%'")->fetchCol();

  $database->update('message')
    ->fields(['template' => 'og_membership_approve'])
    ->condition('mid', $mids_approved, 'IN')
    ->execute();
  $database->update('message')
    ->fields(['template' => 'og_membership_reject'])
    ->condition('mid', $mids_rejected, 'IN')
    ->execute();

  $database->update('message_field_data')
    ->fields(['template' => 'og_membership_approve'])
    ->condition('mid', $mids_approved, 'IN')
    ->execute();
  $database->update('message_field_data')
    ->fields(['template' => 'og_membership_reject'])
    ->condition('mid', $mids_rejected, 'IN')
    ->execute();
}

/**
 * Implements hook_update_N().
 */
function joinup_core_update_015401(&$sandbox) {
  //
}

/**
 * Implements hook_update_N().
 */
function joinup_core_update_015902(&$sandbox) {
  //
}
