<?php

/**
 * @file
 * Main functions and hook implementations of the Contact Form module.
 */

declare(strict_types = 1);

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\contact_form\ContactFormEvents;
use Drupal\joinup_notification\Event\NotificationEvent;
use Drupal\user\Entity\User;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This changes the contact form which is provided by the
 * 'contact_form_submission' message template:
 *  - Prefill the user's name and e-mail address if the user is logged in.
 *  - Only show the 'Page URL' field when the 'bug' or 'report' category is
 *    chosen.
 *  - Change the text of the submit button to "Submit".
 *  - Add a submit handler that sends notifications to moderators and shows a
 *    success message informing the user that their message has been
 *    successfully sent.
 */
function contact_form_form_message_contact_form_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['created']['#access'] = FALSE;

  // Fill in the credentials if the user is logged in.
  $user = \Drupal::currentUser();
  if ($user->isAuthenticated()) {
    $user = User::load($user->id());
    $form['field_contact_first_name']['widget'][0]['value']['#default_value'] = $user->get('field_user_first_name')->value;
    $form['field_contact_last_name']['widget'][0]['value']['#default_value'] = $user->get('field_user_family_name')->value;
    $form['field_contact_email']['widget'][0]['value']['#default_value'] = $user->getEmail();
  }

  // Only show the 'Page URL' field when the 'bug' or 'report' category is
  // chosen.
  $form['field_contact_url']['#states'] = [
    'visible' => [
      [
        [':input[name="field_contact_category"]' => ['value' => 'bug']],
        [':input[name="field_contact_category"]' => ['value' => 'report']],
      ],
    ],
  ];

  // If honeypot is enabled, add protection to the form.
  if (function_exists('honeypot_add_form_protection')) {
    honeypot_add_form_protection(
      $form,
      $form_state,
      ['honeypot'/* temporary disabled in PoC ISAICP-4781, 'time_restriction'*/]
    );
  }

  // Change the text of the submit button to "Submit".
  $form['actions']['submit']['#value'] = t('Submit');

  // Add a submit handler that sends a notification to moderators and shows a
  // success message informing the user that their message has been successfully
  // sent.
  $form['actions']['submit']['#submit'][] = 'contact_form_form_message_contact_form_submission_submit';
}

/**
 * Form submission handler for the contact form.
 */
function contact_form_form_message_contact_form_submission_submit(&$form, FormStateInterface $form_state) {
  $event = new NotificationEvent('contact', $form_state->getFormObject()->getEntity());

  $event_dispatcher = \Drupal::getContainer()->get('event_dispatcher');
  $event_dispatcher->dispatch(ContactFormEvents::CONTACT_FORM_EVENT, $event);

  if ($event->isSuccessful()) {
    \Drupal::messenger()->addStatus(t('Your message has been submitted. Thank you for your feedback.'));
  }
  else {
    \Drupal::messenger()->addError(t('The message submission failed.'));
    \Drupal::logger('contact')->error('Cannot send contact form message.', [
      'message' => $event->getEntity()->toArray(),
    ]);
  }
}

/**
 * Implements hook_token_info().
 */
function contact_form_token_info() {
  $info['tokens']['site']['contact-form'] = [
    'name' => t('The contact form of the site'),
    'description' => t('The absolute url of the contact form of the site.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function contact_form_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type === 'site' && !empty($tokens['contact-form'])) {
    $replacements[$tokens['contact-form']] = \Drupal::urlGenerator()->generateFromRoute('contact_form.contact_page', [], ['absolute' => TRUE]);
  }
  return $replacements;
}

/**
 * Implements hook_mail_alter().
 *
 * Alter the sender of outgoing mails sent from the contact form so they will be
 * handled by support desk software and turned into tickets.
 *
 * @todo This doesn't belong in the Joinup distribution and should be removed.
 *
 * @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-3988
 */
function contact_form_mail_alter(&$message) {
  if ($message['key'] !== 'contact_form_submission') {
    return;
  }

  $from = \Drupal::service('config.factory')->get('contact_form.settings')->get('contact_form_from');
  if (!empty($from) && \Drupal::service('email.validator')->isValid($from)) {
    $message['from'] = $from;
  }
}

/**
 * Implements hook_mail().
 *
 * Send a notification to the contact form submitter.
 */
function contact_form_mail($key, &$message, $params) {
  if ($key !== 'contact_form_sender') {
    return;
  }

  /** @var \Drupal\message\MessageInterface $entity */
  $entity = $params['message'];
  $name = "{$entity->field_contact_first_name->value} {$entity->field_contact_last_name->value}";

  $message['subject'] = t('Joinup: Contact form notification');

  $message['body'][] = t('Dear @name', ['@name' => $name]);
  $message['body'][] = t('Thank you for submitting your message to the Joinup Support.');

  if ($entity->field_contact_copy->value) {
    $message['body'][] = t('This is the message you submitted through the online form:');
    $subject = check_markup($entity->field_contact_subject->value, $entity->field_contact_subject->format);
    $subject = PlainTextOutput::renderFromHtml($subject);
    $message['body'][] = t('Subject: %subject', ['%subject' => $subject]);
    $message['body'][] = t('Content:');
    $message['body'][] = '<blockquote>';
    $message['body'][] = check_markup($entity->field_contact_message->value, $entity->field_contact_message->format);
    $message['body'][] = '</blockquote>';
    $message['body'][] = t('Thank you for your interest, we will reply as soon as possible.');
  }
  else {
    $message['body'][] = t('We will reply as soon as possible.');
  }

  $message['body'][] = t('Kind regards,');
  $message['body'][] = t('The Joinup Support Team');

  // Send as HTML.
  $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function contact_form_message_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() !== 'contact_form_submission') {
    return AccessResult::neutral();
  }
  // Allow users to access the contact form messages and its attachments.
  return AccessResult::allowedIf($account->hasPermission('access contact form messages'));
}
