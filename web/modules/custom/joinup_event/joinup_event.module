<?php

/**
 * @file
 * Hook implementations for the Joinup Event module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\TypedData\Exception\MissingDataException;
use Drupal\entityqueue\EntitySubqueueInterface;
use Drupal\joinup_event\Entity\Event;
use Drupal\joinup_event\Entity\EventInterface;
use Drupal\joinup_event\Plugin\Field\FieldFormatter\WebtoolsMapFormatter;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function joinup_event_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entity_type, string $bundle): void {
  if ($entity_type->id() == 'node' && $bundle == 'event') {
    if (!empty($fields['field_short_title'])) {
      $fields['field_short_title']->addConstraint('UniqueField');
    }
    if (!empty($fields['title'])) {
      $fields['title']->addConstraint('UniqueFieldInBundle', ['bundles' => ['event']]);
    }
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function joinup_event_entity_bundle_info_alter(&$bundles) {
  if (!empty($bundles['node']['event'])) {
    $bundles['node']['event']['class'] = Event::class;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_event_entity_type_alter(array &$entity_types): void {
  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_types */
  if (isset($entity_types['node'])) {
    $entity_types['node']->addConstraint('EventLocationConstraint');
  }
}

/**
 * Implements hook_theme().
 */
function joinup_event_theme($existing, $type, $theme, $path) {
  return [
    // Use a custom template for the highlighted event on the homepage.
    'node__event__highlighted_event' => [
      'base hook' => 'node',
      'template' => 'node--event--highlighted-event',
    ],
  ];
}

/**
 * Prepares variables for the highlighted event template.
 *
 * Default template: node--event--highlighted-event.html.twig.
 *
 * The highlighted event is displayed on the homepage and is managed through an
 * entityqueue. It has a number of additional fields (header text and a call to
 * action button) which are stored on the entityqueue object. This retrieves
 * this data and makes it available for the template.
 *
 * @param array $variables
 *   An associative array of template variables as prepared by
 *   template_preprocess_node().
 *
 * @see hook_entity_type_build()
 * @see \Drupal\Core\Field\BaseFieldDefinition::setDisplayConfigurable()
 */
function joinup_event_preprocess_node__event__highlighted_event(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  $subqueue = \Drupal::entityTypeManager()->getStorage('entity_subqueue')->load('highlighted_event');
  if ($subqueue instanceof EntitySubqueueInterface) {
    if ($subqueue->getItemPosition($node) !== FALSE) {
      // Define a function to retrieve the main values from subqueue fields.
      $get_value = function (string $field_name) use ($subqueue) {
        $field_item_list = $subqueue->get($field_name);
        if ($field_item_list instanceof FieldItemListInterface) {
          try {
            $field_item = $field_item_list->first();
          }
          catch (MissingDataException $e) {
            return NULL;
          }
          if ($field_item instanceof FieldItemInterface) {
            $property_name = $field_item::mainPropertyName();
            return $field_item->$property_name;
          }
        }
        return NULL;
      };

      $variables['header'] = $get_value('header');
      $variables['link_text'] = $get_value('link_text') ?? t('Read more');
      $links_to_external_url = (bool) $get_value('link_to_external_url');
      $external_url = $get_value('external_url');
      if ($links_to_external_url && $external_url) {
        $variables['url'] = $external_url;
      }
    }
  }
}

/**
 * Implements template_preprocess_fieldset().
 */
function joinup_event_preprocess_fieldset(array &$variables): void {
  // Add an "asterisk" to the Event Location Field Group.
  if (isset($variables['element']['#id']) && $variables['element']['#id'] === 'group-event-location') {
    $variables['legend_span']['attributes']->addClass('js-form-required form-required');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function joinup_event_form_entity_subqueue_highlighted_event_edit_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['external_url']['#states']['visible'][':input[name="link_to_external_url[value]"]']['checked'] = TRUE;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function joinup_event_field_formatter_info_alter(array &$info) {
  if (isset($info['oe_webtools_maps_map'])) {
    $info['oe_webtools_maps_map']['class'] = WebtoolsMapFormatter::class;
  }
}

/**
 * Implements hook_token_info_alter().
 */
function joinup_event_token_info_alter(&$info) {
  $info['tokens']['node']['event_url'] = [
    'name' => t('Url of the event'),
    'description' => t('The website provided if available or the Joinup event URL.'),
  ];
}

/**
 * Implements hook_tokens().
 */
function joinup_event_tokens($type, array $tokens, array $data = [], array $options = [], ?BubbleableMetadata $bubbleable_metadata = NULL) {
  $replacements = [];

  if ($type == 'node' && !empty($data['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Returns the event URL. If the event has a web URL, then this is the
        // event URL. Otherwise use the Joinup URL.
        case 'event_url':
          if ($node->isNew() || !$node instanceof EventInterface) {
            break;
          }

          $web_url = $node->getWebUrl();
          $replacements[$original] = $web_url ?
            $web_url->toString() :
            $node->toUrl('canonical', ['absolute' => TRUE])->toString();
      }
    }
  }

  return $replacements;
}
