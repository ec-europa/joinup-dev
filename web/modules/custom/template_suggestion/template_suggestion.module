<?php

/**
 * @file
 * Hook implementations for the Template suggestion module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Allow adding template suggestions for each field.
 */
function template_suggestion_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element = [];

  $element['template_suggestion'] = [
    '#type' => 'textfield',
    '#title' => t('Template suggestion'),
    '#size' => 64,
    '#field_prefix' => 'field__',
    '#default_value' => $plugin->getThirdPartySetting('template_suggestion', 'template_suggestion'),
  ];

  return $element;
}

/**
 * Implements hook_theme_suggestions_field_alter().
 *
 * Add template suggestions based on the configuration added in the formatter.
 */
function template_suggestion_theme_suggestions_field_alter(array &$suggestions, array &$variables) {
  $element = $variables['element'];

  if (!empty($element['#entity_type']) && !empty($element['#bundle']) && !empty($element['#field_name'])) {
    $entity_type = $element['#entity_type'];
    $bundle = $element['#bundle'];
    $field_name = $element['#field_name'];
    // View mode is not strictly required for the functionality.
    $view_mode = !empty($element['#view_mode']) ? $element['#view_mode'] : 'default';

    // Load the related display. If not found, try to load the default as
    // fallback. This is needed because displays like the "full" one might not
    // be enabled but still used for rendering.
    // @see \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplays()
    $display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.' . $view_mode);
    if (empty($display) && $view_mode !== 'default') {
      $display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.default');
    }

    if (!empty($display)) {
      $component = $display->getComponent($field_name);
      if (!empty($component['third_party_settings']['template_suggestion']['template_suggestion'])) {
        $suggestion = 'field__' . $component['third_party_settings']['template_suggestion']['template_suggestion'];
        $suggestions[] = $suggestion;
        $suggestions[] = $suggestion . '__' . $entity_type;
        $suggestions[] = $suggestion . '__' . $entity_type . '__' . $bundle;
        $suggestions[] = $suggestion . '__' . $entity_type . '__' . $bundle . '__' . $field_name;
        $suggestions[] = $suggestion . '__' . $entity_type . '__' . $bundle . '__' . $field_name . '__' . $view_mode;

        // Add the custom template suggestion back in the element to allow other
        // modules to have this information.
        $variables['element']['#template_suggestion_template_suggestion'] = $suggestion;
      }
    }
  }
}
