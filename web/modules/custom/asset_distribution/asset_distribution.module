<?php

/**
 * @file
 * Contains asset_distribution.module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\Core\Form\FormStateInterface;
use Drupal\asset_distribution\DistributionParentFieldItemList;
use Drupal\asset_distribution\Entity\AssetDistribution;
use Drupal\file_url\FileUrlHandler;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\rdf_entity\RdfInterface;
use Drupal\search_api\Plugin\search_api\datasource\ContentEntity;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function asset_distribution_entity_bundle_info_alter(&$bundles) {
  if (!empty($bundles['rdf_entity']['asset_distribution'])) {
    $bundles['rdf_entity']['asset_distribution']['class'] = AssetDistribution::class;
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function asset_distribution_entity_bundle_field_info(EntityTypeInterface $entity_type, string $bundle, array $base_field_definitions): array {
  if ($entity_type->id() === 'rdf_entity' && $bundle === 'asset_distribution') {
    // Add reference to the parent entity (solution or asset_release).
    return [
      'parent' => BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Parent'))
        ->setName('parent')
        ->setDescription(t('The distribution parent. Could be a solutions or a releases.'))
        ->setTargetEntityTypeId('rdf_entity')
        ->setTargetBundle('asset_distribution')
        ->setSetting('target_type', 'rdf_entity')
        ->setCardinality(1)
        ->setComputed(TRUE)
        ->setClass(DistributionParentFieldItemList::class),
    ];
  }
  return [];
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function asset_distribution_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entity_type, string $bundle): void {
  if ($entity_type->id() === 'rdf_entity' && $bundle === 'asset_distribution') {
    // Make sure a distribution's title is unique in its release.
    if (!empty($fields['label'])) {
      $fields['label']->addConstraint('UniqueAssetDistributionTitle', []);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function asset_distribution_form_rdf_entity_asset_distribution_form_alter(&$form, FormStateInterface $form_state) {
  $rdf = \Drupal::routeMatch()->getParameter('rdf_entity');

  // Bail out if the solution or asset_release is not present on the route.
  // Since this form is only intended to be used in the context of a solution or
  // release, there is no field provided for it. Without a solution or a release
  // the asset distribution will be dangling and won't be reachable.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-4581
  // @todo Implement this by subscribing to RDF entity rdf_entity.rdf_add route
  // and deny the access for asset_distribution, in ISAICP-4581.
  if (!$rdf || !$rdf instanceof RdfInterface || !in_array($rdf->bundle(), ['asset_release', 'solution'])) {
    throw new AccessDeniedHttpException('Distributions can only be created in context of a solution or an asset release.');
  }
}

/**
 * Implements hook_sparql_bundle_load_alter().
 *
 * There is an initial check whether the bundle is empty because the method
 * that invokes this hook is also called for taxonomies and the bundle is
 * currently being skipped for the taxonomies.
 */
function asset_distribution_sparql_bundle_load_alter($entity_values, &$bundles) {
  if (count($bundles) > 1 && in_array('solution', $bundles)) {
    if (isset($entity_values['http://purl.org/dc/terms/isVersionOf'])) {
      $bundles = array_diff($bundles, ['solution']);
    }
    else {
      $bundles = array_diff($bundles, ['asset_release']);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function asset_distribution_rdf_entity_presave(RdfInterface $distribution) {
  if ($distribution->bundle() !== 'asset_distribution') {
    return;
  }

  if (!empty($file_id = $distribution->field_ad_access_url->target_id)) {
    /** @var \Drupal\file\FileInterface $file */
    if ($file = FileUrlHandler::urlToFile($file_id)) {
      if (!FileUrlHandler::isRemote($file)) {
        // Set the file size field.
        $distribution->get('field_ad_file_size')->setValue($file->getSize());

        // Set the file format field.
        $tid = asset_distribution_get_file_type_term_by_mime($file->getMimeType());
        if ($tid) {
          $distribution->get('field_ad_format')->setValue($tid);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function asset_distribution_rdf_entity_insert(RdfInterface $distribution): void {
  if ($distribution->bundle() === 'asset_distribution') {
    // Invalidate the solution cache.
    asset_distribution_invalidate_solution_cache($distribution);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function asset_distribution_rdf_entity_update(RdfInterface $distribution): void {
  if ($distribution->bundle() !== 'asset_distribution') {
    return;
  }

  // Invalidate the solution cache.
  asset_distribution_invalidate_solution_cache($distribution);

  // Reindex the distribution's parent. Note that this is done automatically
  // on distribution insert, in DistributionParentFieldItemList::postSave(),
  // by saving the parent after a new distribution has been saved.
  // @see \Drupal\asset_distribution\DistributionParentFieldItemList::postSave()
  /** @var \Drupal\rdf_entity\RdfInterface $parent */
  if (!$distribution->get('parent')->isEmpty() && ($parent = $distribution->get('parent')->entity)) {
    ContentEntity::indexEntity($parent);
  }
}

/**
 * Invalidates the distribution solution cache.
 *
 * @param \Drupal\rdf_entity\RdfInterface $distribution
 *   The distribution being inserted/updated.
 */
function asset_distribution_invalidate_solution_cache(RdfInterface $distribution): void {
  /** @var \Drupal\rdf_entity\RdfInterface $solution */
  if ($solution = Rdf::load($distribution->get('og_audience')->target_id)) {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator */
    $cache_tags_invalidator = \Drupal::service('cache_tags.invalidator');
    // Solutions show the licence of their releases in the solution header.
    // Clear the cache of the solution this release belongs to so any licence
    // change is picked up.
    $cache_tags_invalidator->invalidateTags($solution->getCacheTagsToInvalidate());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Provides a promoted link for each distribution on the release overview page
 * because there is only one 'Download' button displayed.
 *
 * @todo: The behavior of the multi value file field is recorded and will be
 * implemented in
 * https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-2925.
 */
function asset_distribution_preprocess_rdf_entity(&$variables) {
  /** @var \Drupal\rdf_entity\RdfInterface $rdf_entity */
  $rdf_entity = $variables['rdf_entity'];
  if ($rdf_entity->bundle() !== 'asset_distribution') {
    return;
  }

  // Make some alterations for the Release download page.
  // @see \Drupal\asset_release\Controller\AssetReleaseController::overview()
  if ($variables['view_mode'] === 'compact') {
    // There is only one available download link so we set the one available
    // here.
    if (!empty($rdf_entity->field_ad_access_url->first()->uri)) {
      $variables['content']['promoted_download'] = $rdf_entity->field_ad_access_url->first()->uri;
    }

    // Provide a flag if this is a standalone distribution.
    $variables['is_standalone'] = !empty($rdf_entity->standalone);
  }
}

/**
 * Returns the ID of the 'file_type' term given a mime type.
 *
 * @param string $mime_type
 *   The mime type for which to locate the 'file_type' term.
 *
 * @return string|null
 *   The term ID as URI or NULL, if the term doesn't exists.
 */
function asset_distribution_get_file_type_term_by_mime($mime_type) {
  /** @var \Drupal\sparql_entity_storage\Database\Driver\sparql\ConnectionInterface $sparql */
  $sparql = \Drupal::service('sparql_endpoint');

  $query = <<<QUERY
SELECT ?entity_id
WHERE {
  ?entity_id <http://publications.europa.eu/ontology/authority/op-mapped-code> ?op_mime_type .
  ?op_mime_type <http://purl.org/dc/elements/1.1/source> "manifestation-type-cellar" .
  ?op_mime_type <http://publications.europa.eu/ontology/authority/legacy-code> "$mime_type" .
}
QUERY;

  $results = $sparql->query($query);
  if ($results->count()) {
    $result = &$results[0];
    return $result->entity_id->getUri();
  }

  return NULL;
}

/**
 * Access control for the GITB compatibility field on distributions.
 *
 * The GITB field on distributions should only be shown if the solution that
 * the distribution belongs to is either a TestComponent, TestService
 * or TestScenario.
 *
 * Implements hook_form_alter().
 */
function asset_distribution_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Act on distribution create and update form.
  if (!in_array($form_id, ['rdf_entity_asset_distribution_edit_form', 'rdf_entity_asset_distribution_form'])) {
    return;
  }
  $solution = NULL;
  $form['field_ad_gitb_compliant']['#access'] = FALSE;
  // On the create form, get context from the route.
  $rdf = \Drupal::routeMatch()->getParameter('rdf_entity');
  if ($rdf) {
    if ($rdf->bundle() == 'solution') {
      $solution = $rdf;
    }
    // This distribution is being added to a release.
    elseif ($rdf->bundle() == 'asset_release') {
      $solution = $rdf->get('field_isr_is_version_of')->entity;
    }
    elseif ($rdf->bundle() == 'asset_distribution') {
      $solution = $rdf->get('og_audience')->entity;
    }
  }
  // During update.
  else {
    /** @var \Drupal\rdf_entity\Form\RdfForm $form_object */
    $form_object = $form_state->getFormObject();
    /** @var \Drupal\rdf_entity\RdfInterface $distribution */
    $distribution = $form_object->getEntity();
    $solution = $distribution->get('og_audience')->entity;
  }

  if (!$solution) {
    return;
  }

  $solution_types = $solution->get('field_is_solution_type')->getValue();
  $gitb_solution_types = [
    'http://data.europa.eu/dr8/ConformanceTestingComponent',
    'http://data.europa.eu/dr8/ConformanceTestingService',
    'http://data.europa.eu/dr8/ConformanceTestScenario',
  ];
  foreach ($solution_types as $solution_type) {
    if (in_array($solution_type['target_id'], $gitb_solution_types)) {
      $form['field_ad_gitb_compliant']['#access'] = TRUE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Cleanup entity reference field items to the deleted distribution from
 * solutions and releases.
 */
function asset_distribution_rdf_entity_delete(RdfInterface $distribution) {
  if ($distribution->bundle() !== 'asset_distribution') {
    return;
  }

  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('rdf_entity');

  $ids = $storage->getQuery('OR')
    ->condition('field_is_distribution', $distribution->id())
    ->condition('field_isr_distribution', $distribution->id())
    ->execute();

  foreach ($storage->loadMultiple($ids) as $entity) {
    $field_name = $entity->bundle() === 'solution' ? 'field_is_distribution' : 'field_isr_distribution';
    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
    $field = $entity->get($field_name);
    $field->filter(function (EntityReferenceItem $item) use ($distribution): bool {
      return $item->target_id !== $distribution->id();
    });
    $entity->skip_notification = TRUE;
    $entity->save();
  }

}
