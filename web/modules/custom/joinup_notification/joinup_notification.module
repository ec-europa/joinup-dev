<?php

/**
 * @file
 * Module handling notifications in joinup.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\og\Og;

/**
 * Implements hook_entity_predelete().
 *
 * Handles the notifications for the entity types rdf_entity and node the same
 * way as the WorkflowTransitionEventSubscriber does but since we do not have a
 * transition when an entity is deleted, there is no event fired.
 * Thus, this is handled separately.
 *
 * This notification functionality is currently applying if the two following
 * criteria are met:
 *  - If the entity is a node and has a state field and the state is
 * 'deletion_request'.
 *  - There is configuration set for the entity type and the bundle.
 *
 * @see modules/custom/joinup_notification/src/config/schema/joinup_notification.schema.yml
 */
function joinup_notification_entity_predelete(EntityInterface $entity) {
  if (!($entity instanceof ContentEntityInterface) || !in_array($entity->getEntityTypeId(), ['rdf_entity', 'node'])) {
    return;
  }

  if ($entity->getEntityTypeId() === 'node') {
    $values = [
      'field_message_entity_title' => $entity->label(),
      'field_message_entity_bundle' => $entity->bundle(),
    ];
    joinup_notification_node_admin_action_notification($entity, 'delete_notifications', $values);
  }

  $entity_type = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  /** @var \Drupal\joinup_core\WorkflowHelperInterface $workflow_helper */
  $workflow_helper = \Drupal::service('joinup_core.workflow.helper');

  // The asset distribution rdf entity does not have a workflow so it is
  // excluded from the following check.
  if ($workflow_helper->hasEntityStateField($entity)) {
    $state_field = $workflow_helper->getEntityStateField($entity);
    if (empty($state_field) || empty($state_field->value) || $state_field->value !== 'deletion_request') {
      return;
    }
  }

  $configuration = \Drupal::config('joinup_notification.settings')->get('delete_notifications');
  if (empty($configuration[$entity_type][$bundle])) {
    return;
  }

  /** @var \Drupal\joinup_notification\NotificationSenderService $notification_sender */
  $notification_sender = \Drupal::service('joinup_notification.notification_sender');
  foreach ($configuration[$entity_type][$bundle] as $role_id => $messages) {
    $notification_sender->sendStateTransitionMessage($entity, $role_id, $messages);
  }
}

/**
 * Notification handler for actions taken by moderators on community content.
 *
 * Sends an e-mail to facilitators of collection/solutions when a moderator
 * performs an action to a community content node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The community content entity.
 * @param string $notification_id
 *   The id that is used to index the settings.
 * @param array $values
 *   Values to be passed to the message entity.
 *
 * @see web/modules/custom/joinup_notification/config/install/joinup_notification.settings.yml
 */
function joinup_notification_node_admin_action_notification(EntityInterface $entity, $notification_id, array $values = []) {
  $user = \Drupal::currentUser();

  // Send this notification only when a moderator triggered it.
  if (!in_array('moderator', $user->getRoles())) {
    return;
  }

  if (!Og::isGroupContent('node', $entity->bundle())) {
    return;
  }

  /** @var \Drupal\Og\MembershipManagerInterface $membership_manager */
  $membership_manager = \Drupal::service('og.membership_manager');
  $groups = $membership_manager->getGroups($entity);

  // In Joinup all the nodes that are group content should have groups, but
  // check for safety.
  if (empty($groups['rdf_entity'])) {
    \Drupal::logger('joinup_notification')->alert('%title @bundle node has no groups associated.', [
      '%title' => $entity->label(),
      '@bundle' => $entity->bundle(),
    ]);

    return;
  }

  $configuration = \Drupal::config('joinup_notification.settings')->get($notification_id);
  $sender = \Drupal::service('joinup_notification.notification_sender');

  foreach ($groups['rdf_entity'] as $group) {
    if (empty($configuration['node'][$entity->bundle()])) {
      continue;
    }

    $values += [
      'field_message_actor' => $user->id(),
      'field_message_content' => $group->id(),
    ];
    foreach ($configuration['node'][$entity->bundle()] as $role_id => $messages) {
      $sender->sendMessageTemplateToRole($messages, $values, $role_id, $group);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Sends an e-mail to facilitators of collection/solutions when a moderator
 * updates a community content node.
 */
function joinup_notification_node_update(EntityInterface $entity) {
  $values = ['field_message_node' => $entity->id()];
  joinup_notification_node_admin_action_notification($entity, 'content_update_notifications', $values);
}
