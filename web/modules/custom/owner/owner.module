<?php

/**
 * @file
 * Main functions and hook implementations of the Owner module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\rdf_entity\Entity\Query\Sparql\SparqlArg;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\rdf_entity\RdfInterface;

/**
 * Implements hook_ENTITY_TYPE_create().
 *
 * Sets the initial workflow state of an owner to 'validated'.
 */
function owner_rdf_entity_create(RdfInterface $entity) {
  if ($entity->bundle() !== 'owner') {
    return;
  }

  // The initial state of an owner is validated. The owner is created as part of
  // proposing a collection, and in the collection propose form the workflow
  // state is hidden from the user, so it would remain in the "__new__" state
  // after submission.
  // We can safely set the initial state to "validated" because a newly created
  // owner doesn't need to be validated by a third party.
  if ($entity->field_owner_state->value === '__new__') {
    $entity->set('field_owner_state', 'validated');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function owner_rdf_entity_presave(EntityInterface $entity) {
  owner_entity_auto_label($entity);
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function owner_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Replace headers in the table rendered in inline entity form widgets.
  if ($context['entity_type'] == 'rdf_entity' && $context['allowed_bundles'] === ['owner']) {
    if (isset($fields['label'])) {
      $fields['label']['label'] = t('Name');
    }

    // Add the type column.
    $fields['field_owner_type'] = [
      'type' => 'field',
      'label' => t('Type'),
      'weight' => 10,
    ];
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function owner_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // Add an entity builder callback to fill the label field with the values of
  // the name field. This is needed because inline entity form doesn't save
  // the entity until the parent entity is saved. Due to this, the label column
  // in the widget table would be empty.
  $entity_form['#entity_builders'][] = 'owner_inline_entity_form_entity_builder';
}

/**
 * Entity builder callback for the inline entity creation form.
 *
 * @param string $entity_type
 *   The type of the entity being created.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being built.
 */
function owner_inline_entity_form_entity_builder($entity_type, EntityInterface $entity) {
  owner_entity_auto_label($entity);
}

/**
 * Implements hook_form_BASEFORM_ID_alter().
 */
function owner_form_rdf_entity_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->bundle() !== 'owner') {
    return;
  }

  $form['#validate'][] = 'owner_form_alter_validate';
}

/**
 * Form validation callback.
 *
 * Checks that an owner entity cannot transition to the 'Request deletion' state
 * if it is still associated with a collection.
 *
 * @see owner_form_rdf_entity_form_alter()
 */
function owner_form_alter_validate(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();

  $element = $form_state->getTriggeringElement();
  if (
    // Check if the form was submitted using one of the workflow buttons.
    !empty($element['#state_field']) &&
    !empty($element['#state_id']) &&
    // Check if we are transitioning to "Request deletion".
    $element['#state_id'] === 'deletion_request' &&
    // Check if the owner is still referenced by one or more collections.
    owner_is_owner_referenced($entity)
  ) {
    // Compile a list of collections that are referencing the owner, to show in
    // the form validation error message.
    $collection_labels = array_map(function (RdfInterface $collection) {
      return '"' . $collection->label() . '"';
    }, owner_get_references($entity));

    $form_state->setError($element, new TranslatableMarkup('The owner cannot be deleted since it owns the following collections: @collections. Please set a different owner for these collections before requesting deletion.', [
      '@collections' => implode(', ', $collection_labels),
    ]));
  }
}

/**
 * Generates the entity label from the name field for owner entities.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to process.
 */
function owner_entity_auto_label(EntityInterface $entity) {
  if ($entity->bundle() !== 'owner') {
    return;
  }

  // Generate the label using the values of the name field.
  $names = array_column($entity->get('field_owner_name')->getValue(), 'value');
  $entity->set('label', implode(', ', $names));
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function owner_rdf_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() != 'owner') {
    return AccessResult::neutral();
  }

  // By specifications, deletion should be forbidden if the owner entity is
  // referenced by any other entity.
  if ($operation === 'delete') {
    return AccessResult::forbiddenIf(owner_is_owner_referenced($entity));
  }

  // RDF Entity administrators always have access on all owner entities.
  if ($account->hasPermission('administer rdf entity')) {
    return AccessResult::allowed();
  }

  switch ($operation) {
    case 'edit':
      $allowed_transitions = \Drupal::service('joinup_core.workflow.helper')->getAvailableTransitions($entity, $account);
      return AccessResult::forbiddenIf(empty($allowed_transitions));
  }
  // Revoke access to canonical route for anonymous users.
  // Only revoke access for anonymous users.
  if ($account->isAuthenticated()) {
    return AccessResult::neutral();
  }
  // Get entity from route.
  $route = \Drupal::routeMatch();
  $route_name = $route->getRouteName();
  if ($route_name != 'entity.rdf_entity.canonical') {
    return AccessResult::neutral();
  }
  $route_entity = $route->getParameter('rdf_entity');
  if (empty($route_entity)) {
    return AccessResult::neutral();
  }
  if ($entity->id() == $route_entity->id()) {
    return AccessResult::forbidden('Anonymous users should not see contact information on the canonical route.');
  }
  return AccessResult::neutral();
}

/**
 * Checks if an owner entity is referenced by any other rdf entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The owner entity to check for.
 *
 * @return bool
 *   True is the entity is being referenced, false otherwise.
 */
function owner_is_owner_referenced(EntityInterface $entity) {
  /** @var \Drupal\rdf_entity\Database\Driver\sparql\ConnectionInterface $sparql_endpoint */
  $sparql_endpoint = \Drupal::service('sparql_endpoint');

  // Check in Sparql if the owner id is set as object in any triple.
  return $sparql_endpoint->query("ASK { ?s ?p " . SparqlArg::uri($entity->id()) . " }")->isTrue();
}

/**
 * Returns the collections that reference the given owner.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The owner entity for which to return the referencing collections.
 *
 * @return \Drupal\rdf_entity\Entity\Rdf[]
 *   An array of referencing collection entities.
 */
function owner_get_references(EntityInterface $entity) {
  $query = \Drupal::entityQuery('rdf_entity');
  $result = $query
    ->condition('rid', 'collection')
    ->condition('field_ar_owner', $entity->id())
    ->execute();

  return !empty($result) ? Rdf::loadMultiple($result) : [];
}
