<?php

/**
 * @file
 * Contains joinup_subscription.module..
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\message\MessageInterface;
use Drupal\message_notify\Plugin\Notifier\MessageNotifierInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_type_build().
 */
function joinup_subscription_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['user']->setFormClass('subscription_settings', 'Drupal\user\ProfileForm');
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Provides the 'entity_bundle' field for the 'og_membership' entity type. The
 * field stores a reference to an entity bundle by storing the machine names of
 * the entity type and the bundle that is to be referenced.
 */
function joinup_subscription_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add the 'subscription_bundles' property to the 'og_membership' entity.
  if (($entity_type->id() === 'og_membership')) {
    $fields['subscription_bundles'] = BaseFieldDefinition::create('entity_bundle_pair')
      ->setLabel(t('Subscribed bundles'))
      ->setDescription(t('Holds the bundles that the user is subscribed to for notifications keyed by their entity type.'))
      ->setCardinality(FieldStorageConfigInterface::CARDINALITY_UNLIMITED)
      ->setRequired(FALSE)
      // By default, the new member gets subscribed to all community content of
      // the group.
      ->setDefaultValue([]);
  }

  return $fields;
}

/**
 * Implements hook_message_digest_aggregate_alter().
 *
 * Reorders the messages in the collection content subscription digest to be
 * grouped by collection. The collections will be sorted alphabetically and also
 * the community content items within each collection is sorted alphabetically.
 */
function joinup_subscription_message_digest_aggregate_alter(array &$context, UserInterface $account, MessageNotifierInterface $notifier): void {
  // Only act on the collection community content digest. This can be recognized
  // because it is not linked to any entity type or entity ID.
  if (!empty($context['entity_type']) || !empty($context['entity_id'])) {
    return;
  }

  // Filter out any messages that are referring to deleted content.
  $messages = &$context['messages'];
  foreach ($messages as $key => $message) {
    $content = $message->field_collection_content->first()->entity ?? NULL;
    if (empty($content)) {
      unset($messages[$key]);
    }
  }

  // If all content in the message was deleted, prevent an empty digest from
  // being delivered.
  if (empty($context['messages'])) {
    $context['deliver'] = FALSE;
    return;
  }

  // Put the messages in the right order in which they will be displayed in the
  // digest message.
  uasort($messages, function (MessageInterface $a, MessageInterface $b) {
    // Find the collections by resolving the entity references from the message
    // to the community content to the collection.
    /** @var \Drupal\collection\Entity\CollectionContentInterface $a_content */
    $a_content = $a->field_collection_content->first()->entity;
    /** @var \Drupal\collection\Entity\CollectionContentInterface $b_content */
    $b_content = $b->field_collection_content->first()->entity;
    $a_collection = $a_content->getCollection();
    $b_collection = $b_content->getCollection();

    // Within a collection, order by content alphabetically.
    if ($a_collection->id() === $b_collection->id()) {
      return $a_content->label() <=> $b_content->label();
    }
    // Also order the collections themselves alphabetically.
    return $a_collection->label() <=> $b_collection->label();
  });
}

/**
 * Implements hook_mail_alter().
 *
 * Performs the following alterations:
 * - Sends digest mails as HTML.
 * - Changes the mail subject.
 */
function joinup_subscription_mail_alter(array &$message): void {
  if ($message['key'] === 'digest') {
    $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
    $notifier = $message['params']['notifier'] ?? NULL;
    if ($notifier instanceof MessageNotifierInterface) {
      $interval = $notifier->getPluginDefinition()['title'];
      $message['subject'] = t('Joinup: @interval digest message', [
        '@interval' => $interval,
      ]);
    }
  }
}
