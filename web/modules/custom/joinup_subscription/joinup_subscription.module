<?php

/**
 * @file
 * Contains joinup_subscription.module..
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\joinup_subscription\Entity\CollectionContentSubscriptionMessage;
use Drupal\joinup_subscription\Entity\GroupContentSubscriptionMessageInterface;
use Drupal\joinup_subscription\Entity\SolutionContentSubscriptionMessage;
use Drupal\message\MessageInterface;
use Drupal\message_notify\Plugin\Notifier\MessageNotifierInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_type_build().
 */
function joinup_subscription_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['user']->setFormClass('subscription_settings', 'Drupal\user\ProfileForm');
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Provides the 'entity_bundle' field for the 'og_membership' entity type. The
 * field stores a reference to an entity bundle by storing the machine names of
 * the entity type and the bundle that is to be referenced.
 */
function joinup_subscription_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add the 'subscription_bundles' property to the 'og_membership' entity.
  if (($entity_type->id() === 'og_membership')) {
    $fields['subscription_bundles'] = BaseFieldDefinition::create('entity_bundle_pair')
      ->setLabel(t('Subscribed bundles'))
      ->setDescription(t('Holds the bundles that the user is subscribed to for notifications keyed by their entity type.'))
      ->setCardinality(FieldStorageConfigInterface::CARDINALITY_UNLIMITED)
      ->setRequired(FALSE)
      // By default, the new member gets subscribed to all community content of
      // the group.
      ->setDefaultValue([]);
  }

  return $fields;
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function joinup_subscription_entity_bundle_info_alter(&$bundles) {
  if (!empty($bundles['message']['collection_content_subscription'])) {
    $bundles['message']['collection_content_subscription']['class'] = CollectionContentSubscriptionMessage::class;
  }
  if (!empty($bundles['message']['solution_content_subscription'])) {
    $bundles['message']['solution_content_subscription']['class'] = SolutionContentSubscriptionMessage::class;
  }
}

/**
 * Implements hook_message_digest_aggregate_alter().
 *
 * Reorders the messages in the group content subscription digest to be grouped
 * by the parent group. The groups will be sorted alphabetically and also
 * the community content items within each group is sorted alphabetically.
 */
function joinup_subscription_message_digest_aggregate_alter(array &$context, UserInterface $account, MessageNotifierInterface $notifier): void {
  // Only act on the group community content digest. Bail out if this contains
  // any other message.
  if (!array_reduce($context['messages'], function (bool $carry, MessageInterface $message): bool {
    return $carry && $message instanceof GroupContentSubscriptionMessageInterface;
  }, TRUE)) {
    return;
  };

  // Filter out any messages that are referring to deleted content.
  /** @var \Drupal\joinup_subscription\Entity\GroupContentSubscriptionMessageInterface[] $messages */
  $messages = &$context['messages'];
  foreach ($messages as $key => $message) {
    $content = $message->getSubscribedGroupContent();
    if (empty($content)) {
      unset($messages[$key]);
    }
  }

  if (!empty($messages)) {
    // Message digest does not carry over any information other than the
    // notifier and even this, is very limited in capabilities.
    // Set the bundle label as a temporary variable in the notifier as a dynamic
    // property since it does not provide any methods to carry information over
    // either. This will allow us to alter the mail subject and include the
    // group bundle in it.
    //
    // We are accessing information the same way as we do later in the sorting
    // function so it is safe to assume that values do exist.
    //
    // @see \joinup_subscription_mail_alter()
    $message = reset($messages);
    $notifier->bundle_label = $message->getSubscribedGroup()->get('rid')->entity->label();
  }

  // If all content in the message was deleted, prevent an empty digest from
  // being delivered.
  if (empty($context['messages'])) {
    $context['deliver'] = FALSE;
    return;
  }

  // Put the messages in the right order in which they will be displayed in the
  // digest message.
  uasort($messages, function (GroupContentSubscriptionMessageInterface $a, GroupContentSubscriptionMessageInterface $b) {
    // Find the groups by resolving the entity references from the message
    // to the community content to the group.
    $a_content = $a->getSubscribedGroupContent();
    $b_content = $b->getSubscribedGroupContent();
    $a_group = $a_content->getGroup();
    $b_group = $b_content->getGroup();

    // Within a group, order by content alphabetically.
    if ($a_group->id() === $b_group->id()) {
      return $a_content->label() <=> $b_content->label();
    }
    // Also order the groups themselves alphabetically.
    return $a_group->label() <=> $b_group->label();
  });
}

/**
 * Implements hook_mail_alter().
 *
 * Performs the following alterations:
 * - Sends digest mails as HTML.
 * - Changes the mail subject.
 */
function joinup_subscription_mail_alter(array &$message): void {
  if ($message['key'] === 'digest') {
    $message['headers']['Content-Type'] = SWIFTMAILER_FORMAT_HTML;
    $notifier = $message['params']['notifier'] ?? NULL;
    if ($notifier instanceof MessageNotifierInterface) {
      $interval = $notifier->getPluginDefinition()['title'];
      $message['subject'] = t('Joinup: @interval:bundle_label digest message', [
        '@interval' => $interval,
        ':bundle_label' => ' ' . $notifier->bundle_label ?? '',
      ]);
    }
  }
}
