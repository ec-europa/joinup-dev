<?php

/**
 * @file
 * Main functions and hook implementations of the Joinup user module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\og\Og;
use Drupal\search_api\Query\QueryInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Send a notification whenever an admin updates a user profile.
 */
function joinup_user_user_update(UserInterface $account) {
  $current_user = \Drupal::currentUser()->getAccount();
  // Email should only fire when a user alters another user's account.
  if ($account->isAnonymous() || $current_user->isAnonymous() || $current_user->id() == $account->id()) {
    return;
  }

  /** @var \Drupal\joinup_user\ActiveFormSubmit $active_form */
  $active_form = \Drupal::getContainer()->get('joinup_user.active_form_submit');
  $active_form_id = $active_form->getFormId();
  // Only run when either submitting the user edit form, or the bulk operation
  // on admin/people.
  if (!$active_form_id || !in_array($active_form_id, ['views_form_user_admin_people_page_1', 'user_form'])) {
    return;
  }

  // Inform the user that his profile was updated.
  $params['account'] = $account;
  $params['original'] = $account->original;

  \Drupal::service('plugin.manager.mail')->mail(
    'joinup_user',
    'email_admin_update',
    $account->getEmail(),
    $account->getPreferredLangcode(),
    $params
  );
  drupal_set_message(t('An e-mail has been send to the user to notify him on the change to his account.'));
}

/**
 * Implements hook_mail().
 *
 * @see user_mail()
 */
function joinup_user_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];
  $variables = [
    'user' => $params['account'],
    'original' => $params['original'],
  ];

  $language = \Drupal::languageManager()
    ->getLanguage($params['account']->getPreferredLangcode());
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('joinup_user.mail');

  $token_options = [
    'langcode' => $langcode,
    'callback' => 'joinup_user_mail_tokens',
    'clear' => TRUE,
  ];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));

  $body = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);
  $message['body'][] = $body;

  $language_manager->setConfigOverrideLanguage($original_language);
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This extends user_mail_tokens with the ability to include a token that
 * displays changes made to the user profile.
 *
 * This function is used by \Drupal\Core\Utility\Token::replace() to set up
 * some additional tokens that can be used in email messages generated by
 * user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The UNIX timestamp of the user's last login.
 *   - pass: The hashed account login password.
 * @param array $options
 *   A keyed array of settings and flags to control the token replacement
 *   process. See \Drupal\Core\Utility\Token::replace().
 *
 * @see user_mail_tokens()
 */
function joinup_user_mail_tokens(array &$replacements, array $data, array $options) {
  user_mail_tokens($replacements, $data, $options);
  if (isset($data['user']) && isset($data['original'])) {
    $changes = joinup_user_account_changes($data['original'], $data['user']);
    $replacements['[user:changes]'] = implode("\n", $changes);
  }
}

/**
 * Turn account changes into human readable text.
 */
function joinup_user_account_changes(AccountInterface $old_account, AccountInterface $new_account) {
  $changes = [];
  // Roles changed.
  $old_roles = [];
  // Deal with roles directly, without authenticated or anonymous.
  foreach ($old_account->get('roles') as $role) {
    if ($role->target_id) {
      $old_roles[] = $role->target_id;
    }
  }
  $new_roles = [];
  foreach ($new_account->get('roles') as $role) {
    if ($role->target_id) {
      $new_roles[] = $role->target_id;
    }
  }
  if ($removed = array_diff($old_roles, $new_roles)) {
    $text = "The following roles have been removed from your profile: ";
    $text .= implode(', ', $removed);
    $changes[] = $text;
  }
  if ($added = array_diff($new_roles, $old_roles)) {
    $text = "The following roles have been added to your profile: ";
    $text .= implode(', ', $added);
    $changes[] = $text;
  }

  if ($old_account->isActive() && $new_account->isBlocked()) {
    $changes[] = "Your account has been blocked.";
  }

  if ($old_account->isBlocked() && $new_account->isActive()) {
    $changes[] = "Your account has been un-blocked.";
  }

  return $changes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Settings form for the email send when an admin updates a user profile.
 */
function joinup_user_form_user_admin_settings_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'joinup_user_form_user_admin_settings_alter_submit';
  $mail_config = \Drupal::config('joinup_user.mail');
  $email_token_help = t('Available variables are: [site:name], [site:url], [user:display-name], [user:account-name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:changes].');
  $form['email_admin_update'] = [
    '#type' => 'details',
    '#title' => t('Account changed by administrator'),
    '#description' => t('Edit the email messages sent to member accounts edited by an administrator.'),
    '#group' => 'email',
  ];
  $form['email_admin_update']['#description'] .= ' ' . $email_token_help;
  $form['email_admin_update']['user_mail_update_account_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_config->get('email_admin_update.subject'),
    '#maxlength' => 180,
  ];
  $form['email_admin_update']['user_mail_update_account_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_config->get('email_admin_update.body'),
    '#rows' => 15,
  ];
}

/**
 * Submit callback: Save the email settings.
 */
function joinup_user_form_user_admin_settings_alter_submit(array &$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('joinup_user.mail')
    ->set('email_admin_update.body', $form_state->getValue('user_mail_update_account_body'))
    ->set('email_admin_update.subject', $form_state->getValue('user_mail_update_account_subject'))
    ->save();
}

/**
 * Implements hook_form_alter().
 */
function joinup_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'joinup_user_form_alter_validate';
}

/**
 * Form validation callback: Keep track of the form being validated/submitted.
 */
function joinup_user_form_alter_validate(&$form, FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['form_id'])) {
    /** @var \Drupal\joinup_user\ActiveFormSubmit $active_form */
    $active_form = \Drupal::getContainer()->get('joinup_user.active_form_submit');
    $active_form->setFormId($build_info['form_id']);
  }
}

/**
 * Implements hook_search_api_query_TAG_alter().
 *
 * Alters the Search API query for the user content:
 * - show only the content the user is author of;
 * - do not show entities of some bundles.
 */
function joinup_user_search_api_query_search_api_field_field_user_content_alter(QueryInterface &$query) {
  /** @var \Drupal\user\Entity\User $user */
  $user = $query->getOption('search_api_field entity');

  // Do not show contact information and owner entities as they are not
  // relevant for the user content, and they are visualised in the related
  // entity "about" page.
  $query->addCondition('entity_bundle', ['contact_information', 'owner'], 'NOT IN');

  $groups = [];
  foreach (Og::getMemberships($user) as $membership) {
    $groups[] = $membership->getGroupId();
  }

  if ($groups) {
    $or = $query->createConditionGroup('OR');

    // Show all the content the user is author of.
    $or->addCondition('id', $groups, 'IN');
    // Or all the groups he belongs to.
    $or->addCondition('entity_author', $user->id());
    $query->addConditionGroup($or);
  }
  else {
    // Show only content the user is author of.
    $query->addCondition('entity_author', $user->id());
  }
}

/**
 * User canonical route title callback.
 *
 * @param \Drupal\user\UserInterface|null $user
 *   The user account.
 *
 * @return string|array
 *   The user full name as a render array or an empty string if $user is
 *   NULL.
 *
 * @see \Drupal\user\Controller\UserController::userTitle()
 */
function joinup_user_canonical_title(UserInterface $user = NULL) {
  return $user ? ['#markup' => $user->get('full_name')->value, '#allowed_tags' => Xss::getHtmlTagList()] : '';
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Adds a computed field to easily retrieve the full name of a user.
 */
function joinup_user_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['full_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Full name'))
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('display', FALSE)
      ->setComputed(TRUE)
      ->setCardinality(1)
      ->setClass('\Drupal\joinup_user\UserFullNameFieldItemList');
  }

  return $fields;
}
