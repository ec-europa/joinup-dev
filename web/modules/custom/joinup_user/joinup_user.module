<?php

/**
 * @file
 * Main functions and hook implementations of the Joinup user module.
 */

declare(strict_types = 1);

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AccountInterface;
use Drupal\joinup_notification\MessageArgumentGenerator;
use Drupal\joinup_user\Entity\JoinupUser;
use Drupal\joinup_user\Entity\JoinupUserInterface;
use Drupal\joinup_user\JoinupUserViewsData;
use Drupal\og\Og;
use Drupal\og\OgMembershipInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Send a notification whenever an admin updates a user profile.
 *
 * @todo This is a very complicated, hard to follow and hard to maintain
 * implementation. Basically what we need here is to move the whole logic in the
 * form API layer and avoid using all the confusing workarounds with the storing
 * the form ID in a service. Then we can drop also the form alter and the
 * 'joinup_user.active_form_submit' service. Fix this in ISAICP-4698.
 * @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-4698
 */
function joinup_user_user_update(UserInterface $account) {
  if (!$account->getEmail()) {
    // Drupal allows accounts without E-mail when the account is created by an
    // administrator.
    return;
  }

  $current_user = \Drupal::currentUser()->getAccount();
  // Email should only fire when a user alters another user's account.
  if ($account->isAnonymous() || $current_user->isAnonymous() || $current_user->id() == $account->id()) {
    return;
  }

  // Additionally, if the status of the user changed, do not send an e-mail as
  // it is already handled.
  if ($account->isActive() !== $account->original->isActive()) {
    return;
  }

  /** @var \Drupal\joinup_user\ActiveFormSubmit $active_form */
  $active_form = \Drupal::getContainer()->get('joinup_user.active_form_submit');
  $active_form_id = $active_form->getFormId();
  // Only run when either submitting the user edit form, or the bulk operation
  // on admin/people.
  if (!$active_form_id || !in_array($active_form_id, ['views_form_user_admin_people_page', 'user_form'])) {
    return;
  }

  // Inform the user that their profile was updated.
  $params['account'] = $account;
  $params['original'] = $account->original;

  \Drupal::service('plugin.manager.mail')->mail(
    'joinup_user',
    'email_admin_update',
    $account->getEmail(),
    $account->getPreferredLangcode(),
    $params
  );
  \Drupal::messenger()->addStatus('An e-mail has been sent to the user to notify him on the change to his account.');
}

/**
 * Implements hook_mail().
 *
 * @see user_mail()
 */
function joinup_user_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];

  $variables = [
    'user' => $params['account'],
    'original' => isset($params['original']) ? $params['original'] : NULL,
    'membership' => isset($params['membership']) ? $params['membership'] : NULL,
  ];

  $language = \Drupal::languageManager()
    ->getLanguage($params['account']->getPreferredLangcode());
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('joinup_user.mail');

  $token_options = [
    'langcode' => $langcode,
    'callback' => 'joinup_user_mail_tokens',
    'clear' => TRUE,
  ];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));

  $body = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);
  $message['body'][] = $body;

  $language_manager->setConfigOverrideLanguage($original_language);
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This extends user_mail_tokens with the ability to include a token that
 * displays changes made to the user profile.
 *
 * This function is used by \Drupal\Core\Utility\Token::replace() to set up
 * some additional tokens that can be used in email messages generated by
 * user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The UNIX timestamp of the user's last login.
 *   - pass: The hashed account login password.
 * @param array $options
 *   A keyed array of settings and flags to control the token replacement
 *   process. See \Drupal\Core\Utility\Token::replace().
 *
 * @see user_mail_tokens()
 */
function joinup_user_mail_tokens(array &$replacements, array $data, array $options) {
  user_mail_tokens($replacements, $data, $options);

  if (isset($data['user']) && isset($data['original'])) {
    $changes = joinup_user_account_changes($data['original'], $data['user']);
    $replacements['[user:changes]'] = implode("\n", $changes);
  }
}

/**
 * Implements hook_mail_alter().
 */
function joinup_user_mail_alter(&$message) {
  if (isset($message['params']['account']) && $message['params']['account']->isCancelled()) {
    // Don't send email for a cancelled user account.
    $message['send'] = FALSE;
  }

  if ($message['key'] !== 'status_canceled') {
    return;
  }

  $current_user = \Drupal::currentUser()->getAccount();
  $account = user_load_by_mail($message['to']);
  // Email should only fire when a user alters another user's account.
  if ($account->isAnonymous() || $current_user->isAnonymous() || $current_user->id() == $account->id()) {
    $moderation_text = '</p><p>';
  }
  else {
    $moderation_text = '</p><p>This action has been done in the framework of moderation activities regularly conducted on the Joinup platform.</p><p>';
  }

  $message['body'] = array_map(function ($text) use ($moderation_text) {
    $text = str_replace('@joinup_user:moderation_text', $moderation_text, $text);
    return Markup::create($text);
  }, $message['body']);
}

/**
 * Turn account changes into human readable text.
 */
function joinup_user_account_changes(AccountInterface $old_account, AccountInterface $new_account) {
  $changes = [];
  // Roles changed.
  $old_roles = [];
  // Deal with roles directly, without authenticated or anonymous.
  foreach ($old_account->get('roles') as $role) {
    if ($role->target_id) {
      $old_roles[] = $role->target_id;
    }
  }
  $new_roles = [];
  foreach ($new_account->get('roles') as $role) {
    if ($role->target_id) {
      $new_roles[] = $role->target_id;
    }
  }
  if ($removed = array_diff($old_roles, $new_roles)) {
    $text = "The following roles have been removed from your profile: ";
    $text .= implode(', ', $removed);
    $changes[] = $text;
  }
  if ($added = array_diff($new_roles, $old_roles)) {
    $text = "The following roles have been added to your profile: ";
    $text .= implode(', ', $added);
    $changes[] = $text;
  }

  if ($old_account->isActive() && $new_account->isBlocked()) {
    $changes[] = "Your account has been blocked.";
  }

  if ($old_account->isBlocked() && $new_account->isActive()) {
    $changes[] = "Your account has been un-blocked.";
  }

  return $changes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Settings form for the email send when an admin updates a user profile.
 */
function joinup_user_form_user_admin_settings_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'joinup_user_form_user_admin_settings_alter_submit';
  $mail_config = \Drupal::config('joinup_user.mail');
  $email_token_help = t('Available variables are: [site:name], [site:url], [user:display-name], [user:account-name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:changes].');

  // Settings for the e-mail sent when an admin updates a user profile.
  $form['email_admin_update'] = [
    '#type' => 'details',
    '#title' => t('Account changed by administrator'),
    '#description' => t('Edit the email messages sent to member accounts edited by an administrator.'),
    '#group' => 'email',
    '#weight' => 100,
  ];
  $form['email_admin_update']['#description'] .= ' ' . $email_token_help;
  $form['email_admin_update']['user_mail_update_account_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_config->get('email_admin_update.subject'),
    '#maxlength' => 180,
  ];
  $form['email_admin_update']['user_mail_update_account_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_config->get('email_admin_update.body'),
    '#rows' => 15,
  ];

  // Settings for the e-mail sent when a user successfully resets its password.
  $form['email_password_reset_confirm'] = [
    '#type' => 'details',
    '#title' => t('Password reset confirm'),
    '#description' => t('Edit the email messages sent to users when they successfully reset their password.'),
    '#group' => 'email',
    '#weight' => 102,
  ];
  $form['email_password_reset_confirm']['#description'] .= ' ' . $email_token_help;
  $form['email_password_reset_confirm']['user_mail_password_reset_confirm_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_config->get('password_reset_confirm.subject'),
    '#maxlength' => 180,
  ];
  $form['email_password_reset_confirm']['user_mail_password_reset_confirm_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_config->get('password_reset_confirm.body'),
    '#rows' => 15,
  ];
}

/**
 * Submit callback: Save the email settings.
 */
function joinup_user_form_user_admin_settings_alter_submit(array &$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('joinup_user.mail')
    ->set('email_admin_update.subject', $form_state->getValue('user_mail_update_account_subject'))
    ->set('email_admin_update.body', $form_state->getValue('user_mail_update_account_body'))
    ->set('password_reset_confirm.subject', $form_state->getValue('user_mail_password_reset_confirm_subject'))
    ->set('password_reset_confirm.body', $form_state->getValue('user_mail_password_reset_confirm_body'))
    ->save();
}

/**
 * Implements hook_form_alter().
 */
function joinup_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'joinup_user_form_alter_validate';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function joinup_user_form_user_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // This hook gets called as base form ID hook for forms like the user register
  // one, so we need to double check the form ID.
  if ($form_id !== 'user_form') {
    return;
  }

  // Add a submit callback to redirect to the canonical user page after updating
  // the user profile.
  $form['actions']['submit']['#submit'][] = 'joinup_user_user_form_submit';

  /** @var \Drupal\joinup_user\Entity\JoinupUserInterface $account */
  $account = $form_state->getFormObject()->getEntity();
  if ($account->isCancelled()) {
    $form['#disabled'] = TRUE;
    \Drupal::messenger()->addWarning(t('This user account is cancelled. Edit is disabled.'));
  }
}

/**
 * Submit callback for the user entity form.
 *
 * @param array $form
 *   The form build array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function joinup_user_user_form_submit(array $form, FormStateInterface $form_state) {
  // If the password is changed after opening a password reset link, send a
  // mail to the user.
  if ($form_state->get('user_pass_reset') && !$form_state->isValueEmpty('pass')) {
    /** @var \Drupal\user\UserInterface $account */
    $account = $form_state->getFormObject()->getEntity();
    $params = ['account' => $account];

    \Drupal::service('plugin.manager.mail')->mail(
      'joinup_user',
      'password_reset_confirm',
      $account->getEmail(),
      $account->getPreferredLangcode(),
      $params
    );
  }

  /** @var \Drupal\user\AccountForm $form_object */
  $form_object = $form_state->getFormObject();
  $form_state->setRedirectUrl($form_object->getEntity()->toUrl());
}

/**
 * Form validation callback: Keep track of the form being validated/submitted.
 */
function joinup_user_form_alter_validate(&$form, FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['form_id'])) {
    /** @var \Drupal\joinup_user\ActiveFormSubmit $active_form */
    $active_form = \Drupal::getContainer()->get('joinup_user.active_form_submit');
    $active_form->setFormId($build_info['form_id']);
  }
}

/**
 * Implements hook_search_api_query_TAG_alter().
 *
 * Alters the Search API query for the user content:
 * - show only the content the user is author of;
 * - do not show entities of some bundles.
 */
function joinup_user_search_api_query_search_api_field_field_user_content_alter(QueryInterface &$query) {
  /** @var \Drupal\user\Entity\User $user */
  $user = $query->getOption('search_api_field entity');

  // Do not show contact information and owner entities as they are not
  // relevant for the user content, and they are visualised in the related
  // entity "about" page.
  $query->addCondition('entity_bundle', ['contact_information', 'owner'], 'NOT IN');

  $groups = [];
  foreach (Og::getMemberships($user) as $membership) {
    $groups[] = $membership->getGroupId();
  }

  if ($groups) {
    if (count($groups) > 100) {
      $subset = array_chunk($groups, 100);
      $groups = reset($subset);
      \Drupal::messenger()->addMessage(t('You are a member of high number of collections and/or solutions.<br /> The results displayed here are limited to the content of the first 100 groups.'), 'warning');
    }
    $or = $query->createConditionGroup('OR');

    // Show all the content the user is author of.
    $or->addCondition('id', $groups, 'IN');
    // Or all the groups they belong to.
    $or->addCondition('entity_author', $user->id());
    $query->addConditionGroup($or);
  }
  else {
    // Show only content the user is author of.
    $query->addCondition('entity_author', $user->id());
  }

  // Sort content by their creation date.
  $query->sort('entity_created', QueryInterface::SORT_DESC);
}

/**
 * User canonical route title callback.
 *
 * @param \Drupal\user\UserInterface|null $user
 *   The user account.
 *
 * @return string|array
 *   The user full name as a render array or an empty string if $user is
 *   NULL.
 *
 * @see \Drupal\user\Controller\UserController::userTitle()
 */
function joinup_user_canonical_title(?UserInterface $user = NULL) {
  return $user ? ['#markup' => $user->getDisplayName(), '#allowed_tags' => Xss::getHtmlTagList()] : '';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * - Invalidates the user cache tags when an OG membership changes.
 * - Sends an e-mail when a user's role(s) change.
 */
function joinup_user_og_membership_presave(OgMembershipInterface $entity) {
  joinup_user_invalidate_user_cache_tags($entity);

  if ($entity->isNew()) {
    return;
  }

  // Allow the API to override and skip notifications.
  if (isset($entity->skip_notification) && $entity->skip_notification === TRUE) {
    return;
  }

  /** @var \Drupal\og\OgMembershipInterface $original_membership */
  $original_membership = $entity->original;

  // The group bundle is only stored in memberships after og_update_8001() has
  // run. If our original entity doesn't have the bundle set we cannot retrieve
  // the roles from it. Make sure this field is populated.
  // @todo This can be removed once we have released ISAICP-4679 in production.
  if (empty($original_membership->getGroupBundle())) {
    $original_membership->set('entity_bundle', $entity->getGroupBundle());
  }

  // Do not send a notification about changes in the membership if the roles did
  // not change.
  if ($entity->getRolesIds() === $original_membership->getRolesIds()) {
    return;
  }

  /** @var \Drupal\user\UserInterface $account */
  $account = $entity->getOwner();

  $arguments = MessageArgumentGenerator::getOgMembershipArguments($entity);
  $arguments += MessageArgumentGenerator::getGroupArguments($entity->getGroup());
  $arguments += MessageArgumentGenerator::getActorArguments();
  $arguments += MessageArgumentGenerator::getContactFormUrlArgument();

  /** @var \Drupal\joinup_notification\EntityMessageHelperInterface $entity_message_helper */
  $entity_message_helper = \Drupal::service('joinup_notification.entity_message_helper');
  $message = $entity_message_helper->createMessage($entity, 'og_membership_role_change', $arguments, 'field_membership');

  /** @var \Drupal\joinup_notification\JoinupMessageDeliveryInterface $message_delivery */
  $message_delivery = \Drupal::service('joinup_notification.message_delivery');
  $message_delivery->sendMessageToMultipleUsers($message, [$account]);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for OG Membership entities.
 */
function joinup_user_og_membership_delete(OgMembershipInterface $entity) {
  joinup_user_invalidate_user_cache_tags($entity);
}

/**
 * Flush the caches of the user that belongs to a OG membership.
 *
 * When a membership changes, clear the user's cache so that the related
 * content on the user profile page matches the new group memberships.
 *
 * @param \Drupal\og\OgMembershipInterface $entity
 *   The OG membership entity.
 */
function joinup_user_invalidate_user_cache_tags(OgMembershipInterface $entity) {
  if (!empty($entity->get('uid')->target_id)) {
    $tags = ['user:' . $entity->get('uid')->target_id];
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $invalidator */
    $invalidator = \Drupal::service('cache_tags.invalidator');
    $invalidator->invalidateTags($tags);
  }
}

/**
 * Implements hook_user_cancel_methods_alter().
 */
function joinup_user_user_cancel_methods_alter(array &$methods): void {
  $methods['joinup_user_cancel'] = [
    'title' => t("Cancels the user account"),
    'description' => t("Cancels the account but keep user's content and authorship."),
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disallow access to the cancellation method.
 */
function joinup_user_form_user_multiple_cancel_confirm_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Cancelling an account with deletion is permitted in the administrative UI.
  $form['user_cancel_method']['#default_value'] = 'user_cancel_delete';
  joinup_user_alter_account_cancel_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disallow access to the cancellation method.
 */
function joinup_user_form_user_cancel_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  joinup_user_alter_account_cancel_form($form);

  if (!isset($form['uid'])) {
    // If the 'uid' is not set the form cannot be submitted, most probably
    // because the user is the sole owner of a group and the standard user
    // cancel form was not loaded.
    // @see \Drupal\joinup_group\Form\UserCancelForm::buildForm()
    return;
  }

  if (\Drupal::currentUser()->id() === $form['uid']['#value']) {
    $form['description'] = [
      [
        '#markup' => t('By cancelling your account all personal account information will be deleted.'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      ],
      [
        '#markup' => t('This action cannot be undone.'),
        '#prefix' => '<p><strong>',
        '#suffix' => '</strong></p>',
      ],
    ];
  }
  $form['user_cancel_method']['#default_value'] = 'joinup_user_cancel';
}

/**
 * Alters some user account cancel form elements.
 *
 * @param array $form
 *   The form API render array.
 */
function joinup_user_alter_account_cancel_form(array &$form): void {
  $form['user_cancel_method']['#access'] = FALSE;
  $form['user_cancel_confirm']['#access'] = FALSE;
  $form['user_cancel_notify']['#default_value'] = TRUE;
  $form['user_cancel_notify']['#access'] = FALSE;
  $form['actions']['cancel']['#title'] = t('Go back');
}

/**
 * Implements hook_user_cancel().
 */
function joinup_user_user_cancel(array $edit, JoinupUserInterface $account, string $method): void {
  if ($method === 'joinup_user_cancel') {
    // Send the email and do the logging before anonymizing, so that we still
    // have the field values in place.
    if (!empty($edit['user_cancel_notify'])) {
      _user_mail_notify('status_canceled', $account);
    }
    \Drupal::messenger()->addStatus(t('%name has been deleted.', ['%name' => $account->getDisplayName()]));
    \Drupal::logger('user')->notice('Deleted user: %name %email.', ['%name' => $account->getAccountName(), '%email' => '<' . $account->getEmail() . '>']);

    // Actually cancel the user account.
    $account->cancel()->save();
  }
}

/**
 * Implements hook_user_format_name_alter().
 *
 * Replaces the username with a concatenation of the user's first and last name.
 * If either the first name or last name is known then this will be returned. If
 * neither are known this will fall back to the username.
 *
 * The first name and last name are both required during user registration so in
 * normal usage the combination of first name and last name will always be
 * returned. Incomplete data may be present in migrated legacy accounts.
 */
function joinup_user_user_format_name_alter(&$name, $account) {
  // Skip if the user is anonymous.
  if ($account->isAnonymous()) {
    return;
  }

  // Load the full user object if needed.
  if (!$account instanceof UserInterface) {
    $account = User::load($account->id());
  }

  // Default to the account name.
  $name = $account->getAccountName();

  /** @var \Drupal\user\UserInterface $account */
  $name_components = [];
  foreach (['field_user_first_name', 'field_user_family_name'] as $field_name) {
    if (!$account->get($field_name)->isEmpty()) {
      $name_components[] = $account->get($field_name)->value;
    }
  }
  if (!empty($name_components)) {
    $name = implode(' ', $name_components);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes the label text on the login form submit button to "Sign in".
 */
function joinup_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $form['actions']['submit']['#value'] = t('Sign in');
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * Change instances of 'Log in/out' to 'Sign in/out'.
 *
 * @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-3659
 */
function joinup_user_menu_links_discovered_alter(&$links) {
  if (isset($links['user.logout'])) {
    $links['user.logout']['class'] = '\Drupal\joinup_user\Plugin\Menu\LoginLogoutMenuLink';
  }
}

/**
 * Implements hook_local_tasks_alter().
 *
 * Change instances of 'Log in' to 'Sign in'.
 *
 * @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-3659
 */
function joinup_user_local_tasks_alter(&$local_tasks) {
  if (isset($local_tasks['user.login'])) {
    $local_tasks['user.login']['title'] = t('Sign in');
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds a destination parameter to the 'Sign in' menu item on every page towards
 * the current page.
 */
function joinup_user_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'joinup_user/sign_in_destination';
}

/**
 * Implements hook_entity_type_alter().
 */
function joinup_user_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
  $entity_type = $entity_types['user'];
  $entity_type
    ->setClass(JoinupUser::class)
    ->setHandlerClass('views_data', JoinupUserViewsData::class);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removed the check boxes from the cancelled users in the administrative UI.
 */
function joinup_user_form_views_form_user_admin_people_page_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (empty($form['user_bulk_form'])) {
    return;
  }

  $user_storage = \Drupal::entityTypeManager()->getStorage('user');

  // Unfortunately we cannot access BulkForm::loadEntityFromBulkFormKey(), so we
  // fork a copy tailored for the 'user' entity type.
  // @see \Drupal\views\Plugin\views\field\BulkForm::loadEntityFromBulkFormKey()
  $get_account = function (string $bulk_form_key) use ($user_storage): JoinupUserInterface {
    $key = base64_decode($bulk_form_key);
    $key_parts = json_decode($key);
    // The first item is always the user ID.
    $uid = array_pop($key_parts);
    /** @var \Drupal\joinup_user\Entity\JoinupUserInterface $account */
    $account = $user_storage->load($uid);
    return $account;
  };

  foreach (Element::children($form['user_bulk_form']) as $delta) {
    $account = $get_account($form['user_bulk_form'][$delta]['#return_value']);
    if ($account->isCancelled()) {
      // Cancelled users cannot be deleted, not even from the admin UI.
      unset($form['user_bulk_form'][$delta]);
    }
  }
}
