<?php

/**
 * @file
 * Functions to support theming in the Joinup theme.
 */

declare(strict_types = 1);

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\joinup_core\Controller\IdRedirect;
use Drupal\joinup_group\JoinupGroupHelper;
use Drupal\message\MessageInterface;
use Drupal\node\NodeInterface;
use Drupal\oe_newsroom_newsletter\Form\NewsletterSubscribeForm;
use Drupal\user\Entity\User;

/**
 * Gives meta properties about forms based on routes.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route object.
 *
 * @return array
 *   The additional properties or features a given form should have.
 */
function _joinup_form_meta_by_route(RouteMatchInterface $route_match) {
  // Declare available types.
  $form_meta = [
    'is_create_form' => FALSE,
    'has_tabs' => FALSE,
  ];

  if ($route_name = $route_match->getRouteName()) {

    if (_joinup_is_create_form_route($route_name)) {
      $form_meta['is_create_form'] = TRUE;
    }

    // Get pages where the tabs should be shown.
    $tabs_routes = _joinup_vertical_tabs_routes();

    if (in_array($route_name, $tabs_routes)) {

      // Entity type form with tabs.
      $tabs_types = ['collection', 'solution', 'tallinn_report'];

      // Get entity type on edit form.
      if ($entity = $route_match->getParameter('rdf_entity')) {
        $entity_type = $entity->getType();
      }

      // Get entity type on create form.
      elseif ($entity = $route_match->getParameter('rdf_type')) {
        $entity_type = $entity->id();
      }

      // Get entity type on node edit form.
      elseif ($entity = $route_match->getParameter('node')) {
        $entity_type = $entity->bundle();
      }

      if (isset($entity_type) && in_array($entity_type, $tabs_types, TRUE)) {
        $form_meta['has_tabs'] = TRUE;
      }
    }
  }

  return $form_meta;
}

/**
 * Gives information about menu_local_task item being displayed.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route object.
 *
 * @return string
 *   Whether a menu_local_task is of horizontal or menu display type.
 */
function _joinup_menu_local_task_by_route(RouteMatchInterface $route_match) {
  if ($route_name = $route_match->getRouteName()) {
    if (in_array($route_name, _joinup_horizontal_tabs_routes())) {
      return 'horizontal';
    }
    return 'menu';
  }
}

/**
 * Get a list of routes where menu_local_tasks are normal horizontal tabs.
 *
 * @return array
 *   The routes.
 */
function _joinup_horizontal_tabs_routes() {
  return [
    'user.login',
    'user.pass',
    'user.register',
  ];
}

/**
 * Get a list of routes which should have tabs.
 *
 * @return array
 *   The routes.
 */
function _joinup_vertical_tabs_routes() {
  return [
    'entity.node.edit_form',
    'entity.rdf_entity.edit_form',
    'rdf_entity.propose_form',
    'solution.collection_solution.add',
    'rdf_entity.rdf_add',
  ];
}

/**
 * Get a list of routes which should have blue header.
 *
 * @return array
 *   The routes.
 */
function _joinup_blue_header_routes() {
  return [
    'adms_validator.adms_validator_form',
    'cas_account_link.form',
    'collection.propose_form',
    'contact_form.contact_page',
    'entity.node.edit_form',
    'entity.ogmenu_instance.edit_form',
    'entity.rdf_entity.edit_form',
    'rdf_entity.propose_form',
    'user.login',
    'user.pass',
    'user.register',
  ];
}

/**
 * Get a list of routes which should not have blue header.
 *
 * @return array
 *   The routes.
 */
function _joinup_non_blue_header_routes() {
  return [
    'entity.user.edit_form',
    'simplenews.newsletter_subscriptions_user',
  ];
}

/**
 * Get a list of routes which should have blue header, but they are not forms.
 *
 * @return array
 *   The routes.
 */
function _joinup_not_forms_routes() {
  return [
    'node.add_page',
    'rdf_entity.rdf_add_page',
  ];
}

/**
 * Get a list of overview page routes.
 *
 * @return array
 *   The routes.
 */
function _joinup_overview_page_routes() {
  return [
    'view.solutions.page_1',
    'view.collections.page_1',
    'view.content_overview.page_1',
  ];
}

/**
 * Check whether a route is one for a create content form.
 *
 * @param string $route_name
 *   The route name.
 *
 * @return bool
 *   Whether the route contains a create form.
 */
function _joinup_is_create_form_route($route_name) {
  // Routes known to be create forms.
  $create_content_routes = [
    'collection.propose_form',
    'node.add',
    'node.add_page',
    'rdf_entity.propose_form',
    'rdf_entity.rdf_add',
    'rdf_entity.rdf_add_page',
    'solution.collection_solution.add',
  ];

  if (
    preg_match('/.add$/', $route_name) ||
    in_array($route_name, $create_content_routes)
  ) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Get an inline autor.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node, where we get the author.
 *
 * @return array
 *   Renderable array contains the author.
 */
function _joinup_theme_get_author(NodeInterface $node) {
  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('user');
  $author = $node->get('uid')->entity;
  $author_inline = $view_builder->view($author, 'inline');

  return $author_inline;
}

/**
 * Get a file extension.
 *
 * @param \Drupal\file\Entity\File $file
 *   The file, where we get an extension.
 *
 * @return string
 *   Extension of the file.
 */
function _joinup_theme_get_file_extension(File $file) {
  $file_icon = pathinfo($file->getFilename(), PATHINFO_EXTENSION);

  // List of available icons.
  $available_icons = [
    'csv',
    'doc',
    'docx',
    'exe',
    'gif',
    'jpg',
    'pdf',
    'png',
    'ppt',
    'pptx',
    'rar',
    'svg',
    'txt',
    'xls',
    'xlsx',
    'zip',
  ];

  // Check if icon exist, otherwise set default icon.
  if (in_array($file_icon, $available_icons)) {
    return $file_icon;
  }
  else {
    return 'default';
  }
}

/**
 * Implements hook_theme().
 */
function joinup_theme_theme($existing, $type, $theme, $path) {
  return [
    'buttons_separated_form' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
    'joinup_exposed_search' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
    'joinup_user_form' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
    'share_content_form' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
    'social_share' => [
      'variables' => ['entity' => NULL],
      'path' => $path . '/templates/parts',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function joinup_theme_preprocess_html(&$variables) {
  /** @var \Drupal\Core\Routing\CurrentRouteMatch $route_match */
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Some of our canonical entity pages have tours on them that vary by the
  // entity bundle. If we are on such a page, add a body class that indicates
  // the entity type and bundle.
  $route_mapping = ['entity.rdf_entity.canonical' => 'rdf_entity'];
  if (array_key_exists($route_name, $route_mapping)) {
    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $route_match->getParameter($route_mapping[$route_name]);
    $variables['canonical_entity_page'] = TRUE;
    $variables['entity_type'] = $entity->getEntityTypeId();
    $variables['bundle'] = $entity->bundle();
  }

  // Set a variable that identifies the search page.
  if ($route_name == 'view.search.page_1') {
    $variables['is_search_page'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function joinup_theme_preprocess_page(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();

  // Get additional info about forms which should have logic in templates.
  $form_meta = _joinup_form_meta_by_route($route_match);

  // Get page title.
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  // Check if page is form page and page content has no white background.
  $is_form_container = FALSE;

  // We need to show the header in a blue variant on certain routes:
  // node and rdf entity forms, user forms.
  $route_name = $route_match->getRouteName();

  // Get routes which should have modifications.
  $blue_header_routes = _joinup_blue_header_routes();
  $other_forms = _joinup_non_blue_header_routes();
  $not_forms = _joinup_not_forms_routes();

  if (!empty($route_name)) {
    if (in_array($route_name, $other_forms)) {
      $is_form_container = TRUE;
    }

    if (in_array($route_name, $blue_header_routes)) {
      $variables['is_blue_header'] = TRUE;
      $is_form_container = TRUE;
    }
  }

  // Check pattern for add pages.
  if ($form_meta['is_create_form']) {
    $variables['is_blue_header'] = TRUE;
    $is_form_container = TRUE;
  }

  // Check whether a form should accommodate tabs.
  if ($form_meta['has_tabs']) {
    $variables['has_vertical_tabs'] = TRUE;
    $is_form_container = TRUE;
  }

  // Check if it is add content or rdf overview page.
  // It needs to be called after other checks.
  if (!empty($route_name) && in_array($route_name, $not_forms)) {
    $is_form_container = FALSE;
  }

  if (isset($variables['is_blue_header'])) {
    // Move the title from the content region to featured region.
    $title = $variables['page']['content']['pagetitle'];
    unset($variables['page']['content']['pagetitle']);
  }

  // Retrieve the Joinup version and link to display in the footer.
  /** @var \Drupal\joinup_core\JoinupVersionInterface $joinup_version */
  $joinup_version = \Drupal::service('joinup_core.joinup_version');
  $variables['version'] = $joinup_version->getVersion();
  $variables['version_url'] = $joinup_version->getUrl();

  // Remove title on pages, where title is already in the header.
  if ($route_name == 'entity.rdf_entity.canonical') {

    if ($entity = $route_match->getParameter('rdf_entity')) {
      $rdf_type = $entity->getType();
    }

    if (isset($rdf_type) && in_array($rdf_type, ['collection', 'solution'])) {
      unset($variables['page']['content']['pagetitle']);
    }
  }

  // Set adjusting class on form when necessary.
  if ($is_form_container) {
    $variables['container_class'] = 'content-container--form';
  }
  else {
    $variables['container_class'] = 'content-container--default';
  }

  // Set title back in the global page variables.
  $variables['title'] = $title;

  // Move title on batch pages from header to content.
  if ($route_name == 'system.batch_page.html') {
    unset($variables['page']['header']['#type']);
    unset($variables['page']['header']['#title']);

    $variables['custom_content_title'] = $title;
  }

  // Set a variable that identifies the search page.
  if ($route_name == 'view.search.page_1') {
    $variables['is_search_page'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function joinup_theme_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();

  $variables['visually_hidden_class'] = '';

  // @todo Move the permalink computing outside the theme layer, in ISAICP-4724.
  // @see https://citnet.tech.ec.europa.eu/CITnet/jira/browse/ISAICP-4724
  if ($permalink = joinup_build_permalink($route_match)) {
    $variables['permalink'] = $permalink;
  }

  // Get any custom properties for forms.
  $form_meta = _joinup_form_meta_by_route($route_match);

  if ($route_name = $route_match->getRouteName()) {

    // Flag title for create pages to have additional logic in display.
    if ($form_meta['is_create_form'] || _joinup_is_create_form_route($route_name)) {
      $variables['is_create_page'] = TRUE;
    }

    // Set visually hidden class on overview pages.
    if (in_array($route_name, _joinup_overview_page_routes())) {
      $variables['visually_hidden_class'] = ' visually-hidden';
    }
  }
}

/**
 * Builds the permalink for the given route.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route object.
 *
 * @return string
 *   The permalink uri.
 */
function joinup_build_permalink(RouteMatchInterface $route_match) {
  $route_name = $route_match->getRouteName();

  $routes = [
    'entity.node.canonical',
    'entity.rdf_entity.canonical',
    'entity.rdf_entity.about_page',
  ];

  if (!in_array($route_name, $routes)) {
    return FALSE;
  }

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = NULL;

  if (!($parameters = $route_match->getRouteObject()->getOption('parameters')) || empty($parameters)) {
    return FALSE;
  }

  foreach ($parameters as $key => $info) {
    if (!empty($info['type']) && $info['type'] == "entity:$key") {
      $type = $key;
      break;
    }
  }

  if (!isset($type) || !($entity = $route_match->getParameter($type))) {
    return FALSE;
  }

  // Entity ID is pointing to the publication office redirect.
  $namespaces = implode('|', array_keys(IdRedirect::getEntityTypeFromPersistentUriNamespace()));
  if (preg_match('{^http://data.europa.eu/(?:' . $namespaces . ')/}', $entity->id())) {
    return $entity->id();
  }

  // Don't process the path to avoid pathauto aliasing.
  return $entity->toUrl('canonical', [
    'path_processing' => FALSE,
    'absolute' => TRUE,
  ])->toString();
}

/**
 * Implements hook_theme_preprocess_menu().
 */
function joinup_theme_preprocess_menu(&$variables) {
  if ($variables['menu_name'] != 'account') {
    return;
  }
  // Set the account logo.
  $account = \Drupal::currentUser()->getAccount();
  $user = User::load($account->id(), TRUE);
  $photo = $user->get('field_user_photo');
  $variables['profile_icon'] = '/themes/joinup/images/user-profile-icon.png';
  if (!$photo->isEmpty()) {
    $reference = $photo->first()->getValue();
    /** @var \Drupal\file\Entity\File $file */
    if ($file = File::load($reference['target_id'])) {
      $uri = $file->getFileUri();
      $url = ImageStyle::load('profile_icon')->buildUrl($uri);
      $variables['profile_icon'] = $url;
    }
  }
  $variables['#cache']['contexts'][] = 'user.photo';

  // Set login text instead of image.
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  if ($route_name === 'joinup_front_page.homepage' && $user->isAnonymous()) {
    $variables['has_sign_in_text'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function joinup_theme_preprocess_block(&$variables) {
  $block_id = $variables['elements']['#id'] ?? NULL;

  if (isset($block_id) && $block_id == 'joinup_theme_content') {
    $route_match = \Drupal::routeMatch();
    $route_name = $route_match->getRouteName();
    // Indicate if page contains listing
    // and should not have white background.
    $is_listing = FALSE;
    switch ($route_name) {
      case 'entity.rdf_entity.canonical':
        $entities = [
          'asset_distribution',
          'asset_release',
          'collection',
          'solution',
        ];
        // Get entity type.
        $entity = $route_match->getParameter('rdf_entity');
        if (!empty($entity)) {
          $bundle = $entity->getType();
          if (in_array($bundle, $entities)) {
            $is_listing = TRUE;
          }
        }
        break;

      case 'entity.node.canonical':
      case 'asset_release.solution_asset_release.overview':
      case 'view.collections.page_1':
      case 'view.search.page_1':
      case 'view.solutions.page_1':
      case 'view.content_overview.page_1':
      case 'entity.rdf_entity.member_overview':
      case 'entity.user.canonical':
      case 'joinup_subscription.my_subscriptions':
      case 'joinup_licence.comparer':
        $is_listing = TRUE;
        break;
    }
    $variables['is_listing'] = $is_listing;
  }

  $is_main_menu = isset($variables['content']['#theme']) && $variables['content']['#theme'] == 'menu__main';
  $is_main_local_tasks = isset($variables['content']['#theme']) && $variables['content']['#theme'] == 'menu_local_tasks';

  if ($is_main_menu || $is_main_local_tasks) {
    $variables['content']['#theme'] = $variables['content']['#theme'] . '__' . $block_id;
  }

  switch ($block_id) {
    // The front page is also shown as a listing of entities.
    case 'frontpageblock':
      $variables['is_listing'] = TRUE;
      break;

    // Add block separated suggestion for bottom navigation.
    case 'navigation_bottom':
      $variables['content']['#extra_suggestion'] = 'block__separated';
      break;

    // Add class to navigation bottom links on custom pages.
    case 'toc_outline':
      $variables['content']['#attributes']['class'][] = 'navigation-bottom__links';
      if (isset($variables['content']['#links']) && count($variables['content']['#links']) == 1) {
        $variables['content']['#attributes']['class'][] = 'navigation-bottom__links--only-next';
      }
      break;

    // Add classes to identify the search bars.
    case 'global_search':
      $variables['attributes']['class'][] = 'search-bar search-bar--header search-bar--white mdl-textfield mdl-js-textfield mdl-chipfield mdl-textfield--expandable mdl-textfield--floating-label mdl-textfield--align-right';
      break;

    case 'exposed_form_search_page':
      $variables['attributes']['class'][] = 'search-bar mdl-textfield mdl-js-textfield mdl-chipfield mdl-textfield--floating-label mdl-textfield--full-width';
      break;

    // Add special classes for dropdown menus in header.
    case 'support':
    case 'joinup_theme_account_menu':
      $variables['attributes']['class'][] = 'block--small-nav';
      break;
  }

  // Set default title tag.
  $variables['title_tag'] = 'h2';

  // Set classes for block__separated.
  if (isset($variables['content']['#extra_suggestion']) && $variables['content']['#extra_suggestion'] == 'block__separated') {
    $variables['attributes']['class'][] = 'block--separated';
    $variables['title_attributes']['class'][] = 'block__title';
    $variables['title_tag'] = 'h3';
  }

  // When rendering some entity within a block, e.g. a menu, in cases such as a
  // preprocess hook of the entity, there is no information about the block
  // that the entity is displayed in. This will allow us to identify such cases.
  $variables['content']['#attributes']['_block_id'] = $block_id;
}

/**
 * Implements hook_preprocess_HOOK() for fieldset.html.twig.
 */
function joinup_theme_preprocess_fieldset(&$variables) {
  // Make sure the "for" attribute is added to the label so it is clear to which
  // of the wrapped elements this label belongs. This is important for
  // accessibility.
  if (isset($variables['element']['#id'])) {
    $variables['legend']['attributes'] = new Attribute([
      'for' => $variables['element']['#id'],
    ]);
  }
}

/**
 * Prepares variables for file form widget templates.
 *
 * Default template: file-managed-file.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the file.
 */
function joinup_preprocess_file_managed_file(array &$variables) {
  // Workaround for https://www.drupal.org/node/2705471
  // Restore states related attributes.
  $element = &$variables['element'];
  if (!empty($element['#states'])) {
    $variables['attributes']['data-drupal-states'] = Json::encode($element['#states']);
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_theme_theme_suggestions_textarea_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#extra_suggestion']) && $variables['element']['#extra_suggestion'] == 'comment_plain') {
    $suggestions[] = 'textarea__comment_plain';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_theme_theme_suggestions_table_alter(array &$suggestions, array $variables) {
  // Add custom table template for the licence comparer.
  if (isset($variables['attributes']['data-drupal-selector'])
    && $variables['attributes']['data-drupal-selector'] == 'licence-comparer') {
    $suggestions[] = 'table__licence_comparer';
  }
}

/**
 * Implements hook_preprocess_HOOK() for the stats topic container.
 *
 * This is used for the statistics in the group header, like 'licence' and
 * 'downloads'.
 */
function joinup_theme_preprocess_container__stats_topic(&$variables) {
  $variables['topic'] = $variables['element']['#stats_topic'];
}

/**
 * Implements hook_preprocess_HOOK() for container.html.twig.
 */
function joinup_theme_preprocess_container(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Check if route is special.
  $form_meta = _joinup_form_meta_by_route($route_match);

  $form_routes = [
    'node.add',
    'rdf_entity.propose_form',
    'rdf_entity.rdf_add',
    'entity.node.edit_form',
    'collection.propose_form',
    'entity.rdf_entity.edit_form',
    'solution.collection_solution.add',
  ];

  // Check if container is field element - it has only one parent.
  if (!empty($route_name) && in_array($route_name, $form_routes)
    && isset($variables['element']['#parents'])
    && count($variables['element']['#parents']) == 1
    && $variables['element']['#id'] != 'edit-actions'
  ) {
    $variables['is_form_wrapper'] = TRUE;
  }

  // Check if page has vertical tabs.
  // It is needed for proper display action buttons.
  if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'edit-actions' && $form_meta['has_tabs']) {
    $variables['has_vertical_tabs'] = TRUE;
  }

  // Remove margin for subscribe button in tile.
  if (isset($variables['element']['submit']['#extra_suggestion']) && $variables['element']['submit']['#extra_suggestion'] === 'subscribe') {
    $variables['no_margin'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field-multiple-value-form.html.twig.
 */
function joinup_theme_preprocess_field_multiple_value_form(&$variables) {
  // Provide a 'for' property for field labels in multi-value fields
  // using id of the first element so that it is semantically clear
  // to which form element this label belongs.
  if ($variables['multiple']) {
    // Set new variable label, which contains title.
    $label = $variables['element']['#title'];
    $variables['label']['content'] = $label;
    // Lists of element types.
    $elements = [
      'target_id',
      'value',
      'uri',
    ];

    // Fixes link form element title,.
    // @see joinup_theme_preprocess_form_element().
    if (isset($variables['element']['0']['uri'])) {
      foreach ($variables['table']['#rows'] as &$value_row) {
        $value_row['data'][1]['data']['uri']['#title'] = $label;
      }
    }

    // Set first input 'id' as 'for' attribute for table label.
    foreach ($elements as $value_element) {
      if (isset($variables['element']['0'][$value_element]['#id'])) {
        $variables['label']['attributes'] = new Attribute([
          'for' => $variables['element']['0'][$value_element]['#id'],
        ]);
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field--comma-separated.html.twig.
 */
function joinup_theme_preprocess_field__comma_separated(&$variables) {
  // Only in listing modes.
  $view_modes = [
    'view_mode_tile',
    'view_mode_featured',
  ];

  // Limit number of displayed items.
  $items_limit = 3;
  if ($variables['field_name'] == 'field_keywords' && in_array($variables['element']['#view_mode'], $view_modes)) {
    $variables['items'] = array_slice($variables['items'], 0, $items_limit);
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function joinup_theme_preprocess_field(&$variables) {
  // View modes displayed as full page.
  $full_pages_modes = [
    'about',
    'full',
  ];

  if (in_array($variables['element']['#view_mode'], $full_pages_modes)) {
    // Field types for textarea.
    $textarea_types = [
      'text_long',
      'text_with_summary',
    ];

    // Add fieldset modifier for textarea.
    if (in_array($variables['field_type'], $textarea_types)) {
      $variables['attributes']['class'][] = 'fieldset';
      $variables['attributes']['class'][] = 'fieldset--textarea';
    }
  }

  // Add special class for file field on document, solution and release pages.
  $file_field_names = [
    'field_file',
    'field_isr_documentation',
    'field_is_documentation',
  ];
  if (in_array($variables['element']['#field_name'], $file_field_names)) {
    $variables['attributes']['class'] = ['fieldset__field--files'];
  }
  if ($variables['field_name'] === 'field_policy_domain' && $variables['element']['#view_mode'] === 'group_header' && $variables['element']['#bundle'] === 'solution') {
    $last = count($variables['items']) - 1;
    foreach ($variables['items'] as $index => &$item) {
      $item['content']['#attributes'] = ['class' => ['stats__text', 'bold']];
      if ($index !== $last) {
        $item['content']['#suffix'] = ',';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field--comment.html.twig.
 */
function joinup_theme_preprocess_field__comment(array &$variables): void {
  /** @var \Drupal\joinup_community_content\Entity\CommunityContentInterface $entity */
  $entity = $variables['element']['#object'];
  $variables['entity_bundle'] = $entity->get('type')->entity->getSingularLabel();
  $variables['login_path'] = Url::fromRoute('cas.login')->toString();
  $variables['register_path'] = Url::fromRoute('user.register')->toString();
}

/**
 * Implements hook_preprocess_HOOK() for form.html.twig.
 */
function joinup_theme_preprocess_form(&$variables) {
  $variables['attributes']['class'][] = 'form__with-asterisk';
  // Additional classes for members overview.
  if (strpos($variables['element']['#form_id'], 'views_form_og_members_overview_default_rdf_entity') !== FALSE) {
    $variables['attributes']['class'][] = 'form__content';
    $variables['attributes']['class'][] = 'form__margin-top';
    $variables['attributes']['class'][] = 'form__member-actions';
  }

  // Get group parameter on the search page.
  if ($variables['element']['#id'] == 'views-exposed-form-search-page-1') {
    $param = \Drupal::request()->get('f');
    if (isset($param[0])) {
      $id = str_replace('group:', '', $param[0], $count);
      if ($count == 1) {
        $rdf_entity = \Drupal::entityTypeManager()->getStorage('rdf_entity')->load($id);
        if (!empty($rdf_entity)) {
          $variables['filters'][$id] = $rdf_entity->label();
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for form-element.html.twig.
 */
function joinup_theme_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title']) && method_exists($variables['label']['#title'], 'getArguments')) {
    $arguments = $variables['element']['#title']->getArguments();

    // Array contains form elements, which are displayed with floating label.
    $floating_label_types = [
      'email',
      'entity_autocomplete',
      'password',
      'textfield',
      'url',
    ];

    if (in_array($variables['type'], $floating_label_types)) {
      // Make label visible, so it can be displayed inside floating field.
      $variables['label']['#title_display'] = 'visible';

      // Pass element title to label.
      if (!empty($arguments['@title'])) {
        $variables['label']['#title'] = $arguments['@title'];
      }
    }

    // Additional margin for custom elements.
    $additional_wrappers = [
      'field_cp_content_listing[0][enabled]',
      'field_cp_content_listing[0][wrapper][show_shared]',
      'field_cp_content_listing[0][wrapper][query_presets]',
    ];

    if (isset($variables['name']) && in_array($variables['name'], $additional_wrappers)) {
      $variables['attributes']['class'][] = 'form-wrapper';
    }
  }
}

/**
 * Implements hook_preprocess_page_title__rdf_entity__asset_distribution().
 */
function joinup_theme_preprocess_page_title__rdf_entity__asset_distribution(&$variables) {
  /** @var \Drupal\rdf_entity\Entity\Rdf $entity */
  $entity = $variables['entity'];

  // Get the view builder service from the entity type manager.
  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('rdf_entity');
  // Get the file size and licence fields.
  $field_ad_file_size = $entity->field_ad_file_size;
  $field_ad_licence = $entity->field_ad_licence;
  $field_ad_file_size = $view_builder->viewField($field_ad_file_size, 'default');
  $field_ad_licence = $view_builder->viewField($field_ad_licence, 'default');

  $variables['additional_content']['field_ad_file_size'] = $field_ad_file_size;
  $variables['additional_content']['field_ad_licence'] = $field_ad_licence;
}

/**
 * Implements hook_preprocess_page_title__node__news().
 */
function joinup_theme_preprocess_page_title__node__news(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $field_news_headline = $view_builder->viewField($node->field_news_headline, 'default');
  $variables['additional_content']['field_news_headline'] = $field_news_headline;

  $published = \Drupal::service('date.formatter')->format($node->published_at->published_at_or_created, 'date_only');
  $variables['additional_content']['published'] = $published;

  $update_date = \Drupal::service('date.formatter')->format($node->getChangedTime(), 'custom', 'd/m/Y');
  $variables['additional_content']['updated'] = $update_date;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_page_title__node__discussion().
 */
function joinup_theme_preprocess_page_title__node__discussion(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  $published = \Drupal::service('date.formatter')->format($node->published_at->published_at_or_created, 'date_only');
  $variables['additional_content']['published'] = $published;

  $update_date = \Drupal::service('date.formatter')->format($node->getChangedTime(), 'custom', 'd/m/Y');
  $variables['additional_content']['updated'] = $update_date;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_HOOK() for page-title--node--video.html.twig.
 */
function joinup_theme_preprocess_page_title__node__video(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  $published = \Drupal::service('date.formatter')->format($node->published_at->published_at_or_created, 'date_only');
  $variables['additional_content']['published'] = $published;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_HOOK() for page-title--node--glossary.html.twig.
 */
function joinup_theme_preprocess_page_title__node__glossary(&$variables) {
  $variables['title'] = t('Glossary');
}

/**
 * Implements hook_preprocess_HOOK() for page-title--node--document.html.twig.
 */
function joinup_theme_preprocess_page_title__node__document(&$variables) {
  /** @var \Drupal\joinup_document\Entity\DocumentInterface $node */
  $node = $variables['entity'];

  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');
  $field_document_publication_date = $node->getPublicationDate();
  $variables['additional_content']['publication_date'] = empty($field_document_publication_date) ? '' : $date_formatter->format($field_document_publication_date, 'custom', 'd/m/Y');

  $update_date = $date_formatter->format($node->getChangedTime(), 'custom', 'd/m/Y');
  $variables['additional_content']['updated'] = $update_date;

  $field_short_title = $view_builder->viewField($node->field_short_title, 'default');
  $variables['additional_content']['field_short_title'] = $field_short_title;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_comment().
 */
function joinup_theme_preprocess_comment(&$variables) {
  /** @var \Drupal\user\Entity\User $user */
  $user = $variables['user_picture']['#user'];
  $photo_target = $user->get('field_user_photo')->getValue();

  $variables['author'] = [
    '#theme' => 'username',
    '#account' => $user,
  ];

  $cache_metadata = (new CacheableMetadata())->addCacheableDependency($user);
  $cache_metadata->applyTo($variables['author']);

  if ($photo_target) {
    $photo_target = $photo_target[0]['target_id'];
    /** @var \Drupal\file\Entity\File $file */
    if ($file = File::load($photo_target)) {
      $uri = $file->getFileUri();
      $url = ImageStyle::load('profile_icon_big')->buildUrl($uri);
      $variables['profile_icon'] = ['#markup' => $url];
      $cache_metadata
        ->addCacheTags($user->getEntityType()->getListCacheTags())
        ->applyTo($variables['profile_icon']);
    }
  }
}

/**
 * Implements hook_preprocess_image().
 */
function joinup_theme_preprocess_image(&$variables) {
  if ($variables['style_name'] == 'profile_icon') {
    $variables['attributes']['class'][] = 'details__avatar';
    $variables['attributes']['class'][] = 'avatar';
    $variables['attributes']['class'][] = 'avatar--25';
  }
}

/**
 * Implements hook_preprocess_file_link().
 */
function joinup_theme_preprocess_file_link(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Set additional file variables on document, solution and release pages.
  $rdf_entity_pages = [
    'entity.rdf_entity.canonical',
    'entity.rdf_entity.about_page',
  ];

  if (in_array($route_name, $rdf_entity_pages)) {
    $entity = $route_match->getParameter('rdf_entity');
  }
  elseif ($route_name == 'entity.node.canonical') {
    $entity = $route_match->getParameter('node');
  }

  $file_field_bundles = [
    'document',
    'asset_release',
    'solution',
  ];

  if (isset($entity) && in_array($entity->bundle(), $file_field_bundles)) {
    $size = $variables['file']->getSize();
    if (!empty($size)) {
      $variables['size'] = format_size($size);
    }

    $variables['extension'] = _joinup_theme_get_file_extension($variables['file']);
  }
}

/**
 * Implements hook_preprocess_user().
 */
function joinup_theme_preprocess_user(&$variables) {
  $variables['full_name'] = $variables['user']->getDisplayName();

  // Truncate business title.
  $business_title = $variables['user']->get('field_user_business_title')->value;
  $variables['short_business_title'] = !empty($business_title) ? substr($business_title, 0, 30) : '';
}

/**
 * Implements hook_preprocess_user__inline().
 */
function joinup_theme_preprocess_user__inline(array &$variables): void {
  $variables['full_name'] = [
    '#theme' => 'username',
    '#account' => $variables['user'],
    '#attributes' => [
      'class' => ['value', 'gray'],
    ],
  ];
}

/**
 * Implements hook_preprocess_user__group_header().
 */
function joinup_theme_preprocess_user__group_header(&$variables) {
  // Create customizable 'member for' field.
  // It creates a timespan without label and with lower granularity.
  $variables['member_for'] = \Drupal::service('date.formatter')->formatTimeDiffSince($variables['user']->getCreatedTime(), ['granularity' => 1]);
  $variables['full_name'] = $variables['user']->getDisplayName();
  $variables['field_user_photo_url'] = !empty($variables['content']['field_user_photo'][0]['#item']->entity->uri->value) ?
    file_create_url($variables['content']['field_user_photo'][0]['#item']->entity->uri->value)
    : '';
}

/**
 * Implements hook_preprocess_page_title__node__event().
 */
function joinup_theme_preprocess_page_title__node__event(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');

  // Get dates and location fields.
  $field_event_date = $view_builder->viewField($node->get('field_event_date'), 'default');
  $field_event_location = $view_builder->viewField($node->get('field_location'), 'default');

  $published = \Drupal::service('date.formatter')->format($node->published_at->published_at_or_created, 'date_only');

  $author_inline = _joinup_theme_get_author($node);

  $variables['additional_content']['field_event_date'] = $field_event_date;
  $variables['additional_content']['field_location'] = $field_event_location;
  $variables['additional_content']['published'] = $published;
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_search_api_field__user__field_user_content().
 *
 * Provides a nicer message when the user hasn't created any content.
 */
function joinup_theme_preprocess_search_api_field__user__field_user_content(&$variables) {
  // The "no_results_found" render array is not there if there are results.
  if (empty($variables['no_results_found'])) {
    return;
  }

  $first_name = $variables['entity']->get('field_user_first_name')->value;
  if (!empty($first_name)) {
    $markup = t('@name does not have any content yet.', ['@name' => $first_name]);
  }
  else {
    $markup = t('This user does not have any content yet.');
  }
  $variables['no_results_found'] = [
    '#prefix' => '<div class="page__content">',
    '#suffix' => '</div>',
    '#markup' => $markup,
  ];
}

/**
 * Implements hook_preprocess_HOOK() for joinup-tiles--members-overview.html.twig.
 */
function joinup_theme_preprocess_joinup_tiles__members_overview(&$variables) {
  // The members overview is a view of OgMembership entities, but these have no
  // view modes. Replace them with standard User tiles.
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('user');
  /** @var \Drupal\og\OgMembershipInterface $row */
  foreach ($variables['rows'] as &$row) {
    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = $row['content']['#row']->_entity;
    $row['content'] = $view_builder->view($membership->getOwner(), 'view_mode_tile');
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function joinup_theme_preprocess_menu_local_action(&$variables) {
  // Add mdl classes for local action button.
  $mdl_button_classes = [
    'button--blue-light',
    'mdl-button',
    'mdl-js-button',
    'mdl-button--raised',
    'mdl-js-ripple-effect',
    'mdl-button--accent',
  ];
  $variables['link']['#options']['attributes']['class'] = array_merge($variables['link']['#options']['attributes']['class'], $mdl_button_classes);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function joinup_theme_preprocess_menu_local_task(&$variables) {
  $route_match = \Drupal::routeMatch();
  $menu_type = _joinup_menu_local_task_by_route($route_match);

  if ($menu_type == 'horizontal') {
    $variables['attributes']['class'][] = 'tab tab--horizontal mdl-tabs__tab';
  }
  else {
    // Every other occasion, item should be in MDL dropdown menu.
    $variables['attributes']['class'][] = 'mdl-menu__item';
  }

  // Active flag.
  if (isset($variables['is_active']) && $variables['is_active'] == TRUE) {
    $variables['attributes']['class'][] = 'is-active';
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--moderation.html.twig.
 *
 * - Removes the contextual links.
 * - Adds an edit URL.
 */
function joinup_theme_preprocess_node__moderation(&$variables) {
  joinup_theme_remove_contextual_links($variables);
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $variables['edit_url'] = $node->toUrl('edit-form')->toString();
}

/**
 * Implements hook_preprocess_HOOK() for details.html.twig.
 */
function joinup_theme_preprocess_details(&$variables) {
  // Add additional class for multiple files widget.
  if (isset($variables['element']['#theme']) && $variables['element']['#theme'] == 'file_widget_multiple') {
    $variables['attributes']['class'][] = 'table-operations';
  }
}

/**
 * Remove the contextual links from a template preprocess variable array.
 *
 * @param array $variables
 *   An array of template preprocess variables.
 *
 * @see contextual_preprocess()
 */
function joinup_theme_remove_contextual_links(array &$variables) {
  if (!empty($variables['attributes']['class'])) {
    $key = array_search('contextual-region', $variables['attributes']['class']);
    if ($key !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }
  }
  unset($variables['title_suffix']['contextual_links']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for input.html.twig.
 *
 * Add theme suggestions so we can provide different styling on some form
 * buttons.
 */
function joinup_theme_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#is_button'])) {

    // Skip dropbuttons since we have no custom styling for them. These can be
    // recognized by not having an '#array_parents' property.
    // @see \Drupal\Core\Render\Element\Actions::preRenderActionsDropbutton()
    if (empty($variables['element']['#array_parents']) || !is_array($variables['element']['#array_parents'])) {
      return;
    }

    // We need to have different styling on some buttons. The key of this
    // multi-dimension array represents the suggestion name, while its values
    // are the build array key of the button being rendered.
    $input_suggestions = [
      'input__ief_add_another' => [
        // Generic "Add more" button for multi-value widgets.
        'add_more',
        'ief_add_existing',
        'ief_add',
        'ief_reference_save',
        'ief_add_save',
        'ief_edit_save',
      ],
      'input__ief_edit' => [
        'ief_entity_edit',
        'ief_entity_edit_save',
      ],
      'input__ief_cancel' => [
        'ief_entity_cancel',
        'ief_remove_cancel',
      ],
      'input__ief_cancel_circle' => [
        'ief_add_cancel',
        'ief_edit_cancel',
        'ief_reference_cancel',
      ],
      'input__remove_button' => [
        'ief_entity_remove',
        'ief_remove_confirm',
        'remove_button',
      ],
    ];

    // The last key of #array_parents is the build array key used in the code.
    $element_key = end($variables['element']['#array_parents']);
    foreach ($input_suggestions as $suggestion => $names) {
      if (in_array($element_key, $names)) {
        $suggestions[] = $suggestion;
      }
    }
  }

  // Suggestion based on data twig suggestion created in form alter.
  if (isset($variables['element']['#extra_suggestion'])) {
    $suggestions[] = 'input__' . $variables['element']['#type'] . '__' . $variables['element']['#extra_suggestion'];
  }

  // Suggestion for search form submit.
  if (isset($variables['element']['#id']) && strpos($variables['element']['#id'], 'edit-submit-search') !== FALSE) {
    $suggestions[] = 'input__submit__search_bar';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form-element.html.twig.
 */
function joinup_theme_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form_element__' . str_replace('-', '_', $variables['element']['#type']);

  // Suggestion based on data twig suggestion created in form alter.
  if (isset($variables['element']['#extra_suggestion'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'] . '__' . $variables['element']['#extra_suggestion'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for container.html.twig.
 */
function joinup_theme_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#id'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $variables['element']['#id']);

    // Suggestion for form actions container if id has suffix.
    if (end($suggestions) != 'container__edit_actions' && strpos($variables['element']['#id'], 'edit-actions') !== FALSE) {
      $suggestions[] = 'container__edit_actions';
    }

    // Suggestion for search form submit container.
    if (isset($variables['element']['submit']['#id']) && strpos($variables['element']['submit']['#id'], 'edit-submit-search') !== FALSE) {
      $suggestions[] = 'container__edit_actions__search_bar';
    }
  }

  // Add extra suggestion for grid elements.
  $has_extra_suggestions = isset($variables['element']['#extra_suggestion']);
  if ($has_extra_suggestions) {
    $suggestions[] = $variables['element']['#extra_suggestion'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page-title.html.twig.
 *
 * Adds suggestions when the route is the canonical view of a rdf entity or a
 * node.
 */
function joinup_theme_theme_suggestions_page_title_alter(array &$suggestions, array &$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  $entity_types = ['rdf_entity', 'node'];
  foreach ($entity_types as $entity_type) {
    if ($route_name === "entity.{$entity_type}.canonical") {
      /** @var \Drupal\core\Entity\EntityInterface $entity */
      $entity = $route_match->getParameter($entity_type);
      $suggestions[] = 'page_title__' . $entity_type . '__' . $entity->bundle();
      $variables['entity'] = $entity;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form.html.twig.
 */
function joinup_theme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#form_id']);

  // Add suggestion for search form in the header.
  if ($variables['element']['#id'] == 'views-exposed-form-search-page-1') {
    $suggestions[] = 'form__joinup_exposed_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field.html.twig.
 *
 * Add theme suggestions for tile and featured view modes.
 */
function joinup_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  // Bail out early if field has a Joinup template suggestion added in the view
  // mode.
  $element = $variables['element'];
  if (!empty($element['#joinup_template_suggestion'])) {
    return;
  }

  $view_modes = [
    'view_mode_tile',
    'view_mode_featured',
  ];

  // Set suggestion based on view mode.
  if (in_array($variables['element']['#view_mode'], $view_modes)) {
    $suggestions[] = 'field__no_wrappers';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for details.html.twig.
 */
function joinup_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {
  // Add template suggestion for vertical tabs.
  if (isset($variables['element']['#group']) && $variables['element']['#group'] == 'group_general') {
    $suggestions[] = 'details__vertical_tabs';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function joinup_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // By default Material Design moves field labels inside the input fields as
  // placeholders and then moves them back above the fields as soon as something
  // is typed in them. This behaviour is not wanted for our big forms since they
  // should have nicely aligned and uniformly styled field labels. We will
  // disable the "floating label" behaviour in these forms:
  $non_floating_form_routes = [
    'collection.propose_form',
    'entity.node.edit_form',
    'entity.rdf_entity.edit_form',
    'entity.user.edit_form',
    'joinup_group.add_content',
    'joinup_licence.add',
    'node.add',
    'rdf_entity.propose_form',
    'rdf_entity.rdf_add',
    'solution.collection_solution.add',
  ];
  $enable_floating_labels = empty($route_name) || !in_array($route_name, $non_floating_form_routes);

  if ($enable_floating_labels) {
    if (!empty($variables['element']['#type'])) {
      // Array contains form elements, which are displayed with floating label.
      $floating_label_types = [
        'email',
        'entity_autocomplete',
        'password',
        'textfield',
        'url',
      ];

      if (in_array($variables['element']['#type'], $floating_label_types)) {
        if ($hook == 'form_element') {
          $suggestions[] = 'form_element__floating';

          // Floating form element with label.
          if (!empty($variables['element']['#array_parents']) && in_array('field_social_media', $variables['element']['#array_parents'], TRUE)) {
            $suggestions[] = 'form_element__floating__with_prefix';
          }
        }
        elseif ($hook == 'input') {
          $suggestions[] = 'input__floating';
        }
      }
    }

    // Add a theme suggestion for statistic topics which are being shown in the
    // group header, such as 'licence' and 'downloads'.
    if (isset($variables['element']['#type']) && $variables['element']['#type'] === 'container' && !empty($variables['element']['#stats_topic'])) {
      $original_theme_hook = $variables['theme_hook_original'];
      $suggestions[] = $original_theme_hook . '__stats_topic';
    }
  }

  // Add suggestion based on view mode for user entity.
  if ($hook == 'user' && !empty($variables['elements']['#view_mode'])) {
    $original_theme_hook = $variables['theme_hook_original'];
    $view_mode = $variables['elements']['#view_mode'];
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $view_mode);
  }

  // Some entities share the same template when rendered using tile and featured
  // view modes.
  $listing_entities = [
    'node',
    'rdf_entity',
    'user',
  ];
  if (in_array($hook, $listing_entities) && !empty($variables['elements']['#view_mode'])) {
    $view_mode = $variables['elements']['#view_mode'];
    $listing_modes = [
      'view_mode_tile',
      'view_mode_featured',
    ];

    if (in_array($view_mode, $listing_modes)) {
      $entity_type = $variables['elements']['#entity_type'];
      $bundle = $variables['elements']['#' . $entity_type]->bundle();
      $suggestions[] = $entity_type . '__' . str_replace('-', '_', $bundle) . '__listing_item';
    }
  }

  // For the search_list_item view mode of licences, add an explicit suggestion.
  if ($hook === 'rdf_entity' && !empty($variables['elements']['#view_mode']) && $variables['elements']['#view_mode'] === 'view_mode_search_list_item' && !empty($variables['elements']['#rdf_entity']) && $variables['elements']['#rdf_entity']->bundle() === 'licence') {
    $entity_type = $variables['elements']['#entity_type'];
    $bundle = $variables['elements']['#' . $entity_type]->bundle();
    $suggestions[] = $entity_type . '__' . str_replace('-', '_', $bundle) . '__search_list_item';
  }

  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function joinup_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'joinup_theme/form-components';
  $form['#attached']['drupalSettings']['widthBreakpoint'] = 100;

  // Set templates for forms where actions button are separated.
  $custom_forms = [
    'node_form',
    'rdf_entity_form',
    'message_contact_form_submission_form',
    'adms_validator_form',
    'user_login_form',
    'user_pass',
    'simplenews_subscriber_account_form',
    'ogmenu_instance_navigation_edit_form',
  ];

  // Exclude forms with tabs.
  $tab_forms = [
    'rdf_entity_collection_edit_form',
    'rdf_entity_collection_propose_form',
    'rdf_entity_solution_form',
    'rdf_entity_solution_edit_form',
    'rdf_entity_collection_add_form',
    'rdf_entity_solution_add_form',
    'node_tallinn_report_edit_form',
  ];

  if (is_array($form['#theme']) && array_intersect($form['#theme'], $custom_forms) && !array_intersect($form['#theme'], $tab_forms)) {
    $form['#theme'][] = 'buttons_separated_form';
  }

  // Add suggestion for search form in the header.
  if ($form['#id'] == 'views-exposed-form-search-page-1') {
    $form['#theme'] = ['joinup_exposed_search'];
    $form['keys']['#extra_suggestion'] = 'joinup_exposed_search';
  }

  if ($form_id === 'user_form') {
    // Set a custom layout for the user form, having fields grouped in separate
    // sections.
    $form['#theme'][] = 'joinup_user_form';

    // Change markup of the username field.
    if (isset($form['user_name'])) {
      $form['user_name']['#template'] = '<div class="form-wrapper"><div class="form__label">{{ "Username"|t }}</div><div class="form__text">{{ name }}</div></div>';
    }
  }

  $link_button_classes = [
    'button',
    'button--blue-light',
    'mdl-button',
    'mdl-js-button',
    'mdl-button--raised',
    'mdl-js-ripple-effect',
    'mdl-button--accent',
  ];

  switch ($form_id) {
    case 'join_collection_form':
      // Add class for join collection button.
      $form['join']['#attributes']['class'][] = 'button--blue-light';

      if (isset($form['pending'])) {
        // Add classes for pending membership link.
        $form['pending']['#attributes']['class'] = array_merge($link_button_classes, ['button--small']);
      }
      break;

    case 'subscribe_to_collection_form':
      // Add classes in subscribe to collection form.
      $form['actions']['cancel']['#attributes']['class'][] = 'button--small';
      $form['actions']['cancel']['#attributes']['class'][] = 'dialog-cancel';
      $form['actions']['confirm']['#attributes']['class'][] = 'button--small';
      break;

    case 'joinup_subscription_my_subscriptions':
      // Add classes for unsubscribe all link.
      if (isset($form['edit-actions']['unsubscribe_all'])) {
        $form['edit-actions']['unsubscribe_all']['#attributes']['class'] = array_merge($link_button_classes, ['featured__form-button']);
      }
      break;
  }
}

/**
 * Implements hook_preprocess_rdf_entity().
 *
 * Hide label for certain displays.
 */
function joinup_theme_preprocess_rdf_entity(&$variables) {
  if ($variables['view_mode'] == 'about') {
    $variables['is_label_hidden'] = TRUE;
  }

  // Add bundle class in listing templates.
  if ($variables['view_mode'] == 'view_mode_tile' || $variables['view_mode'] == 'view_mode_featured') {
    $bundle_class = 'listing__card--' . str_replace('_', '-', $variables['rdf_entity']->bundle());
    $variables['attributes']['class'][] = $bundle_class;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adapts the output of the collection header in collection content subscription
 * digest messages:
 * - Changes the link to the collection page to an absolute URL so this can be
 *   opened in email messages.
 */
function joinup_theme_preprocess_rdf_entity__collection__digest_message_header(&$variables) {
  $variables['url'] = $variables['rdf_entity']->toUrl('canonical', ['absolute' => TRUE])->toString();
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Provides variables needed for the compatibility_check view mode of licences.
 * This is used on the Joinup Licence Assistant Compatibility Check overview
 * page.
 */
function joinup_theme_preprocess_rdf_entity__licence__compatibility_check(&$variables) {
  joinup_theme_remove_contextual_links($variables);
  joinup_theme_preprocess_rdf_entity__licence__jla($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Provides variables needed for the both the JLA view modes (search_list_item
 * and compatibility_check) of licences.
 */
function joinup_theme_preprocess_rdf_entity__licence__jla(&$variables) {
  /** @var \Drupal\joinup_licence\Entity\LicenceInterface $entity */
  $entity = $variables['elements']['#rdf_entity'];
  $variables['label']['#attributes']['class'][] = 'listing__teaser';
  $variables['content']['field_licence_description']['#attributes']['class'][] = 'listing__teaser';

  $variables['content']['spdx_licence_id']['#label_display'] = 'hidden';
  $variables['content']['spdx_licence_id']['#prefix'] = '<span class="icon icon--licence"></span>';
  $variables['content']['spdx_licence_external_url']['#attributes']['class'][] = 'licence-tile__button';
  $variables['content']['spdx_licence_external_url']['#attributes']['target'] = '_blank';

  $variables['spdx_licence_id_plain'] = $entity->getSpdxLicenceId();

  // Convert the URL to a string, since in the Twig template it is filtered
  // using {{ url|clean_id }} which expects a string type.
  if ($variables['url'] instanceof Url) {
    $variables['url'] = $variables['url']->toString();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Provides variables needed for the search_list_item view mode of licences.
 * This is used on the Joinup Licence Assistant overview page.
 */
function joinup_theme_preprocess_rdf_entity__licence__search_list_item(&$variables) {
  joinup_theme_preprocess_rdf_entity__licence__jla($variables);

  /** @var \Drupal\joinup_licence\Entity\LicenceInterface $entity */
  $entity = $variables['elements']['#rdf_entity'];

  // Calculate variables related to the legal type.
  $types = $entity->getLegalTypes();
  if (!empty($types)) {
    $data_property_categories = [];
    $category_lists = [];
    foreach ($types as $type) {
      $parent = $type->getCategory();
      if (empty($parent)) {
        continue;
      }
      $parent_normalized_title = strtolower($parent->label());
      if (!isset($category_lists[$parent->id()])) {
        $category_lists[$parent->id()] = [
          'title' => $parent->label(),
          'weight' => $parent->getWeight(),
          'class' => 'licence-tile__line--' . $parent_normalized_title,
        ];
      }
      $category_lists[$parent->id()]['items'][] = [
        'title' => $type->label(),
        'weight' => $type->getWeight(),
        'description' => $type->getDescription(),
      ];
      $normalized_title = htmlentities(str_replace([' ', '/'], ['-', '-'], strtolower($type->label())));
      $data_property_categories[$type->id()] = $normalized_title;
    }

    if (!empty($data_property_categories)) {
      $sort_function = function ($a, $b) {
        return $a['weight'] <=> $b['weight'];
      };

      usort($category_lists, $sort_function);
      foreach ($category_lists as &$category_data) {
        usort($category_data['items'], $sort_function);
      }

      $variables['legal_categories'] = implode(' ', $data_property_categories);
      $variables['category_lists'] = $category_lists;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for rdf-entity--solution--listing-item.html.twig.
 *
 * - Add a flag that indicates whether to show the download counter.
 */
function joinup_theme_preprocess_rdf_entity__solution__listing_item(&$variables) {
  // Add a flag to indicate if the download counter is visible.
  if (isset($variables['elements']['downloads']['count']['#access'])) {
    $variables['show_download_counter'] = $variables['elements']['downloads']['count']['#access'];
  }

  $rdf_entity = $variables['rdf_entity'];
  if (!$rdf_entity->get('collection')->isEmpty()) {
    /** @var \Drupal\rdf_entity\RdfInterface|null $parent */
    $parent = $rdf_entity->get('collection')->first()->entity;
    $variables['attributes']['data-drupal-parent-id'] = $parent->id();
    $variables['attributes']['data-drupal-parent-label'] = $parent->label();
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--discussion--listing-item.html.twig.
 *
 * Provides the comment count as a variable.
 */
function joinup_theme_preprocess_node__discussion__listing_item(&$variables) {
  $node = $variables['elements']['#node'];
  $variables['comment_count'] = $node->get('field_replies')->comment_count;
}

/**
 * Implements hook_preprocess_HOOK() for node--event--listing-item.html.twig.
 *
 * Hides the separator and end date as only the start date is shown in tiles.
 */
function joinup_theme_preprocess_node__event__listing_item(&$variables) {
  if (!empty($variables['content']['field_event_date'])) {
    $element = &$variables['content']['field_event_date'];
    foreach (Element::children($element) as $key) {
      // The "start_date" render array is present when more then one date is
      // rendered.
      // @see \Drupal\joinup_core\Plugin\Field\FieldFormatter\CondensedDateRangeFormatter::viewElements()
      if (!empty($element[$key]['start_date'])) {
        $element[$key]['separator']['#access'] = FALSE;
        $element[$key]['end_date']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--tallinn-report--listing-item.html.twig.
 */
function joinup_theme_preprocess_node__tallinn_report__listing_item(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $variables['last_update']['#markup'] = '-';
  if (!$node->get('created')->equals($node->get('changed'))) {
    $date = \Drupal::service('date.formatter')->format($node->getChangedTime(), 'custom', 'd/m/Y');
    $variables['last_update'] = $date;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add theme suggestions directly to the comment body field.
 */
function joinup_theme_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->isAnonymous()) {
    $form['field_body']['#attributes']['class'][] = 'comment-form-anonymous';
    $form['field_body']['widget'][0]['#extra_suggestion'] = 'comment_plain';
  }
}

/**
 * Implements hook_preprocess_HOOK() for table--file-formatter-table.html.twig.
 *
 * Extracts the file extension and makes it available on the row level.
 */
function joinup_theme_preprocess_table__file_formatter_table(&$variables) {
  if (!empty($variables['rows'])) {
    foreach ($variables['rows'] as $index => $row) {
      /** @var \Drupal\file\Entity\File $file */
      $file = $variables['rows'][$index]['cells'][0]['content']['#file'];
      $variables['rows'][$index]['#file_extension'] = _joinup_theme_get_file_extension($file);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide a separate suggestion for menus depending on their region.
 */
function joinup_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['_block_id']) && ($block = Block::load($variables['attributes']['_block_id']))) {
    $region = $block->getRegion();
    $suggestions[] = $variables['theme_hook_original'] . '__region_' . $region;
    unset($variables['attributes']['_block_id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  // A list of view names in which to exclude the not needed wrapper.
  $without_wrappers = [
    'licence_list',
  ];

  if (in_array($variables['view']->id(), $without_wrappers)) {
    $hook = 'no_wrappers';
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  // Add suggestions for individual view displays.
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id();
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->current_display;
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['view']->id() . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Remove the default links from the table of contents.
 */
function joinup_theme_preprocess_menu__og__navigation__region_content_bottom(array &$variables) {
  $links_to_be_stripped = [
    'entity.rdf_entity.canonical' => 'Overview',
    'entity.rdf_entity.member_overview' => 'Members',
    'entity.rdf_entity.about_page' => 'About',
  ];

  foreach ($variables['items'] as $menu_link_id => $menu_item) {
    /** @var \Drupal\Core\Url $url */
    $url = $menu_item['url'];
    $route_name = $url->getRouteName();
    if (isset($links_to_be_stripped[$route_name]) && $links_to_be_stripped[$route_name] == $menu_item['title']) {
      unset($variables['items'][$menu_link_id]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Collections might have a newsletter. Pass the necessary data that can be used
 * to render the subscription form inside a tile.
 */
function joinup_theme_preprocess_search_api_field__rdf_entity__field_collection_content__collection(array &$variables): void {
  /** @var \Drupal\rdf_entity\RdfInterface $entity */
  $entity = $variables['entity'];

  /** @var \Drupal\oe_newsroom_newsletter\Plugin\Field\FieldType\NewsletterItem $newsletter_field_item */
  $newsletter_field_item = $entity->get('field_newsletter')->first();

  $newsletter_is_enabled = !empty($newsletter_field_item) && $newsletter_field_item->isEnabled();
  $variables['newsletter_enabled'] = $newsletter_is_enabled;

  if ($newsletter_is_enabled) {
    $entity_label = $entity->label();
    $entity_label = Unicode::truncate($entity_label, 20, TRUE, TRUE);
    $variables['newsletter_motivation'] = t('Keep in touch with %collection', [
      '%collection' => $entity_label,
    ]);
    $variables['newsletter_form'] = \Drupal::formBuilder()->getForm(NewsletterSubscribeForm::class, $newsletter_field_item->getUniverse(), $newsletter_field_item->getServiceId());
  }
}

/**
 * Implements hook_preprocess_filter_caption().
 *
 * Apply styling for caption wrapper,
 * based on image styling.
 */
function joinup_theme_preprocess_filter_caption(&$variables) {
  $width_array = [
    'wysiwyg_one_third_width',
    'wysiwyg_half_width',
    'wysiwyg_full_width',
  ];

  if (!empty($variables['classes'])) {
    $variables['classes'] .= ' image-caption';
  }
  else {
    $variables['classes'] = 'image-caption';
  }

  // The image node element may be a \Drupal\filter\Render\FilteredMarkup
  // instance. Cast it to a string to be compatible with `strpos()` as strict
  // typing is enforced.
  $node = (string) $variables['node'];
  foreach ($width_array as $width) {
    if (strpos($node, $width) !== FALSE) {
      $variables['classes'] .= ' ' . str_replace('_', '-', $width);
    }
  }
}

/**
 * Implements hook_preprocess_swiftmailer().
 */
function joinup_theme_preprocess_swiftmailer(&$variables) {
  $variables['site_url'] = \Drupal::request()->getSchemeAndHttpHost();
}

/**
 * Implements hook_preprocess_message_digest().
 */
function joinup_theme_preprocess_message_digest(&$variables) {
  $variables['site_url'] = \Drupal::request()->getSchemeAndHttpHost();

  // Retrieve the recipient from the message list. The recipient is the owner of
  // the message.
  $user = array_reduce($variables['messages'], function (AccountInterface $user, array $message_render_array): AccountInterface {
    // Continue to the next message if we already found a user, or cannot find a
    // message.
    $message = $message_render_array['#message'] ?? NULL;
    if ($user->isAuthenticated() || !$message instanceof MessageInterface) {
      return $user;
    }

    return $message->getOwner();
  }, User::getAnonymousUser());

  $variables['receiver_name'] = $user->isAuthenticated() ? $user->field_user_first_name->value : t('Anonymous');
  $variables['receiver_id'] = $user->id();

  $current_time = \Drupal::time()->getCurrentTime();
  $variables['issue_date'] = date('d/m/Y', $current_time);

  $variables['frequency'] = Unicode::ucfirst($user->field_user_frequency->value);
}

/**
 * Implements hook_preprocess_node().
 *
 * - Adds the site URL to use in nodes.
 * - Adds the group ID and label as data attributes in tiles.
 * - Adds bundle class in listing templates for bundle specific theming.
 * - Adds the created date to news articles.
 * - Adds a variable indicating the attachment file type on documents.
 */
function joinup_theme_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Add the site URL to use in nodes.
  $variables['site_url'] = \Drupal::request()->getSchemeAndHttpHost();

  // Add the group ID and label as data attributes in tiles.
  if ($variables['view_mode'] === 'view_mode_tile') {
    /** @var \Drupal\rdf_entity\RdfInterface|null $parent */
    $parent = JoinupGroupHelper::getGroup($node);
    if ($parent) {
      $variables['attributes']['data-drupal-parent-id'] = $parent->id();
      $variables['attributes']['data-drupal-parent-label'] = $parent->label();
    }

    // If the node is shared somewhere, attach the related library.
    if ($node->hasField('field_shared_in') && !$node->get('field_shared_in')->isEmpty()) {
      $variables['#attached']['library'][] = 'joinup_theme/shared_entity';
    }
  }

  // Add bundle class in listing templates.
  if ($variables['view_mode'] === 'view_mode_tile' || $variables['view_mode'] === 'view_mode_featured') {
    $bundle_class = 'listing__card--' . str_replace('_', '-', $node->bundle());
    $variables['attributes']['class'][] = $bundle_class;
  }

  // Add the created date to news articles.
  if ($node->bundle() === 'news') {
    $variables['created'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'date_only');
  }

  // Add a variable indicating the attachment file type on documents.
  if ($node->bundle() === 'document' && !$node->get('field_file')->isEmpty()) {
    /** @var \Drupal\file\FileInterface $file */
    $file = $node->get('field_file')->first()->entity;

    // The document could reference an orphaned file entity, so only proceed if
    // we actually have a file.
    if (!empty($file)) {
      $is_remote = \Drupal::service('file_url.handler')->isRemote($file);

      if (!$is_remote) {
        $variables['extension'] = pathinfo($file->getFilename(), PATHINFO_EXTENSION);
      }
      else {
        $variables['extension'] = t('External');
      }
    }
  }
}

/**
 * Preprocess function for the "social_share" theme hook.
 *
 * @param array $variables
 *   An associative array containing:
 *   - entity: the entity being shared.
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 *   Thrown when the entity being shared does not support generating a URL.
 */
function joinup_theme_preprocess_social_share(array &$variables) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $variables['entity'];
  // Generate an entity absolute URL.
  $variables['url'] = $entity->toUrl('canonical', [
    'language' => $entity->language(),
  ])->setAbsolute();

  $variables['encoded_url'] = urlencode($variables['url']->toString());
  $variables['encoded_title'] = urlencode($entity->label());
}
