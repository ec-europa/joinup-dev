<?php

/**
 * @file
 * Functions to support theming in the Joinup theme.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;

/**
 * Gives meta properties about forms based on routes.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route object.
 *
 * @return array
 *   The additional properties or features a given form should have.
 */
function _joinup_form_meta_by_route(RouteMatchInterface $route_match) {
  // Declare available types.
  $form_meta = [
    'is_create_form' => FALSE,
    'has_tabs' => FALSE,
  ];

  if ($route_name = $route_match->getRouteName()) {

    if (_joinup_is_create_form_route($route_name)) {
      $form_meta['is_create_form'] = TRUE;
    }

    // Get pages where the tabs should be shown.
    $tabs_routes = _joinup_vertical_tabs_routes();

    if (in_array($route_name, $tabs_routes)) {

      // Entity type form with tabs.
      $tabs_types = ['collection', 'solution', 'tallinn_report'];

      // Get entity type on edit form.
      if ($entity = $route_match->getParameter('rdf_entity')) {
        $entity_type = $entity->getType();
      }

      // Get entity type on create form.
      elseif ($entity = $route_match->getParameter('rdf_type')) {
        $entity_type = $entity->id();
      }

      // Get entity type on node edit form.
      elseif ($entity = $route_match->getParameter('node')) {
        $entity_type = $entity->bundle();
      }

      if (isset($entity_type) && in_array($entity_type, $tabs_types, TRUE)) {
        $form_meta['has_tabs'] = TRUE;
      }
    }
  }

  return $form_meta;
}

/**
 * Gives information about menu_local_task item being displayed.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route object.
 *
 * @return string
 *   Whether a menu_local_task is of horizontal or menu display type.
 */
function _joinup_menu_local_task_by_route(RouteMatchInterface $route_match) {
  if ($route_name = $route_match->getRouteName()) {
    if (in_array($route_name, _joinup_horizontal_tabs_routes())) {
      return 'horizontal';
    }
    return 'menu';
  }
}

/**
 * Get a list of routes where menu_local_tasks are normal horizontal tabs.
 *
 * @return array
 *   The routes.
 */
function _joinup_horizontal_tabs_routes() {
  return [
    'user.login',
    'user.pass',
    'user.register',
  ];
}

/**
 * Get a list of routes which should have tabs.
 *
 * @return array
 *   The routes.
 */
function _joinup_vertical_tabs_routes() {
  return [
    'entity.node.edit_form',
    'entity.rdf_entity.edit_form',
    'rdf_entity.propose_form',
    'solution.collection_solution.add',
    'rdf_entity.rdf_add',
  ];
}

/**
 * Get a list of routes which should have blue header.
 *
 * @return array
 *   The routes.
 */
function _joinup_blue_header_routes() {
  return [
    'adms_validator.adms_validator_form',
    'collection.propose_form',
    'contact_form.contact_page',
    'entity.node.edit_form',
    'entity.ogmenu_instance.edit_form',
    'entity.rdf_entity.edit_form',
    'rdf_entity.propose_form',
    'user.login',
    'user.pass',
    'user.register',
  ];
}

/**
 * Get a list of routes which should not have blue header.
 *
 * @return array
 *   The routes.
 */
function _joinup_non_blue_header_routes() {
  return [
    'joinup_subscription.subscription_settings',
    'entity.user.edit_form',
    'simplenews.newsletter_subscriptions_user',
  ];
}

/**
 * Get a list of routes which should have navy blue header.
 *
 * @return array
 *   The routes.
 */
function _joinup_navy_blue_header_routes() {
  return [
    'view.search.page_1',
  ];
}

/**
 * Get a list of routes which should have blue header, but they are not forms.
 *
 * @return array
 *   The routes.
 */
function _joinup_not_forms_routes() {
  return [
    'node.add_page',
    'rdf_entity.rdf_add_page',
  ];
}

/**
 * Get a list of overview page routes.
 *
 * @return array
 *   The routes.
 */
function _joinup_overview_page_routes() {
  return [
    'view.solutions.page_1',
    'view.collections.page_1',
    'view.content_overview.page_1',
  ];
}

/**
 * Check whether a route is one for a create content form.
 *
 * @param string $route_name
 *   The route name.
 *
 * @return bool
 *   Whether the route contains a create form.
 */
function _joinup_is_create_form_route($route_name) {
  // Routes known to be create forms.
  $create_content_routes = [
    'collection.propose_form',
    'node.add',
    'node.add_page',
    'rdf_entity.propose_form',
    'rdf_entity.rdf_add',
    'rdf_entity.rdf_add_page',
    'solution.collection_solution.add',
  ];

  if (
    preg_match('/.add$/', $route_name) ||
    in_array($route_name, $create_content_routes)
  ) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Get an inline autor.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node, where we get the author.
 *
 * @return array
 *   Renderable array contains the author.
 */
function _joinup_theme_get_author(NodeInterface $node) {
  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('user');
  $author = $node->get('uid')->entity;
  $author_inline = $viewBuilder->view($author, 'inline');

  return $author_inline;
}

/**
 * Implements hook_theme().
 */
function joinup_theme_theme($existing, $type, $theme, $path) {
  return [
    'share_content_form' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
    'join_collection_form' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
    'buttons_separated_form' => [
      'render element' => 'form',
      'path' => $path . '/templates/form',
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function joinup_theme_preprocess_page(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();

  // Get additional info about forms which should have logic in templates.
  $form_meta = _joinup_form_meta_by_route($route_match);

  // Get page title.
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  // Check if page is form page and page content has no white background.
  $is_form_container = FALSE;

  // We need to show the header in a blue variant on certain routes:
  // node and rdf entity forms, user forms.
  $route_name = $route_match->getRouteName();

  // Get routes which should have modifications.
  $blue_header_routes = _joinup_blue_header_routes();
  $navy_header_routes = _joinup_navy_blue_header_routes();
  $other_forms = _joinup_non_blue_header_routes();
  $not_forms = _joinup_not_forms_routes();

  if (!empty($route_name)) {
    if (in_array($route_name, $other_forms)) {
      $is_form_container = TRUE;
    }

    if (in_array($route_name, $blue_header_routes)) {
      $variables['is_blue_header'] = TRUE;
      $is_form_container = TRUE;
    }

    if (in_array($route_name, $navy_header_routes)) {
      $variables['is_navy_header'] = TRUE;
    }
  }

  // Check pattern for add pages.
  if ($form_meta['is_create_form']) {
    $variables['is_blue_header'] = TRUE;
    $is_form_container = TRUE;
  }

  // Check whether a form should accommodate tabs.
  if ($form_meta['has_tabs']) {
    $variables['has_vertical_tabs'] = TRUE;
    $is_form_container = TRUE;
  }

  // Check if it is add content or rdf overview page.
  // It needs to be called after other checks.
  if (!empty($route_name) && in_array($route_name, $not_forms)) {
    $is_form_container = FALSE;
  }

  if (isset($variables['is_blue_header'])) {
    // Move the title from the content region to featured region.
    $title = $variables['page']['content']['pagetitle'];
    unset($variables['page']['content']['pagetitle']);
  }

  // Remove title on pages, where title is already in the header.
  if ($route_name == 'entity.rdf_entity.canonical') {

    if ($entity = $route_match->getParameter('rdf_entity')) {
      $rdf_type = $entity->getType();
    }

    if (isset($rdf_type) && in_array($rdf_type, ['collection', 'solution'])) {
      unset($variables['page']['content']['pagetitle']);
    }
  }

  // Set adjusting class on form when necessary.
  if ($is_form_container) {
    $variables['container_class'] = 'content-container--form';
  }
  else {
    $variables['container_class'] = 'content-container--default';
  }

  // Set title back in the global page variables.
  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_page_title().
 */
function joinup_theme_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();

  $variables['visually_hidden_class'] = '';

  if ($permalink = joinup_build_permalink($route_match)) {
    $variables['permalink'] = $permalink;
  }

  // Get any custom properties for forms.
  $form_meta = _joinup_form_meta_by_route($route_match);

  if ($route_name = $route_match->getRouteName()) {

    // Flag title for create pages to have additional logic in display.
    if ($form_meta['is_create_form'] || _joinup_is_create_form_route($route_name)) {
      $variables['is_create_page'] = TRUE;
    }

    // Set visually hidden class on overview pages.
    if (in_array($route_name, _joinup_overview_page_routes())) {
      $variables['visually_hidden_class'] = ' visually-hidden';
    }
  }
}

/**
 * Builds the permalink for the given route.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route object.
 *
 * @return string
 *   The permalink uri.
 */
function joinup_build_permalink(RouteMatchInterface $route_match) {
  $route_name = $route_match->getRouteName();

  $routes = [
    'entity.node.canonical',
    'entity.rdf_entity.canonical',
    'entity.rdf_entity.about_page',
  ];

  if (!in_array($route_name, $routes)) {
    return FALSE;
  }

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = NULL;

  foreach (['node', 'rdf_entity'] as $type) {
    $param = $route_match->getParameter($type);
    $entity = isset($param) ? $param : $entity;
  }

  if (!$entity) {
    return FALSE;
  }

  // Entity id is pointing to the publication office redirect.
  if (strstr($entity->id(), 'http://data.europa.eu/w21/') !== FALSE) {
    return $entity->id();
  }

  // Don't process the path to avoid pathauto aliasing.
  return $entity->toUrl('canonical', ['path_processing' => FALSE, 'absolute' => TRUE])->toString();
}

/**
 * Implements hook_theme_preprocess_menu().
 */
function joinup_theme_preprocess_menu(&$variables) {
  if ($variables['menu_name'] != 'account') {
    return;
  }
  // Set the account logo.
  $account = \Drupal::currentUser()->getAccount();
  $user = user_load($account->id(), TRUE);
  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $photo */
  $photo = $user->get('field_user_photo')->first();
  $variables['profile_icon'] = '/themes/joinup/images/user-profile-icon.png';
  if ($photo) {
    $reference = $photo->getValue();
    /** @var \Drupal\file\Entity\File $file */
    $file = File::load($reference['target_id']);
    $uri = $file->getFileUri();
    $url = ImageStyle::load('profile_icon')->buildUrl($uri);
    $variables['profile_icon'] = $url;
  }
  $variables['#cache']['contexts'][] = 'user';
}

/**
 * Implements hook_preprocess_block().
 */
function joinup_theme_preprocess_block(&$variables) {
  $block_id = $variables['elements']['#id'];

  if (isset($block_id) && $block_id == 'joinup_theme_content') {
    $route_match = \Drupal::routeMatch();
    $route_name = $route_match->getRouteName();
    // Indicate if page contains listing
    // and should not have white background.
    $is_listing = FALSE;
    switch ($route_name) {
      case 'entity.rdf_entity.canonical':
        $entities = [
          'asset_distribution',
          'asset_release',
          'collection',
          'solution',
        ];
        // Get entity type.
        $entity = $route_match->getParameter('rdf_entity');
        if (!empty($entity)) {
          $bundle = $entity->getType();
          if (in_array($bundle, $entities)) {
            $is_listing = TRUE;
          }
        }
        break;

      case 'entity.node.canonical':
      case 'asset_release.solution_asset_release.overview':
      case 'view.collections.page_1':
      case 'view.search.page_1':
      case 'view.solutions.page_1':
      case 'view.content_overview.page_1':
      case 'entity.rdf_entity.member_overview':
      case 'entity.user.canonical':
        $is_listing = TRUE;
        break;
    }
    $variables['is_listing'] = $is_listing;
  }

  $is_main_menu = isset($variables['content']['#theme']) && $variables['content']['#theme'] == 'menu__main';
  $is_main_local_tasks = isset($variables['content']['#theme']) && $variables['content']['#theme'] == 'menu_local_tasks';

  if ($is_main_menu || $is_main_local_tasks) {
    $variables['content']['#theme'] = $variables['content']['#theme'] . '__' . $block_id;
  }

  // The front page is also shown as a listing of entities.
  if ($block_id === 'frontpageblock') {
    $variables['is_listing'] = TRUE;
  }

  // Set default title tag.
  $variables['title_tag'] = 'h2';

  // Set classes for block__separated.
  if (isset($variables['content']['#extra_suggestion']) && $variables['content']['#extra_suggestion'] == 'block__separated') {
    $variables['attributes']['class'][] = 'block--separated';
    $variables['title_attributes']['class'][] = 'block__title';
    $variables['title_tag'] = 'h3';
  }
}

/**
 * Implements hook_preprocess_HOOK() for fieldset.html.twig.
 */
function joinup_theme_preprocess_fieldset(&$variables) {
  // Make sure the "for" attribute is added to the label so it is clear to which
  // of the wrapped elements this label belongs. This is important for
  // accessibility.
  if (isset($variables['element']['#id'])) {
    $variables['legend']['attributes'] = new Attribute([
      'for' => $variables['element']['#id'],
    ]);
  }
}

/**
 * Prepares variables for file form widget templates.
 *
 * Default template: file-managed-file.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the file.
 */
function joinup_preprocess_file_managed_file(array &$variables) {
  // Workaround for https://www.drupal.org/node/2705471
  // Restore states related attributes.
  $element = &$variables['element'];
  if (!empty($element['#states'])) {
    $variables['attributes']['data-drupal-states'] = Json::encode($element['#states']);
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function joinup_theme_theme_suggestions_textarea_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#extra_suggestion']) && $variables['element']['#extra_suggestion'] == 'comment_plain') {
    $suggestions[] = 'textarea__comment_plain';
  }
}

/**
 * Implements hook_preprocess_HOOK() for the stats topic container.
 *
 * This is used for the statistics in the group header, like 'licence' and
 * 'downloads'.
 */
function joinup_theme_preprocess_container__stats_topic(&$variables) {
  $variables['topic'] = $variables['element']['#stats_topic'];
}

/**
 * Implements hook_preprocess_HOOK() for container.html.twig.
 */
function joinup_theme_preprocess_container(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Check if route is special.
  $form_meta = _joinup_form_meta_by_route($route_match);

  $form_routes = [
    'node.add',
    'rdf_entity.propose_form',
    'rdf_entity.rdf_add',
    'entity.node.edit_form',
    'collection.propose_form',
    'entity.rdf_entity.edit_form',
    'solution.collection_solution.add',
  ];

  // Check if container is field element - it has only one parent.
  if (!empty($route_name) && in_array($route_name, $form_routes)
    && isset($variables['element']['#parents'])
    && count($variables['element']['#parents']) == 1
    && $variables['element']['#id'] != 'edit-actions'
  ) {
    $variables['is_form_wrapper'] = TRUE;
  }

  // Check if page has vertical tabs.
  // It is needed for proper display action buttons.
  if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'edit-actions' && $form_meta['has_tabs']) {
    $variables['has_vertical_tabs'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for an advanced search inline facet region.
 *
 * Template: 'container--facet-region--inline-facets--with-advanced-search'.
 */
function joinup_theme_preprocess_container__facet_region__inline_facets__with_advanced_search(&$variables) {
  $variables['advanced_search'] = [
    '#theme' => 'advanced_search_pseudo_facet',
    '#entity' => $variables['element']['#entity'],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for field-multiple-value-form.html.twig.
 */
function joinup_theme_preprocess_field_multiple_value_form(&$variables) {
  // Provide a 'for' property for field labels in multi-value fields
  // using id of the first element so that it is semantically clear
  // to which form element this label belongs.
  if ($variables['multiple']) {
    // Set new variable label, which contains title.
    $label = $variables['element']['#title'];
    $variables['label']['content'] = $label;
    // Lists of element types.
    $elements = [
      'target_id',
      'value',
      'uri',
    ];

    // Fixes link form element title,.
    // @see joinup_theme_preprocess_form_element().
    if (isset($variables['element']['0']['uri'])) {
      foreach ($variables['table']['#rows'] as &$value_row) {
        $value_row['data'][1]['data']['uri']['#title'] = $label;
      }
    }

    // Set first input 'id' as 'for' attribute for table label.
    foreach ($elements as $value_element) {
      if (isset($variables['element']['0'][$value_element]['#id'])) {
        $variables['label']['attributes'] = new Attribute([
          'for' => $variables['element']['0'][$value_element]['#id'],
        ]);
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field--comma-separated.html.twig.
 */
function joinup_theme_preprocess_field__comma_separated(&$variables) {
  // Only in listing modes.
  $view_modes = [
    'view_mode_tile',
    'view_mode_featured',
  ];

  // Limit number of displayed items.
  $items_limit = 3;
  if ($variables['field_name'] == 'field_keywords' && in_array($variables['element']['#view_mode'], $view_modes)) {
    $variables['items'] = array_slice($variables['items'], 0, $items_limit);
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function joinup_theme_preprocess_field(&$variables) {
  // View modes displayed as full page.
  $full_pages_modes = [
    'about',
    'full',
  ];

  if (in_array($variables['element']['#view_mode'], $full_pages_modes)) {
    // Field types for textarea.
    $textarea_types = [
      'text_long',
      'text_with_summary',
    ];

    // Add fieldset modifier for textarea.
    if (in_array($variables['field_type'], $textarea_types)) {
      $variables['attributes']['class'][] = 'fieldset';
      $variables['attributes']['class'][] = 'fieldset--textarea';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for field--comment.html.twig.
 */
function joinup_theme_preprocess_field__comment(&$variables) {
  // Get entity url needed for login and register routes.
  $entity = $variables['element']['#object'];
  $variables['entity_bundle'] = Unicode::strtolower($entity->type->entity->label());

  // Get the comment status from the entity itself.
  $comments_status = $variables['element']['#items']->status;

  // On closed collections community content, anonymous users are not allowed to
  // comment. Show a message instead.
  /** @var \Drupal\rdf_entity\RdfInterface $parent */
  $parent = \Drupal::service('joinup_core.relations_manager')->getParent($entity);
  $user = \Drupal::currentUser();
  if (
    $user->isAnonymous() &&
    $parent &&
    $parent->getEntityTypeId() === 'rdf_entity' &&
    $parent->bundle() === 'collection' &&
    $parent->get('field_ar_closed')->value
  ) {
    $comments_status = 'closed_collection';
  }

  switch ($comments_status) {
    case 'closed_collection':
      $variables['comments_status'] = 'closed_collection';
      break;

    case CommentItemInterface::OPEN:
      $variables['comments_status'] = 'open';
      break;

    case CommentItemInterface::CLOSED:
      $variables['comments_status'] = 'closed';
      break;

    case CommentItemInterface::HIDDEN:
      $variables['comments_status'] = 'hidden';
      break;
  }

  $variables['login_path'] = Url::fromRoute('user.login')->toString();
  $variables['register_path'] = Url::fromRoute('user.register')->toString();
}

/**
 * Implements hook_preprocess_HOOK() for form.html.twig.
 */
function joinup_theme_preprocess_form(&$variables) {
  // Exclude collection and solution forms.
  $form_ids = [
    'rdf_entity_collection_edit_form',
    'rdf_entity_collection_propose_form',
    'rdf_entity_collection_add_form',
    'rdf_entity_solution_edit_form',
    'rdf_entity_solution_form',
    'rdf_entity_solution_add_form',
  ];

  // Display asterisk for required fields.
  if (!in_array($variables['element']['#form_id'], $form_ids)) {
    $variables['attributes']['class'][] = 'form__with-asterisk';
  }
}

/**
 * Implements hook_preprocess_HOOK() for form-element.html.twig.
 */
function joinup_theme_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title']) && method_exists($variables['label']['#title'], 'getArguments')) {
    $arguments = $variables['element']['#title']->getArguments();

    // Array contains form elements, which are displayed with floating label.
    $floating_label_types = [
      'email',
      'entity_autocomplete',
      'password',
      'textfield',
      'url',
    ];

    if (in_array($variables['type'], $floating_label_types)) {
      // Make label visible, so it can be displayed inside floating field.
      $variables['label']['#title_display'] = 'visible';

      // Pass element title to label.
      if (!empty($arguments['@title'])) {
        $variables['label']['#title'] = $arguments['@title'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_page_title__rdf_entity__asset_release().
 */
function joinup_theme_preprocess_page_title__rdf_entity__asset_release(&$variables) {
  /** @var \Drupal\rdf_entity\Entity\Rdf $entity */
  $entity = $variables['entity'];

  $variables['additional_content']['full_label'] = new TranslatableMarkup('@label @ver', [
    '@label' => $entity->label(),
    '@ver' => $entity->field_isr_release_number->value,
  ]);

  $is_latest_release = FALSE;
  $field_solution = $entity->get('field_isr_is_version_of');
  if (!empty($field_solution) && ($solution = $field_solution->entity)) {
    // @todo Find a better way of marking the latest release that doesn't
    //   involve performing a database query in the theme layer.
    // @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-3101
    $latest_release = solution_get_latest_release($solution);
    if ($latest_release && $latest_release->id() === $entity->id()) {
      $is_latest_release = TRUE;
    }
  }
  $variables['additional_content']['is_latest_release'] = $is_latest_release;
  if (!$is_latest_release && $latest_release) {
    $variables['additional_content']['latest_release'] = $latest_release->toUrl()->toString();
  }

  // Get the view builder service from the entity type manager.
  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('rdf_entity');
  // Get the creation date field.
  $creation_date = $entity->get('created');
  $creation_date = $viewBuilder->viewField($creation_date, 'default');
  $variables['additional_content']['created'] = $creation_date;
}

/**
 * Implements hook_preprocess_page_title__rdf_entity__asset_distribution().
 */
function joinup_theme_preprocess_page_title__rdf_entity__asset_distribution(&$variables) {
  /** @var \Drupal\rdf_entity\Entity\Rdf $entity */
  $entity = $variables['entity'];

  // Get the view builder service from the entity type manager.
  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('rdf_entity');
  // Get the file size and licence fields.
  $field_ad_file_size = $entity->field_ad_file_size;
  $field_ad_licence = $entity->field_ad_licence;
  $field_ad_file_size = $viewBuilder->viewField($field_ad_file_size, 'default');
  $field_ad_licence = $viewBuilder->viewField($field_ad_licence, 'default');

  $variables['additional_content']['field_ad_file_size'] = $field_ad_file_size;
  $variables['additional_content']['field_ad_licence'] = $field_ad_licence;
}

/**
 * Implements hook_preprocess_page_title__node__news().
 */
function joinup_theme_preprocess_page_title__node__news(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $field_news_headline = $viewBuilder->viewField($node->field_news_headline, 'default');
  $variables['additional_content']['field_news_headline'] = $field_news_headline;

  $created = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'date_only');
  $variables['additional_content']['created'] = $created;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_page_title__node__discussion().
 */
function joinup_theme_preprocess_page_title__node__discussion(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  $created = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'date_only');
  $variables['additional_content']['created'] = $created;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_HOOK() for page-title--node--video.html.twig.
 */
function joinup_theme_preprocess_page_title__node__video(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  $created = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'date_only');
  $variables['additional_content']['created'] = $created;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_HOOK() for page-title--node--document.html.twig.
 */
function joinup_theme_preprocess_page_title__node__document(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $field_document_publication_date = $viewBuilder->viewField($node->field_document_publication_date, 'default');
  $variables['additional_content']['field_document_publication_date'] = $field_document_publication_date;

  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $field_short_title = $viewBuilder->viewField($node->field_short_title, 'default');
  $variables['additional_content']['field_short_title'] = $field_short_title;

  $author_inline = _joinup_theme_get_author($node);
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_comment().
 */
function joinup_theme_preprocess_comment(&$variables) {
  /** @var \Drupal\user\Entity\User $user */
  $user = $variables['user_picture']['#user'];
  $photo_target = $user->get('field_user_photo')->getValue();

  if ($photo_target) {
    $photo_target = $photo_target[0]['target_id'];
    /** @var \Drupal\file\Entity\File $file */
    if ($file = File::load($photo_target)) {
      $uri = $file->getFileUri();
      $url = ImageStyle::load('profile_icon_big')->buildUrl($uri);
      $variables['profile_icon'] = [
        '#markup' => $url,
        '#cache' => [
          'tags' => Cache::mergeTags($user->getCacheTags(), $user->getEntityType()
            ->getListCacheTags()),
          'contexts' => $user->getCacheContexts(),
          'max-age' => $user->getCacheMaxAge(),
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_image().
 */
function joinup_theme_preprocess_image(&$variables) {
  if ($variables['style_name'] == 'profile_icon') {
    $variables['attributes']['class'][] = 'details__avatar';
    $variables['attributes']['class'][] = 'avatar';
    $variables['attributes']['class'][] = 'avatar--25';
  }
}

/**
 * Implements hook_preprocess_user().
 */
function joinup_theme_preprocess_user(&$variables) {
  $variables['full_name'] = $variables['user']->get('full_name')->value;

  // Truncate business title.
  $business_title = $variables['user']->get('field_user_business_title')->value;
  $variables['short_business_title'] = substr($business_title, 0, 30);
}

/**
 * Implements hook_preprocess_user__group_header().
 */
function joinup_theme_preprocess_user__group_header(&$variables) {
  // Create customizable 'member for' field.
  // It creates a timespan without label and with lower granularity.
  $variables['member_for'] = \Drupal::service('date.formatter')->formatTimeDiffSince($variables['user']->getCreatedTime(), ['granularity' => 1]);
  $variables['full_name'] = $variables['user']->get('full_name')->value;
}

/**
 * Implements hook_preprocess_page_title__node__event().
 */
function joinup_theme_preprocess_page_title__node__event(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['entity'];

  /* @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
  $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('node');

  // Get dates and location fields.
  $field_event_date = $viewBuilder->viewField($node->get('field_event_date'), 'default');
  $field_event_location = $viewBuilder->viewField($node->get('field_location'), 'default');

  $created = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'date_only');

  $author_inline = _joinup_theme_get_author($node);

  $variables['additional_content']['field_event_date'] = $field_event_date;
  $variables['additional_content']['field_location'] = $field_event_location;
  $variables['additional_content']['created'] = $created;
  $variables['additional_content']['author'] = $author_inline;
}

/**
 * Implements hook_preprocess_search_api_field__user__field_user_content().
 *
 * Provides a nicer message when the user hasn't created any content.
 */
function joinup_theme_preprocess_search_api_field__user__field_user_content(&$variables) {
  // The "no_results_found" render array is not there if there are results.
  if (empty($variables['no_results_found'])) {
    return;
  }

  $first_name = $variables['entity']->get('field_user_first_name')->value;
  if (!empty($first_name)) {
    $markup = t('@name does not have any content yet.', ['@name' => $first_name]);
  }
  else {
    $markup = t('This user does not have any content yet.');
  }
  $variables['no_results_found'] = [
    '#prefix' => '<div class="page__content">',
    '#suffix' => '</div>',
    '#markup' => $markup,
  ];
}

/**
 * Implements hook_preprocess_HOOK() for joinup-tiles--members-overview.html.twig.
 */
function joinup_theme_preprocess_joinup_tiles__members_overview(&$variables) {
  // The members overview is a view of OgMembership entities, but these have no
  // view modes. Replace them with standard User tiles.
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('user');
  /** @var \Drupal\og\OgMembershipInterface $row */
  foreach ($variables['rows'] as &$row) {
    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = $row['content']['#og_membership'];
    $row['content'] = $view_builder->view($membership->getOwner(), 'view_mode_tile');
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function joinup_theme_preprocess_menu_local_action(&$variables) {
  // Add mdl classes for local action button.
  $mdl_button_classes = [
    'button--blue-light',
    'mdl-button',
    'mdl-js-button',
    'mdl-button--raised',
    'mdl-js-ripple-effect',
    'mdl-button--accent',
  ];
  $variables['link']['#options']['attributes']['class'] = array_merge($variables['link']['#options']['attributes']['class'], $mdl_button_classes);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function joinup_theme_preprocess_menu_local_task(&$variables) {
  $route_match = \Drupal::routeMatch();
  $menu_type = _joinup_menu_local_task_by_route($route_match);

  if ($menu_type == 'horizontal') {
    $variables['attributes']['class'][] = 'tab tab--horizontal mdl-tabs__tab';
  }
  else {
    // Every other occasion, item should be in MDL dropdown menu.
    $variables['attributes']['class'][] = 'mdl-menu__item';
  }

  // Active flag.
  if (isset($variables['is_active']) && $variables['is_active'] == TRUE) {
    $variables['attributes']['class'][] = 'is-active';
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--moderation.html.twig.
 *
 * - Removes the contextual links.
 * - Adds an edit URL.
 */
function joinup_theme_preprocess_node__moderation(&$variables) {
  joinup_theme_remove_contextual_links($variables);
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $variables['edit_url'] = $node->toUrl('edit-form')->toString();
}

/**
 * Implements hook_preprocess_HOOK() for details.html.twig.
 */
function joinup_theme_preprocess_details(&$variables) {
  // Add additional class for multiple files widget.
  if (isset($variables['element']['#theme']) && $variables['element']['#theme'] == 'file_widget_multiple') {
    $variables['attributes']['class'][] = 'table-operations';
  }
}

/**
 * Remove the contextual links from a template preprocess variable array.
 *
 * @param array $variables
 *   An array of template preprocess variables.
 *
 * @see contextual_preprocess()
 */
function joinup_theme_remove_contextual_links(array &$variables) {
  if (!empty($variables['attributes']['class'])) {
    $key = array_search('contextual-region', $variables['attributes']['class']);
    if ($key !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }
  }
  unset($variables['title_suffix']['contextual_links']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for input.html.twig.
 *
 * Add theme suggestions so we can provide different styling on some form
 * buttons.
 */
function joinup_theme_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#is_button'])) {

    // Skip dropbuttons since we have no custom styling for them. These can be
    // recognized by not having an '#array_parents' property .
    // @see \Drupal\Core\Render\Element\Actions::preRenderActionsDropbutton()
    if (empty($variables['element']['#array_parents']) || !is_array($variables['element']['#array_parents'])) {
      return;
    }

    // We need to have different styling on some buttons. The key of this
    // multi-dimension array represents the suggestion name, while its values
    // are the build array key of the button being rendered.
    $input_suggestions = [
      'input__ief_add_another' => [
        // Generic "Add more" button for multi-value widgets.
        'add_more',
        'ief_add_existing',
        'ief_add',
        'ief_reference_save',
        'ief_add_save',
        'ief_edit_save',
      ],
      'input__ief_edit' => [
        'ief_entity_edit',
        'ief_entity_edit_save',
      ],
      'input__ief_cancel' => [
        'ief_entity_cancel',
        'ief_remove_cancel',
      ],
      'input__ief_cancel_circle' => [
        'ief_add_cancel',
        'ief_edit_cancel',
        'ief_reference_cancel',
      ],
      'input__remove_button' => [
        'ief_entity_remove',
        'ief_remove_confirm',
        'remove_button',
      ],
    ];

    // The last key of #array_parents is the build array key used in the code.
    $element_key = end($variables['element']['#array_parents']);
    foreach ($input_suggestions as $suggestion => $names) {
      if (in_array($element_key, $names)) {
        $suggestions[] = $suggestion;
      }
    }
  }

  // Suggestion based on data twig suggestion created in form alter.
  if (isset($variables['element']['#extra_suggestion'])) {
    $suggestions[] = 'input__' . $variables['element']['#type'] . '__' . $variables['element']['#extra_suggestion'];
  }

  // Suggestion for search form submit.
  if (isset($variables['element']['#id']) && strpos($variables['element']['#id'], 'edit-submit-search') !== FALSE) {
    $suggestions[] = 'input__submit__search_bar';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form-element.html.twig.
 */
function joinup_theme_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form_element__' . str_replace('-', '_', $variables['element']['#type']);

  // Suggestion based on data twig suggestion created in form alter.
  if (isset($variables['element']['#extra_suggestion'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'] . '__' . $variables['element']['#extra_suggestion'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for select.html.twig.
 */
function joinup_theme_theme_suggestions_select_alter(array &$suggestions, array $variables) {
  // Array contains all select elements ids, which are displayed as slider.
  $slider_field_names = [
    'field_ar_elibrary_creation',
  ];

  if (in_array($variables['element']['#name'], $slider_field_names)) {
    $suggestions[] = 'select__slider';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for container.html.twig.
 */
function joinup_theme_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $has_extra_suggestions = isset($variables['element']['#extra_suggestion']);

  if (isset($variables['element']['#id'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $variables['element']['#id']);

    // Suggestion for form actions container if id has suffix.
    if (end($suggestions) != 'container__edit_actions' && strpos($variables['element']['#id'], 'edit-actions') !== FALSE) {
      $suggestions[] = 'container__edit_actions';
    }

    // Suggestion for search form submit container.
    if (isset($variables['element']['submit']['#id']) && strpos($variables['element']['submit']['#id'], 'edit-submit-search') !== FALSE) {
      $suggestions[] = 'container__edit_actions__search_bar';
    }
  }

  // Add extra suggestion for grid elements.
  if ($has_extra_suggestions) {
    $suggestions[] = $variables['element']['#extra_suggestion'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page-title.html.twig.
 *
 * Adds suggestions when the route is the canonical view of a rdf entity or a
 * node.
 */
function joinup_theme_theme_suggestions_page_title_alter(array &$suggestions, array &$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  $entity_types = ['rdf_entity', 'node'];
  foreach ($entity_types as $entity_type) {
    if ($route_name === "entity.{$entity_type}.canonical") {
      /** @var \Drupal\core\Entity\EntityInterface $entity */
      $entity = $route_match->getParameter($entity_type);
      $suggestions[] = 'page_title__' . $entity_type . '__' . $entity->bundle();
      $variables['entity'] = $entity;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form.html.twig.
 */
function joinup_theme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#form_id']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field.html.twig.
 *
 * Add theme suggestions for tile and featured view modes.
 */
function joinup_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  // Bail out early if field has a Joinup template suggestion added in the view
  // mode.
  $element = $variables['element'];
  if (!empty($element['#joinup_template_suggestion'])) {
    return;
  }

  $view_modes = [
    'view_mode_tile',
    'view_mode_featured',
  ];

  // Set suggestion based on view mode.
  if (in_array($variables['element']['#view_mode'], $view_modes)) {
    $suggestions[] = 'field__no_wrappers';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for details.html.twig.
 */
function joinup_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {
  // Add template suggestion for vertical tabs.
  if (isset($variables['element']['#group']) && $variables['element']['#group'] == 'group_general') {
    $suggestions[] = 'details__vertical_tabs';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function joinup_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['element']['#type'])) {
    // Array contains form elements, which are displayed with floating label.
    $floating_label_types = [
      'email',
      'entity_autocomplete',
      'password',
      'textfield',
      'url',
    ];

    if (in_array($variables['element']['#type'], $floating_label_types)) {
      if ($hook == 'form_element') {
        $suggestions[] = 'form_element__floating';

        // Floating form element with label.
        if (in_array('field_social_media', $variables['element']['#array_parents'], TRUE)) {
          $suggestions[] = 'form_element__floating__with_prefix';
        }
      }
      elseif ($hook == 'input') {
        $suggestions[] = 'input__floating';
      }
    }

    // Add a theme suggestion for statistic topics which are being shown in the
    // group header, such as 'licence' and 'downloads'.
    if (isset($variables['element']['#type']) && $variables['element']['#type'] === 'container' && !empty($variables['element']['#stats_topic'])) {
      $original_theme_hook = $variables['theme_hook_original'];
      $suggestions[] = $original_theme_hook . '__stats_topic';
    }
  }

  // Add suggestion based on view mode for user entity.
  if ($hook == 'user' && !empty($variables['elements']['#view_mode'])) {
    $original_theme_hook = $variables['theme_hook_original'];
    $view_mode = $variables['elements']['#view_mode'];
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $view_mode);
  }

  // Some entities share the same template when rendered using tile and featured
  // view modes.
  $listing_entities = [
    'node',
    'rdf_entity',
    'user',
  ];
  if (in_array($hook, $listing_entities) && !empty($variables['elements']['#view_mode'])) {
    $view_mode = $variables['elements']['#view_mode'];
    $listing_modes = [
      'view_mode_tile',
      'view_mode_featured',
    ];

    if (in_array($view_mode, $listing_modes)) {
      $entity_type = $variables['elements']['#entity_type'];
      $bundle = $variables['elements']['#' . $entity_type]->bundle();
      $suggestions[] = $entity_type . '__' . str_replace('-', '_', $bundle) . '__listing_item';
    }
  }

  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function joinup_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'joinup_theme/form-components';
  $form['#attached']['drupalSettings']['widthBreakpoint'] = 100;

  // Set templates for forms where actions button are separated.
  $custom_forms = [
    'node_form',
    'rdf_entity_form',
    'message_contact_form_submission_form',
    'adms_validator_form',
    'user_login_form',
    'user_form',
    'user_pass',
    'simplenews_subscriber_account_form',
    'ogmenu_instance_navigation_edit_form',
  ];

  // Exclude forms with tabs.
  $tab_forms = [
    'rdf_entity_collection_edit_form',
    'rdf_entity_collection_propose_form',
    'rdf_entity_solution_form',
    'rdf_entity_solution_edit_form',
    'rdf_entity_collection_add_form',
    'rdf_entity_solution_add_form',
    'node_tallinn_report_edit_form',
  ];

  if (is_array($form['#theme']) && array_intersect($form['#theme'], $custom_forms) && !array_intersect($form['#theme'], $tab_forms)) {
    $form['#theme'][] = 'buttons_separated_form';
  }

  // Change markup in an username field.
  if ($form_id == 'user_form' && isset($form['user_name'])) {
    $form['user_name']['#template'] = '<div class="form-wrapper"><div class="form__label">{{ "Username"|t }}</div><div class="form__text">{{ name }}</div></div>';
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Adds extension and file size to the available variables when rendering a
 * document node.
 */
function joinup_theme_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  // Add bundle class in listing templates.
  if ($variables['view_mode'] == 'view_mode_tile' || $variables['view_mode'] == 'view_mode_featured') {
    $bundle_class = 'listing__card--' . str_replace('_', '-', $node->bundle());
    $variables['attributes']['class'][] = $bundle_class;
  }

  // Getting the node creation from the node object.
  if ($node->bundle() == 'news') {
    $variables['created'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'date_only');
  }

  if ($node->bundle() !== 'document' || $node->get('field_file')->isEmpty()) {
    return;
  }

  /** @var \Drupal\file\FileInterface $file */
  $file = $node->get('field_file')->first()->entity;
  $is_remote = \Drupal::service('file_url.handler')->isRemote($file);

  if (!$is_remote) {
    $variables['extension'] = pathinfo($file->getFilename(), PATHINFO_EXTENSION);
  }
  else {
    $variables['extension'] = t('External');
  }
}

/**
 * Implements hook_preprocess_rdf_entity().
 *
 * Hide label for certain displays.
 */
function joinup_theme_preprocess_rdf_entity(&$variables) {
  if ($variables['view_mode'] == 'about') {
    $variables['is_label_hidden'] = TRUE;
  }

  // Add bundle class in listing templates.
  if ($variables['view_mode'] == 'view_mode_tile' || $variables['view_mode'] == 'view_mode_featured') {
    $bundle_class = 'listing__card--' . str_replace('_', '-', $variables['rdf_entity']->bundle());
    $variables['attributes']['class'][] = $bundle_class;
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--event--listing-item.html.twig.
 *
 * Get raw number of members.
 */
function joinup_theme_preprocess_rdf_entity__collection__listing_item(&$variables) {
  if (isset($variables['elements']['members']['#markup'])) {
    $arguments = $variables['elements']['members']['#markup']->getArguments();
    $variables['member_count'] = $arguments['@member_count'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for node--discussion--listing-item.html.twig.
 *
 * Provides the comment count as a variable.
 */
function joinup_theme_preprocess_node__discussion__listing_item(&$variables) {
  $node = $variables['elements']['#node'];
  $variables['comment_count'] = $node->get('field_replies')->comment_count;
}

/**
 * Implements hook_preprocess_HOOK() for node--event--listing-item.html.twig.
 *
 * Hides the separator and end date as only the start date is shown in tiles.
 */
function joinup_theme_preprocess_node__event__listing_item(&$variables) {
  if (!empty($variables['content']['field_event_date'])) {
    $element = &$variables['content']['field_event_date'];
    foreach (Element::children($element) as $key) {
      // The "start_date" render array is present when more then one date is
      // rendered.
      // @see \Drupal\joinup_core\Plugin\Field\FieldFormatter\CondensedDateRangeFormatter::viewElements()
      if (!empty($element[$key]['start_date'])) {
        $element[$key]['separator']['#access'] = FALSE;
        $element[$key]['end_date']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add theme suggestions directly to the comment body field.
 */
function joinup_theme_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->isAnonymous()) {
    $form['field_body']['#attributes']['class'][] = 'comment-form-anonymous';
    $form['field_body']['widget'][0]['#extra_suggestion'] = 'comment_plain';
  }
}

/**
 * Implements hook_preprocess_HOOK() for table--file-formatter-table.html.twig.
 *
 * Extracts the file extension and makes it available on the row level.
 */
function joinup_theme_preprocess_table__file_formatter_table(&$variables) {
  if (!empty($variables['rows'])) {
    foreach ($variables['rows'] as $index => $row) {
      /** @var \Drupal\file\Entity\File $file */
      $file = $variables['rows'][$index]['cells'][0]['content']['#file'];
      $file_icon = pathinfo($file->getFilename(), PATHINFO_EXTENSION);

      // List of available icons.
      $available_icons = [
        'doc',
        'exe',
        'gif',
        'jpg',
        'pdf',
        'png',
        'ppt',
        'rar',
        'xls',
        'zip',
      ];

      // Check if icon exist, otherwise set default icon.
      if (in_array($file_icon, $available_icons)) {
        $variables['rows'][$index]['#file_extension'] = $file_icon;
      }
      else {
        $variables['rows'][$index]['#file_extension'] = 'default';
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add theme suggestions and classes in search form.
 */
function joinup_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form['#id'], 'views-exposed-form-search-page-') !== FALSE) {
    $form['keys']['#extra_suggestion'] = 'search_bar';
    $form['keys']['#attributes']['class'][] = 'search-bar__input';
    $form['keys']['#attributes']['placeholder'] = t('Start typing to search...');
  }
}
