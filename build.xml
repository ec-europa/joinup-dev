<?xml version="1.0" encoding="UTF-8" ?>

<project name="Joinup" default="help">

    <import file="${project.basedir}/build.common.xml" optional="true" />
    <property file="build.properties.local" />
    <property file="build.properties" />
    <property file="build.properties.dist" />

    <target name="help" description="Phing target list">
        <exec executable="${phing.bin}"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

    <includepath classpath="src/Phing" />

    <echo msg="Loading Drush task." />
    <taskdef name="drush" classname="\Drush\Task" />

    <echo msg="Loading Behat task." />
    <taskdef name="behat" classname="BehatTask" />

    <echo msg="Loading PHP Codesniffer Configuration task." />
    <taskdef name="phpcodesnifferconfiguration" classname="\DrupalProject\Phing\PhpCodeSnifferConfigurationTask" />

    <echo msg="Loading PHPUnit Configuration task." />
    <taskdef name="phpunitconfiguration" classname="\DrupalProject\Phing\PhpUnitConfigurationTask" />

    <echo msg="Loading Remove Patched Packages task." />
    <taskdef name="removepatchedpackages" classname="\DrupalProject\Phing\RemovePatchedPackagesTask" />

    <echo msg="Loading Virtuoso Sparql Permissions task." />
    <taskdef name="setvirtuososparqlpermissions" classname="\DrupalProject\Phing\SetVirtuosoSparqlPermissions" />

    <echo msg="Loading Import RDF fixtures task." />
    <taskdef name="importrdffixtures" classname="\DrupalProject\Phing\ImportRdfFixtures" />

    <echo msg="Loading AWS additional tasks." />
    <import file="./vendor/continuousphp/aws-sdk-phing/tasks.xml" />
    <property name="aws.profile" value="" />

    <echo msg="Loading infra additional tasks." />
    <import file="./vendor/ec-europa/infra/infra.xml" />

    <!-- Make the settings folder writeable so that the installer can copy settings.php. -->
    <target name="writable-settings-folder">
        <chmod mode="0755" failonerror="true" verbose="true" quiet="false" file="${website.settings.dir}" />
    </target>

    <!-- Make settings.php writeable so that the installer save it. -->
    <target name="writable-settings-php">
        <if>
            <available file="${website.settings.php}" type="file" property="website.settings.php.available" />
            <then>
                <chmod mode="0644" failonerror="false" verbose="true" quiet="false" file="${website.settings.php}" />
            </then>
        </if>
    </target>

    <!-- Install the website. -->
    <target name="install" depends="writable-settings-folder, writable-settings-php">
        <drush
            command="site-install"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="db-url" value="${drupal.db.url}" />
            <option name="site-name" value="${website.site.name}" />
            <option name="account-name" value="${drupal.admin.username}" />
            <option name="account-pass" value="${drupal.admin.password}" />
            <option name="account-mail" value="${drupal.admin.email}" />
            <param>${website.profile.name}</param>
            <!-- Disable sending of e-mails during installation. -->
            <param>install_configure_form.update_status_module='array(FALSE,FALSE)'</param>
            <param>install_settings_form.sparql.host=${sparql.host}</param>
            <param>install_settings_form.sparql.port=${sparql.port}</param>
        </drush>
    </target>

    <target name="setup-virtuoso-permissions">
        <setvirtuososparqlpermissions
            IsqlPath="${isql.bin}"
            DataSourceName="${sparql.dsn}"
            Username="${sparql.user}"
            Password="${sparql.password}" />
    </target>

    <target name="import-rdf-fixtures">
        <importrdffixtures
                IsqlPath="${isql.bin}"
                DataSourceName="${sparql.dsn}"
                Username="${sparql.user}"
                Password="${sparql.password}"
                SharedDirectory="${sparql.shareddirectory}" />
    </target>

    <!-- Set up PHP CodeSniffer. -->
    <target name="setup-php-codesniffer" description="Generate the configuration file for PHP CodeSniffer.">
        <if>
            <available file="${phpcs.config}" type="file" property="phpcs.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer default configuration file." />
                <delete file="${phpcs.config}" failonerror="false" />
            </then>
        </if>
        <if>
            <available file="${phpcs.global.config}" type="file" property="phpcs.global.config.available" />
            <then>
                <echo message="Deleting existing PHP Codesniffer global configuration file." />
                <delete file="${phpcs.global.config}" failonerror="false" />
            </then>
        </if>
        <phpcodesnifferconfiguration
            configFile="${phpcs.config}"
            extensions="${phpcs.extensions}"
            files="${phpcs.files}"
            globalConfig="${phpcs.global.config}"
            ignorePatterns="${phpcs.ignore}"
            report="${phpcs.report}"
            showProgress="${phpcs.progress}"
            showSniffCodes="${phpcs.sniffcodes}"
            standard="${phpcs.standard}"
        />

        <!-- Set up the git pre-push hook. -->
        <phingcall target="disable-pre-push" />
        <if>
            <equals arg1="${phpcs.prepush.enable}" arg2="1" />
            <then>
                <symlink link="${phpcs.prepush.destination}" target="${phpcs.prepush.source}" overwrite="true" />
            </then>
        </if>
    </target>

    <!-- Disable the PHP CodeSniffer pre-push hook. -->
    <target name="disable-pre-push" description="Disable the coding standards check when pushing to a git repository.">
        <delete file="${phpcs.prepush.destination}" failonerror="false" />
    </target>

    <!-- Set up Behat. -->
    <target name="setup-behat" description="Generate the configuration file for Behat.">
        <if>
            <available file="${behat.yml.path}" type="file" property="behat.yml.available" />
            <then>
                <echo message="Deleting existing behat.yml configuration file" />
                <delete file="${behat.yml.path}" failonerror="false" />
            </then>
        </if>
        <echo message="Creating behat.yml configuration file" />
        <loadfile property="behat.yml.content" file="${behat.yml.template}">
            <filterchain>
                <replacetokens>
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.files.path" value="${behat.files.path}" />
                    <token key="website.drupal.dir" value="${website.drupal.dir}" />
                    <token key="behat.subcontexts.path" value="${behat.subcontexts.path}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                </replacetokens>
            </filterchain>
        </loadfile>
        <echo message="${behat.yml.content}" file="${behat.yml.path}" />
    </target>

    <!-- Run Behat tests. -->
    <!-- Use this target to run tests with increased verbosity on ContinuousPHP to help debugging. -->
    <target name="run-behat-tests" description="Run Behat tests.">
        <behat
            executable="${behat.bin}"
            config="${behat.yml.path}"
            strict="${behat.options.strict}"
            verbose="${behat.options.verbosity}"
        />
    </target>

    <!-- Set up PHPUnit. -->
    <target name="setup-phpunit" description="Generate the configuration file for PHPUnit.">
        <if>
            <available file="${phpunit.config}" type="file" property="phpunit.config.available" />
            <then>
                <echo message="Deleting existing PHPUnit configuration file." />
                <delete file="${phpunit.config}" failonerror="false" />
            </then>
        </if>
        <phpunitconfiguration
                configFile="${phpunit.config}"
                distFile="${phpunit.dist}"
                files="${phpunit.files}"
                directories="${phpunit.directories}"
                testsuiteName="${phpunit.testsuite.name}"
                baseUrl="${phpunit.base_url}"
                dbUrl="${phpunit.db_url}"
        />
    </target>

    <!-- Link the site root to the document root of the webserver. -->
    <target
        name="link-docroot"
        description="Create a symlink from the site root to the webserver document root.">
        <symlink link="${server.docroot}" target="${website.drupal.dir}" overwrite="true" />
    </target>

    <!-- Create demo users. -->
    <target name="create-demo-users" description="Create demo users.">
        <foreach list="${drupal.demo.users}" param="drupal.demo.user" target="create-demo-user" delimiter="," />
        <!-- Create a user with only "authenticated user" role assigned. -->
        <drush
                command="user-create"
                assume="yes"
                root="${website.drupal.dir}"
                bin="${drush.bin}"
                verbose="${drush.verbose}">
            <option name="mail" value="user@example.com" />
            <option name="password" value="user" />
            <param>user</param>
        </drush>
    </target>

    <!-- Create a demo user. Subtarget of "create-demo-users". -->
    <target name="create-demo-user">
        <drush
            command="user-create"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="mail" value="${drupal.demo.user}@example.com" />
            <option name="password" value="${drupal.demo.user}" />
            <param>${drupal.demo.user}</param>
        </drush>
        <drush
            command="user-add-role"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <option name="name" value="${drupal.demo.user}" />
            <param>${drupal.demo.user}</param>
        </drush>
    </target>

    <target name="create-d6-db">
        <pdosqlexec url="mysql:host=${migration.db.host}" userid="${migration.db.user}" password="${migration.db.password}">
            DROP DATABASE IF EXISTS ${migration.db.name};
        </pdosqlexec>
        <pdosqlexec url="mysql:host=${migration.db.host}" userid="${migration.db.user}" password="${migration.db.password}">
            CREATE DATABASE ${migration.db.name};
        </pdosqlexec>
    </target>
    <target name="import-legacy-db">
        <pdosqlexec url="mysql:host=localhost;dbname=${migration.db.name}"
                    userid="${migration.db.user}"
                    password="${migration.db.password}">
            <transaction src="${migration.db.import_path}"/>
        </pdosqlexec>
    </target>

    <target name="download-apache-solr">
        <if>
            <available file="${solr.dir}" type="dir" property="solr.dir.available" />
            <then>
                <echo message="Apache Solr installation directory exists (${solr.dir}), skipping download." />
            </then>
            <else>
                <if>
                    <available file="${tmp.dir}/${solr.tarball.filename}" type="file" property="solr.tarball.available" />
                    <then>
                        <echo message="Apache Solr tarball already downloaded to ${tmp.dir}/${solr.tarball.filename}, skipping download." />
                    </then>
                    <else>
                        <mkdir dir="${tmp.dir}" />
                        <httpget url="${solr.download.url}" dir="${tmp.dir}" />
                    </else>
                </if>
                <!-- Use the faster native untar on UNIX systems. -->
                <if>
                    <os family="unix" />
                    <then>
                        <mkdir dir="${solr.vendor.dir}" />
                        <exec
                            command='tar xzf "${tmp.dir}/${solr.tarball.filename}" -C "${solr.vendor.dir}"'
                            dir="${project.basedir}"
                            passthru="true"
                            checkreturn="true" />
                    </then>
                    <else>
                        <untar file="${tmp.dir}/${solr.tarball.filename}" todir="${solr.vendor.dir}" />
                    </else>
                </if>
            </else>
        </if>
        <!-- Create a symlink of the Solr executable in the vendor/bin directory. -->
        <if>
            <available file="${solr.bin}" type="file" property="file.exists" />
            <then>
                <echo message="Symlink to Solr binary already exists in ${solr.bin}. Deleting symlink." />
                <delete file="${solr.bin}" failonerror="false" />
            </then>
        </if>
        <echo message="Creating symlink to Solr binary." />
        <symlink
            target="${solr.dir}/bin/solr"
            link="${solr.bin}"
        />
    </target>

    <target
        name="start-apache-solr"
        description="Start the Apache Solr server.">
        <!-- Check if Solr is already running before attempting to start it. -->
        <exec dir="${solr.dir}"
              command="./bin/solr status"
              returnProperty="solr.status"
              passthru="true" />
        <if>
            <equals arg1="${solr.status}" arg2="0" />
            <then>
                <echo message="Apache Solr is already running." />
            </then>
            <else>
                <exec dir="${solr.dir}"
                      command="./bin/solr start"
                      checkreturn="true"
                      passthru="true" />
            </else>
        </if>
    </target>

    <target
        name="restart-apache-solr"
        description="Restart the Apache Solr server.">
        <exec dir="${solr.dir}"
              command="./bin/solr restart"
              checkreturn="true"
              passthru="true" />
    </target>

    <target
        name="stop-apache-solr"
        description="Stop the Apache Solr server.">
        <exec dir="${solr.dir}"
              command="./bin/solr stop"
              checkreturn="true"
              passthru="true" />
    </target>

    <target name="configure-apache-solr">
        <if>
            <not>
                <available file="${solr.config.dir}" type="dir" property="solr.config.dir.available" />
            </not>
            <then>
                <fail message="Search API Solr is not installed. Did you run `composer install`?" />
            </then>
        </if>
        <if>
            <available file="${solr.core.dir}" type="dir" property="solr.core.dir.available" />
            <then>
                <echo message="A Solr core has already been configured at ${solr.core.dir}. Skipping." />
            </then>
            <else>
                <!-- Create the Solr core. -->
                <exec dir="${solr.dir}"
                      command="./bin/solr create_core -c ${solr.core}"
                      checkreturn="true"
                      passthru="true"/>
                <!-- Copy the configuration. -->
                <copy todir="${solr.core.dir}/conf" overwrite="true">
                    <fileset dir="${solr.config.dir}" />
                </copy>
                <!-- Restart Solr so our configuration changes are picked up. -->
                <phingcall target="restart-apache-solr" />
            </else>
        </if>
    </target>

    <target
        name="setup-apache-solr"
        description="Set up Apache Solr."
        depends="download-apache-solr, start-apache-solr, configure-apache-solr" />

    <!-- Set up development configuration, including on-screen error logging and debugging options. -->
    <target name="enable-dev-settings">
        <phingcall target="writable-settings-folder" />
        <!-- Copy settings file containing development values, but preserve any existing local settings. -->
        <copy file="${website.settings.local.php.example}" tofile="${website.settings.local.php}" overwrite="false" />
        <!-- Uncomment the inclusion of the local settings file in settings.php. -->
        <phingcall target="writable-settings-php" />
        <reflexive>
            <fileset dir="${website.settings.dir}">
                <include pattern="settings.php" />
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp
                        pattern="^# (if \(file_exists\(__DIR__ \. '\/settings\.local\.php'\)\) \{\n)# (  include __DIR__ \. '\/settings\.local\.php';\n)# (\})"
                        replace="\1\2\3"
                        modifiers="m" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- Enable development modules. -->
    <target name="enable-dev-modules">
        <foreach list="${drupal.modules.dev}" param="module" target="enable-module" delimiter=" " />
    </target>

    <!-- Enable modules for user acceptance testing. These are different from the
      ones in enable-dev-modules as it can contain modules not needed for development
      like demo content modules. -->
    <!-- Enable development modules. -->
    <target name="enable-uat-modules">
        <foreach list="${drupal.modules.uat}" param="module" target="enable-module" delimiter=" " />
    </target>

    <!-- Enable a module. -->
    <target name="enable-module">
        <drush
            command="pm-enable"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>${module}</param>
        </drush>
    </target>

    <target name="purge-rdf-content">
        <drush
            command="rdf-entity-purge"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
        </drush>
    </target>

    <target name="setup-continuousphp"
            depends="check-continuousphp">
        <echo message="Put the odbc configuration file in the home folder where CPHP can find it" />
        <copy
            file="./vendor/ec-europa/infra/continuousphp/odbc.ini"
            tofile="${user.home}/.odbc.ini"
            overwrite="true" />
        <echo message="Allow importing of RDF data from all directories" />
        <exec dir="${project.basedir}"
              command="sudo sed -i 's/DirsAllowed              = ., \/usr\/share\/virtuoso-opensource-6.1\/vad/DirsAllowed = \//g' /etc/virtuoso-opensource-6.1/virtuoso.ini;
sudo supervisorctl restart virtuoso"
              checkreturn="true"
              passthru="true" />
        <echo message="Create Solr index" />
        <exec dir="${project.basedir}"
              command="sudo curl -o /opt/solr/search_api_solr.tar.gz https://ftp.drupal.org/files/projects/search_api_solr-8.x-1.0-alpha4.tar.gz;
sudo tar xvzf /opt/solr/search_api_solr.tar.gz -C /opt/solr;
sudo /opt/solr/bin/solr create_core -c drupal;
sudo mkdir /opt/solr/server/solr/drupal;
sudo rsync -avz /opt/solr/search_api_solr/solr-conf/5.x/ /opt/solr/server/solr/drupal/conf/"
              checkreturn="true"
              passthru="true" />
        <echo message="Report Solr status" />
        <exec dir="${project.basedir}"
              command="sudo /opt/solr/bin/solr status"
              checkreturn="true"
              passthru="true" />
        <echo message="Restart Solr" />
        <exec dir="${project.basedir}"
              command="sudo /opt/solr/bin/solr restart"
              checkreturn="true"
              passthru="true"
              spawn="true" />
    </target>

    <target name="check-continuousphp">
        <echo message="Check if we are running on ContinuousPHP" />
        <if>
            <not>
                <available file="/home/cphp" type="dir" property="environment.cphp" />
            </not>
            <then>
                <fail message="Only run this target on a ContinuousPHP test environment" />
            </then>
        </if>
    </target>

    <target name="build-continuousphp"
            depends="check-continuousphp">
        <echo message="Install the SASS compiler" />
        <exec dir="${project.basedir}"
              command="gem install sass"
              checkreturn="true"
              passthru="true" />
    </target>

    <!-- Add migration database connection to Drupal settings file. -->
    <target name="setup-migration" depends="writable-settings-php, create-d6-db">
        <echo message="Setup migration" />
        <append destFile="${website.settings.php}" text="${line.separator}$databases['migrate']['default'] = [${line.separator}
 'database' => '${migration.db.name}',${line.separator}
 'username' => '${migration.db.user}',${line.separator}
 'password' => '${migration.db.password}',${line.separator}
 'prefix' => '${migration.db.prefix}',${line.separator}
 'host' => '${migration.db.host}',${line.separator}
 'port' => '${migration.db.port}',${line.separator}
 'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',${line.separator}
 'driver' => 'mysql',${line.separator}];${line.separator}" />
    </target>

    <!-- Enable migration modules. -->
    <target name="enable-migration-modules">
        <drush
            command="pm-enable"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>${migration.modules}</param>
        </drush>
    </target>

    <!-- Run the migration ids specified in the configuration. -->
    <target name="run-migration">
        <echo message="Run migration" />
        <drush
            command="migrate_drush_run"
            assume="yes"
            root="${website.drupal.dir}"
            bin="${drush.bin}"
            verbose="${drush.verbose}">
            <param>${migration.ids}</param>
        </drush>
    </target>

    <!-- Remove all packages that are patched with cweagans/composer-patches. -->
    <target name="remove-patched-packages">
        <removepatchedpackages
            composerJsonPath="${composer.json}"
        />
    </target>

    <!-- provision new demo/test stack on AWS -->
    <target name="provision-stack"
            description="Provision a stack on AWS"
            depends="setup-aws, run-stack, setup-deployment-group" />

    <!-- Install Composer dependencies for the build system. -->
    <target name="install-composer-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.basedir}" />
        </composer>
    </target>

    <!-- Compile SASS to CSS. -->
    <target name="compile-sass"
            description="Compile the SASS to CSS.">
        <!-- Make sure the CSS directory exists. -->
        <mkdir dir="${sass.output.dir}" />
        <sass
            executable="${sass.bin}"
            style="${sass.style}"
            input="${sass.input}"
            output="${sass.output.dir}/${sass.output.file}" />
    </target>

    <target
        name="build-dist"
        description="Build a distribution package."
        depends="compile-sass" />

    <target
        name="build-dev"
        description="Build a development environment."
        depends="install-composer-dependencies, setup-behat, setup-php-codesniffer, setup-phpunit, compile-sass" />

    <target
        name="setup-dev"
        description="Set up 'development mode' for an installed website."
        depends="enable-dev-settings, enable-dev-modules" />

    <target
        name="setup-acceptance"
        description="Set up an acceptance environment."
        depends="create-demo-users, setup-virtuoso-permissions, purge-rdf-content, import-rdf-fixtures" />

    <target
        name="install-dev"
        description="Install the website and set up the development environment."
        depends="setup-virtuoso-permissions, install, purge-rdf-content, import-rdf-fixtures, setup-dev, create-demo-users" />

</project>
