diff --git a/src/Commands/AbstractDrupalCommands.php b/src/Commands/AbstractDrupalCommands.php
index 28e1592..03ab322 100644
--- a/src/Commands/AbstractDrupalCommands.php
+++ b/src/Commands/AbstractDrupalCommands.php
@@ -80,7 +80,7 @@ public function validateSiteInstall(CommandData $commandData)
         $input = $commandData->input();
 
         // Validate if permissions will be set up.
-        if (!$input->getOption('skip-permissions-setup')) {
+        if (!$input->hasOption('skip-permissions-setup') || !$input->getOption('skip-permissions-setup')) {
             return;
         }
 
diff --git a/src/Commands/DynamicCommands.php b/src/Commands/DynamicCommands.php
index 624751a..779c9cc 100644
--- a/src/Commands/DynamicCommands.php
+++ b/src/Commands/DynamicCommands.php
@@ -3,6 +3,7 @@
 namespace OpenEuropa\TaskRunner\Commands;
 
 use OpenEuropa\TaskRunner\Tasks as TaskRunnerTasks;
+use Robo\Robo;
 
 /**
  * Class DynamicCommands
@@ -18,8 +19,10 @@ class DynamicCommands extends AbstractCommands
      */
     public function runTasks()
     {
-        $command = $this->input()->getArgument('command');
-        $tasks = $this->getConfig()->get("commands.{$command}");
+        $commandName = $this->input()->getArgument('command');
+        /** @var \Consolidation\AnnotatedCommand\AnnotatedCommand $command */
+        $command = Robo::application()->get($commandName);
+        $tasks = $command->getAnnotationData()['tasks'];
 
         return $this->taskCollectionFactory($tasks);
     }
diff --git a/src/TaskRunner.php b/src/TaskRunner.php
index 1e3228a..b2a47e0 100644
--- a/src/TaskRunner.php
+++ b/src/TaskRunner.php
@@ -71,7 +71,6 @@ class TaskRunner
     private $defaultCommandClasses = [
         ChangelogCommands::class,
         DrupalCommands::class,
-        DynamicCommands::class,
         ReleaseCommands::class,
     ];
 
@@ -97,7 +96,6 @@ public function __construct(InputInterface $input, OutputInterface $output, Clas
 
         // Create and initialize runner.
         $this->runner = new RoboRunner();
-        $this->runner->setRelativePluginNamespace('TaskRunner');
         $this->runner->setContainer($this->container);
     }
 
@@ -106,8 +104,12 @@ public function __construct(InputInterface $input, OutputInterface $output, Clas
      */
     public function run()
     {
+        // Discover early the commands to allow dynamic command overrides.
+        $commandClasses = $this->discoverCommandClasses();
+        $commandClasses = array_merge($this->defaultCommandClasses, $commandClasses);
+
         // Register command classes.
-        $this->runner->registerCommandClasses($this->application, $this->defaultCommandClasses);
+        $this->runner->registerCommandClasses($this->application, $commandClasses);
 
         // Register commands defined in runner.yml file.
         $this->registerDynamicCommands($this->application);
@@ -239,14 +241,47 @@ private function getWorkingDir(InputInterface $input)
      */
     private function registerDynamicCommands(Application $application)
     {
-        foreach ($this->getConfig()->get('commands', []) as $name => $tasks) {
-            /** @var \Consolidation\AnnotatedCommand\AnnotatedCommandFactory $commandFactory */
-            $commandFileName = DynamicCommands::class."Commands";
-            $commandClass = $this->container->get($commandFileName);
-            $commandFactory = $this->container->get('commandFactory');
+        if (!$commands = $this->getConfig()->get('commands')) {
+            return;
+        }
+
+        /** @var \Consolidation\AnnotatedCommand\AnnotatedCommandFactory $commandFactory */
+        $commandFactory = $this->container->get('commandFactory');
+        $commandFileName = DynamicCommands::class."Commands";
+        $this->runner->registerCommandClass($this->application, DynamicCommands::class);
+        $commandClass = $this->container->get($commandFileName);
+
+        foreach ($commands as $name => $tasks) {
+            $aliases = [];
+            // This command has been already registered as an annotated command.
+            if ($application->has($name)) {
+                $registeredCommand = $application->get($name);
+                $aliases = $registeredCommand->getAliases();
+                // The dynamic command overrides an alias rather than a
+                // registered command main name. Get the command main name.
+                if (in_array($name, $aliases, true)) {
+                    $name = $registeredCommand->getName();
+                }
+            }
+
             $commandInfo = $commandFactory->createCommandInfo($commandClass, 'runTasks');
-            $command = $commandFactory->createCommand($commandInfo, $commandClass)->setName($name);
+            $commandInfo->addAnnotation('tasks', $tasks);
+            $command = $commandFactory->createCommand($commandInfo, $commandClass)
+                ->setName($name)
+                ->setAliases($aliases);
             $application->add($command);
         }
     }
+
+    /**
+     * @return string[]
+     */
+    protected function discoverCommandClasses()
+    {
+        /** @var \Robo\ClassDiscovery\RelativeNamespaceDiscovery $discovery */
+        $discovery = Robo::service('relativeNamespaceDiscovery');
+        $discovery->setRelativeNamespace('TaskRunner\Commands')
+            ->setSearchPattern('/.*Commands?\.php$/');
+        return $discovery->getClasses();
+    }
 }
diff --git a/tests/CommandsTest.php b/tests/CommandsTest.php
index 8408fee..9c3b4bf 100644
--- a/tests/CommandsTest.php
+++ b/tests/CommandsTest.php
@@ -369,6 +369,29 @@ public function testUserConfigFile()
         $this->assertNotEquals($drupalRoot, $runner->getConfig()->get('drupal.root'));
     }
 
+    /**
+     * @dataProvider overrideCommandDataProvider
+     *
+     * @param $command
+     * @param array $runnerConfig
+     * @param array $expected
+     */
+    public function testOverrideCommand($command, array $runnerConfig, array $expected)
+    {
+        $runnerConfigFile = $this->getSandboxFilepath('runner.yml');
+        file_put_contents($runnerConfigFile, Yaml::dump($runnerConfig));
+
+        $input = new StringInput("{$command} --working-dir=".$this->getSandboxRoot());
+        $output = new BufferedOutput();
+        $runner = new TaskRunner($input, $output, $this->getClassLoader());
+        $runner->run();
+        $text = $output->fetch();
+
+        foreach ($expected as $row) {
+            $this->assertContains($row, $text);
+        }
+    }
+
     /**
      * @return array
      */
@@ -425,6 +448,14 @@ public function changelogDataProvider()
         return $this->getFixtureContent('changelog.yml');
     }
 
+    /**
+     * @return array
+     */
+    public function overrideCommandDataProvider()
+    {
+        return $this->getFixtureContent('override.yml');
+    }
+
     /**
      * @param string $content
      * @param array  $expected
diff --git a/tests/fixtures/override.yml b/tests/fixtures/override.yml
new file mode 100644
index 0000000..5b7ceb8
--- /dev/null
+++ b/tests/fixtures/override.yml
@@ -0,0 +1,46 @@
+# Override a default command by its main name.
+# Run command by its main name.
+- command: drupal:site-install
+  runnerConfig:
+    commands:
+      drupal:site-install:
+        - echo "Hello world!"
+        - echo "Hey you!"
+  expected:
+    - '[Exec] Running echo "Hello world!"'
+    - '[Exec] Running echo "Hey you!"'
+
+# Override a default command by its main name.
+# Run command by one of its aliases.
+- command: drupal:site-install
+  runnerConfig:
+    commands:
+      dsi:
+        - echo "Hello world!"
+        - echo "Hey you!"
+  expected:
+    - '[Exec] Running echo "Hello world!"'
+    - '[Exec] Running echo "Hey you!"'
+
+# Override a default command by one of its aliases.
+# Run command by other alias.
+- command: drupal:si
+  runnerConfig:
+    commands:
+      dsi:
+        - echo "Hello world!"
+        - echo "Hey you!"
+  expected:
+    - '[Exec] Running echo "Hello world!"'
+    - '[Exec] Running echo "Hey you!"'
+
+# Override a custom command.
+- command: custom:command-two
+  runnerConfig:
+    commands:
+      custom:command-two:
+        - echo "Hello world!"
+        - echo "Hey you!"
+  expected:
+    - '[Exec] Running echo "Hello world!"'
+    - '[Exec] Running echo "Hey you!"'
